<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBatis-源码分析-调试环境搭建</title>
    <url>/2020/06/06/MyBatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文主要是搭建 MyBatis 源码调试环境</p>
<a id="more"></a>

<h3 id="依赖工具"><a href="#依赖工具" class="headerlink" title="依赖工具"></a>依赖工具</h3><p>Maven<br>Git<br>JDK<br>IntelliJ IDEA  </p>
<!-- more -->
<h3 id="源码拉取"><a href="#源码拉取" class="headerlink" title="源码拉取"></a>源码拉取</h3><p>从官方仓库 <a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a> Fork 出属于自己的仓库。为什么要 Fork ？既然开始阅读、调试源码，我们可能会写一些注释，有了自己的仓库，可以进行自由的提交。<br>使用 IntelliJ IDEA 从 Fork 出来的仓库拉取代码。<br>本文使用的 MyBatis 版本为 3.5.0-SNAPSHOT 。<br>因为 MyBatis 是有些年份的框架，所以克隆的过程可能比较慢，耐心等待。</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>MyBatis 想要调试，非常方便，只需要打开 org.apache.ibatis.autoconstructor.AutoConstructorTest 单元测试类，任意一个单元测试方法，右键，开始调试即可。<br>当然，考虑到让大家更好的理解 AutoConstructorTest 这个类，下面，我们还是详细解析下。AutoConstructorTest 所在在 autoconstructor 包下，整体结构如下：<br><img src="01.jpg" alt="01"></p>
<h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><p>mybatis-config.xml ，MyBatis 配置文件。XML 如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- autoMappingBehavior should be set in each test <span class="keyword">case</span> --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;!-- 配置事务管理 --&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">""</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">            &lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 配置数据源  --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"UNPOOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"org.hsqldb.jdbcDriver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:hsqldb:mem:automapping"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"sa"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描 Mapper 文件  --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"org/apache/ibatis/autoconstructor/AutoConstructorMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <environments /> 标签中，配置了事务管理和数据源。考虑到减少外部依赖，所以使用了 HSQLDB 。</li>
<li>在 <mappers /> 标签中，配置了需要扫描的 Mapper 文件。目前，仅仅扫描 AutoConstructorMapper.xml 文件。  </li>
</ul>
<h3 id="AutoConstructorMapper-xml"><a href="#AutoConstructorMapper-xml" class="headerlink" title="AutoConstructorMapper.xml"></a>AutoConstructorMapper.xml</h3><p>AutoConstructorMapper.xml ，Mapper 文件。代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">    PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"org.apache.ibatis.autoconstructor.AutoConstructorMapper"</span>&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>对应的接口为 org.apache.ibatis.autoconstructor.AutoConstructorMapper 。</li>
</ul>
<h4 id="AutoConstructorMapper"><a href="#AutoConstructorMapper" class="headerlink" title="AutoConstructorMapper"></a>AutoConstructorMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoConstructorMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ========== PrimitiveSubject ==========</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM subject WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">PrimitiveSubject <span class="title">getSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM subject"</span>)</span><br><span class="line">    <span class="function">List&lt;PrimitiveSubject&gt; <span class="title">getSubjects</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ========== AnnotatedSubject ==========</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM subject"</span>)</span><br><span class="line">    <span class="function">List&lt;AnnotatedSubject&gt; <span class="title">getAnnotatedSubjects</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ========== BadSubject ==========</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM subject"</span>)</span><br><span class="line">    <span class="function">List&lt;BadSubject&gt; <span class="title">getBadSubjects</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ========== ExtensiveSubject ==========</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM extensive_subject"</span>)</span><br><span class="line">    <span class="function">List&lt;ExtensiveSubject&gt; <span class="title">getExtensiveSubject</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用注解的方法，编写 SQL 。</li>
</ul>
<h3 id="CreateDB-sql"><a href="#CreateDB-sql" class="headerlink" title="CreateDB.sql"></a>CreateDB.sql</h3><p>CreateDB.sql 文件，用于单元测试里，初始化数据库的数据。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DROP TABLE subject</span><br><span class="line">IF EXISTS;</span><br><span class="line"></span><br><span class="line">DROP TABLE extensive_subject</span><br><span class="line">IF EXISTS;</span><br><span class="line"></span><br><span class="line"><span class="function">CREATE TABLE <span class="title">subject</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  id     INT NOT NULL,</span></span></span><br><span class="line"><span class="function"><span class="params">  name   VARCHAR(<span class="number">20</span>)</span>,</span></span><br><span class="line"><span class="function">  age    INT NOT NULL,</span></span><br><span class="line"><span class="function">  height INT,</span></span><br><span class="line"><span class="function">  weight INT,</span></span><br><span class="line"><span class="function">  active BIT,</span></span><br><span class="line"><span class="function">  dt     TIMESTAMP</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">CREATE TABLE <span class="title">extensive_subject</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  aByte      TINYINT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aShort     SMALLINT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aChar      CHAR,</span></span></span><br><span class="line"><span class="function"><span class="params">  anInt      INT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aLong      BIGINT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aFloat     FLOAT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aDouble    DOUBLE,</span></span></span><br><span class="line"><span class="function"><span class="params">  aBoolean   BIT,</span></span></span><br><span class="line"><span class="function"><span class="params">  aString    VARCHAR(<span class="number">255</span>)</span>,</span></span><br><span class="line"><span class="function">  anEnum     <span class="title">VARCHAR</span><span class="params">(<span class="number">50</span>)</span>,</span></span><br><span class="line"><span class="function">  aClob      LONGVARCHAR,</span></span><br><span class="line"><span class="function">  aBlob      LONGVARBINARY,</span></span><br><span class="line"><span class="function">  aTimestamp TIMESTAMP</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line">INSERT INTO subject VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">45</span>, <span class="number">1</span>, CURRENT_TIMESTAMP),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'b'</span>, <span class="number">10</span>, NULL, <span class="number">45</span>, <span class="number">1</span>, CURRENT_TIMESTAMP),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'c'</span>, <span class="number">10</span>, NULL, NULL, <span class="number">0</span>, CURRENT_TIMESTAMP);</span><br><span class="line"></span><br><span class="line">INSERT INTO extensive_subject</span><br><span class="line">VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1.0</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'AVALUE'</span>, <span class="string">'ACLOB'</span>, <span class="string">'aaaaaabbbbbb'</span>, CURRENT_TIMESTAMP),</span><br><span class="line">  (<span class="number">2</span>, <span class="number">2</span>, <span class="string">'b'</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2.0</span>, <span class="number">2</span>, <span class="string">'b'</span>, <span class="string">'BVALUE'</span>, <span class="string">'BCLOB'</span>, <span class="string">'010101010101'</span>, CURRENT_TIMESTAMP),</span><br><span class="line">  (<span class="number">3</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3.0</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'CVALUE'</span>, <span class="string">'CCLOB'</span>, <span class="string">'777d010078da'</span>, CURRENT_TIMESTAMP);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建了 subject 表，并初始化三条数据。</li>
<li>创建了 extensive_subject 表，并初始化三条数据。</li>
</ul>
<h3 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h3><p>在 AutoConstructorMapper 中，我们可以看到有四个 POJO 类。但是，从 CreateDB.sql 中，实际只有两个表。这个是为什么呢？继续往下看噢。</p>
<h4 id="AnnotatedSubject"><a href="#AnnotatedSubject" class="headerlink" title="AnnotatedSubject"></a>AnnotatedSubject</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.autoconstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.AutomapConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnotatedSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">int</span> age, <span class="keyword">final</span> <span class="keyword">int</span> height, <span class="keyword">final</span> <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AutomapConstructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnotatedSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">int</span> age, <span class="keyword">final</span> Integer height, <span class="keyword">final</span> Integer weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height == <span class="keyword">null</span> ? <span class="number">0</span> : height;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight == <span class="keyword">null</span> ? <span class="number">0</span> : weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应 subject 表。<br>@AutomapConstructor 注解，表示 MyBatis 查询后，在创建 AnnotatedSubject 对象，使用该构造方法。<br>实际场景下，非常少使用这个注解，甚至 Google 上资料也不多。</p>
<h5 id="PrimitiveSubject"><a href="#PrimitiveSubject" class="headerlink" title="PrimitiveSubject"></a>PrimitiveSubject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.autoconstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimitiveSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date dt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimitiveSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">int</span> age, <span class="keyword">final</span> <span class="keyword">int</span> height, <span class="keyword">final</span> <span class="keyword">int</span> weight, <span class="keyword">final</span> <span class="keyword">boolean</span> active, <span class="keyword">final</span> Date dt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        <span class="keyword">this</span>.active = active;</span><br><span class="line">        <span class="keyword">this</span>.dt = dt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的也是 subject 表。<br>和 AnnotatedSubject 不同，在其构造方法上，weight 和 height 方法参数的类型是 int ，而不是 Integer 。那么，如果 subject 表中的记录，这两个字段为 NULL 时，会创建 PrimitiveSubject 对象报错。</p>
<h5 id="BadSubject"><a href="#BadSubject" class="headerlink" title="BadSubject"></a>BadSubject</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.autoconstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Height height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Double weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> String name, <span class="keyword">final</span> <span class="keyword">int</span> age, <span class="keyword">final</span> Height height, <span class="keyword">final</span> Double weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight == <span class="keyword">null</span> ? <span class="number">0</span> : weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Height</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对应的也是 subject 表。</li>
<li>和 AnnotatedSubject 不同，在其构造方法上，height 方法参数的类型是 Height ，而不是 Integer 。因为 MyBatis 无法识别 Height 类，所以会创建 BadSubject 对象报错。</li>
<li>一般情况下，POJO 对象里，不使用基本类型。</li>
</ul>
<h4 id="ExtensiveSubject"><a href="#ExtensiveSubject" class="headerlink" title="ExtensiveSubject"></a>ExtensiveSubject</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.autoconstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtensiveSubject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> aByte;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> aShort;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> aChar;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> anInt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> aLong;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> aFloat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> aDouble;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> aBoolean;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String aString;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enum types</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestEnum anEnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// array types</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// string to lob types:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String aClob;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String aBlob;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtensiveSubject</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span> aByte,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">short</span> aShort,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">char</span> aChar,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">int</span> anInt,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">long</span> aLong,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">float</span> aFloat,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">double</span> aDouble,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> <span class="keyword">boolean</span> aBoolean,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> String aString,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> TestEnum anEnum,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> String aClob,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> String aBlob)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aByte = aByte;</span><br><span class="line">        <span class="keyword">this</span>.aShort = aShort;</span><br><span class="line">        <span class="keyword">this</span>.aChar = aChar;</span><br><span class="line">        <span class="keyword">this</span>.anInt = anInt;</span><br><span class="line">        <span class="keyword">this</span>.aLong = aLong;</span><br><span class="line">        <span class="keyword">this</span>.aFloat = aFloat;</span><br><span class="line">        <span class="keyword">this</span>.aDouble = aDouble;</span><br><span class="line">        <span class="keyword">this</span>.aBoolean = aBoolean;</span><br><span class="line">        <span class="keyword">this</span>.aString = aString;</span><br><span class="line">        <span class="keyword">this</span>.anEnum = anEnum;</span><br><span class="line">        <span class="keyword">this</span>.aClob = aClob;</span><br><span class="line">        <span class="keyword">this</span>.aBlob = aBlob;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> TestEnum &#123;</span><br><span class="line">        AVALUE, BVALUE, CVALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的也是 extensive_subject 表。<br>这是个复杂对象，基本涵盖了各种类型的数据。</p>
<h3 id="AutoConstructorTest"><a href="#AutoConstructorTest" class="headerlink" title="AutoConstructorTest"></a>AutoConstructorTest</h3><p>org.apache.ibatis.autoconstructor.AutoConstructorTest ，单元测试类。</p>
<h4 id="setUp"><a href="#setUp" class="headerlink" title="setUp"></a>setUp</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeClass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// create a SqlSessionFactory</span></span><br><span class="line">    <span class="comment">// 创建 SqlSessionFactory 对象，基于 mybatis-config.xml 配置文件。</span></span><br><span class="line">    <span class="keyword">try</span> (Reader reader = Resources.getResourceAsReader(<span class="string">"org/apache/ibatis/autoconstructor/mybatis-config.xml"</span>)) &#123;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// populate in-memory database</span></span><br><span class="line">    <span class="comment">// 初始化数据到内存数据库，基于 CreateDB.sql SQL 文件。</span></span><br><span class="line">    BaseDataTest.runScript(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),</span><br><span class="line">            <span class="string">"org/apache/ibatis/autoconstructor/CreateDB.sql"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建 SqlSessionFactory 对象，基于 mybatis-config.xml 配置文件。<br>初始化数据到内存数据库，基于 CreateDB.sql SQL 文件。</p>
<h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><p>右键任一单元测试方法，愉快的调试起来把。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL表名大小写敏感问题</title>
    <url>/2020/06/16/MySQL%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在部署war包的时候碰到一个问题：项目启动报错找不到表，但是查看本地数据是有这个表，但服务器数据库没有找到。原来是数MySQL据库大小敏感的原因。</p>
<a id="more"></a>

<p><code>SELECT *FROM</code>platform-shop<code>.SCHEDULE_JOB;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'platform-shop.SCHEDULE_JOB' doesn't exist</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error may exist in com/platform/dao/ScheduleJobDao.java (best guess)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error may involve defaultParameterMap</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The error occurred while setting parameters</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## SQL: SELECT  job_id,bean_name,method_name,params,cron_expression,status,remark,create_time  FROM SCHEDULE_JOB</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Cause: java.sql.SQLSyntaxErrorException: Table 'platform-shop.SCHEDULE_JOB' doesn't exist</span></span></span><br><span class="line">; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'platform-shop.SCHEDULE_JOB' doesn't exist</span><br></pre></td></tr></table></figure>
<p>找了一些资料解决了这个问题，记录一下。</p>
<h3 id="变量lower-case-table-names"><a href="#变量lower-case-table-names" class="headerlink" title="变量lower_case_table_names"></a>变量lower_case_table_names</h3><p>为什么本地开发没问题? 因为本地的windows开发环境，默认是大小写不敏感。而服务器环境的linux是敏感的。<br>本地windows我们执行命令，查看自己电脑中的mysql系统变量可以看到：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%lower_case_table_names%'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="01.jpg" alt="01"><br>值为1，表示是大小写不敏感，而linux环境的mysql是0.</p>
<h3 id="修改变量lower-case-table-names"><a href="#修改变量lower-case-table-names" class="headerlink" title="修改变量lower-case-table-names"></a>修改变量lower-case-table-names</h3><ol>
<li>打开mysql配置文件my.cnf <figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@qyjy</span> bin]<span class="meta"># vim /etc/my.cnf</span></span><br></pre></td></tr></table></figure></li>
<li>在[mysqld]节点下添加 lower-case-table-names=1</li>
<li>重启mysql服务<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@qyjy</span> bin]<span class="meta"># systemctl restart mysqld.service</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="变量lower-case-table-names的取值"><a href="#变量lower-case-table-names的取值" class="headerlink" title="变量lower-case-table-names的取值"></a>变量lower-case-table-names的取值</h3><p>取值范围有三个，分别是0、1、2. </p>
<ol>
<li>设置成0：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时大小写敏感。 </li>
<li>设置成1：表名转小写后存储到硬盘，比较时大小写不敏感。 </li>
<li>设置成2：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时统一转小写比较。</li>
</ol>
<p>这个选项不仅仅适用于表名的大小写敏感，同样适用于数据库名和表别名。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-Redis安装</title>
    <url>/2020/06/16/Centos7-Redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文要主描述了Windows10下安装和Centos7-Redis安装</p>
<a id="more"></a>

<h1 id="Centos7-安装redis"><a href="#Centos7-安装redis" class="headerlink" title="Centos7 安装redis"></a>Centos7 安装redis</h1><h2 id="在线安装，需要联网"><a href="#在线安装，需要联网" class="headerlink" title="在线安装，需要联网"></a>在线安装，需要联网</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># tar -zxvf redis-5.0.7.tar.gz</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># cd redis-5.0.7</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># yum -y install gcc-c++</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># make</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># make install</span></span><br></pre></td></tr></table></figure>
<p>如果make失败需要执行make distclean<br>make install</p>
<h3 id="redis设置外网访问"><a href="#redis设置外网访问" class="headerlink" title="redis设置外网访问"></a>redis设置外网访问</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# vim redis<span class="number">-5.0</span><span class="number">.7</span>/redis.conf</span><br></pre></td></tr></table></figure>
<p>bind:0.0.0.0 设置所有ip都能访问，127.0.0.1 是只绑定本地<br>daemonize yes 设置后台启动<br>protected no<br>requirepass 123456  设置密码</p>
<p>保护模式启动的2个条件：<br>1、没有使用bind<br>2、没有设置访问密码</p>
<h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><p>安装后redis-server在/usr/local/bin/目录下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# /usr/local/bin/redis-server ./redis<span class="number">-5.0</span><span class="number">.7</span>/redis.conf</span><br><span class="line"><span class="number">10009</span>:C <span class="number">16</span> Jun <span class="number">2020</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">11.840</span> # oO0OoO0OoO0Oo Redis <span class="keyword">is</span> starting oO0OoO0OoO0Oo</span><br><span class="line"><span class="number">10009</span>:C <span class="number">16</span> Jun <span class="number">2020</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">11.840</span> # Redis version=<span class="number">5.0</span><span class="number">.7</span>, bits=<span class="number">64</span>, commit=<span class="number">00000000</span>, modified=<span class="number">0</span>, pid=<span class="number">10009</span>, just started</span><br><span class="line"><span class="number">10009</span>:C <span class="number">16</span> Jun <span class="number">2020</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">11.840</span> # Configuration loaded</span><br></pre></td></tr></table></figure>

<h3 id="测试redis"><a href="#测试redis" class="headerlink" title="测试redis"></a>测试redis</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]<span class="comment"># redis-cli -a 123456 -n 10 // -n参数表示连接第几个数据库</span></span><br><span class="line">[root@qyjy ~]<span class="comment"># redis-cli -a 123456</span></span><br><span class="line"><span class="symbol">Warning:</span> Using a password with <span class="string">'-a'</span> <span class="keyword">or</span> <span class="string">'-u'</span> option on the command line interface may <span class="keyword">not</span> be safe.</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> ping</span><br><span class="line">PONG</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="授权密码重要"><a href="#授权密码重要" class="headerlink" title="授权密码重要"></a>授权密码重要</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]# redis-cli -a 123456</span><br><span class="line">Warning: Using a password with <span class="string">'-a'</span> <span class="keyword">or</span> <span class="string">'-u'</span> option on the command line<span class="built_in"> interface </span>may <span class="keyword">not</span> be safe.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;<span class="built_in"> config </span><span class="builtin-name">get</span> requirepass</span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">"123456"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<h3 id="关掉redis"><a href="#关掉redis" class="headerlink" title="关掉redis"></a>关掉redis</h3><p>[root@qyjy ~]# redis-cli -a 123456<br>Warning: Using a password with ‘-a’ or ‘-u’ option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; shotdown<br>(error) ERR unknown command <code>shotdown</code>, with args beginning with:<br>127.0.0.1:6379&gt; SHUTDOWN<br>not connected&gt; exit</p>
<p>第一种<br>注释掉bind 并把daemonize no<br>第二种<br>设置bind 0.0.0.0 或密码 （保护模式不生效）</p>
<p>防火墙添加端口<br>[root@localhost bin]# firewall-cmd –query-port=6379/tcp<br>no<br>[root@localhost bin]# firewall-cmd –add-port=6379/tcp<br>success<br>[root@localhost bin]# firewall-cmd –query-port=6379/tcp<br>yes</p>
<p>端口谁占用了，使用<br>netstat -ltunp</p>
<h1 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h1><ol>
<li><p>查看可用的 Redis 版本<br>$ docker search  redis</p>
</li>
<li><p>取最新版的 Redis 镜像<br>$ docker pull redis:latest</p>
</li>
<li><p>查看本地镜像<br>$ docker images</p>
</li>
<li><p>运行容器<br>$ docker run -itd –name redis-test -p 6379:6379 redis</p>
</li>
<li><p>安装成功<br>最后我们可以通过 docker ps 命令查看容器的运行信息：</p>
</li>
<li><p>接着我们通过 redis-cli 连接测试使用 redis 服务。<br>$ docker exec -it redis-test /bin/bash</p>
</li>
</ol>
<p><strong>附</strong></p>
<h1 id="Windows-安装Redis"><a href="#Windows-安装Redis" class="headerlink" title="Windows 安装Redis"></a>Windows 安装Redis</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/tporadowski/redis/releases。" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases。</a><br>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。</p>
<h2 id="运行Redis"><a href="#运行Redis" class="headerlink" title="运行Redis"></a>运行Redis</h2><p>打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">redis-server</span><span class="selector-class">.exe</span> <span class="selector-tag">redis</span><span class="selector-class">.windows</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure>
<p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。<br>这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到 redis 目录下运行:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span></span><br></pre></td></tr></table></figure>
<p>安装完毕</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-MyBatis入门笔记</title>
    <url>/2020/06/17/SpringBoot-MyBatis%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在 DAL（Data Access Layer） 数据访问层，目前会有三种方向的解决方案：</p>
<ul>
<li>JDBC</li>
<li>MyBatis</li>
<li>JPA<a id="more"></a>

</li>
</ul>
<p>注意，主要几种方式可以组合使用。</p>
<ul>
<li>MyBatis + XML</li>
<li>MyBatis + 注解</li>
<li>MyBatis-Plus</li>
</ul>
<h3 id="MyBatis-XML"><a href="#MyBatis-XML" class="headerlink" title="MyBatis + XML"></a>MyBatis + XML</h3><h4 id="在pom-xml里引入依赖"><a href="#在pom-xml里引入依赖" class="headerlink" title="在pom.xml里引入依赖"></a>在pom.xml里引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Springboot起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和springboot的集成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接mysql的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--代码简化神器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="启动类-MyBatisTestApplication"><a href="#启动类-MyBatisTestApplication" class="headerlink" title="启动类 MyBatisTestApplication"></a>启动类 MyBatisTestApplication</h4><p><code>配置 @MapperScan 注解，扫描对应 Mapper 接口所在的包路径</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.zhuhb5.dao"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyBatisTestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>工具：JDBC-&gt;Dbutils(QueryRunner)-&gt;jdbcTemplate<br>功能简单，sql语句编写在java代码里面；硬编码高耦合的方式；</p>
<p>编写sql -&gt; 预编译 -&gt; 设置参数 -&gt; 执行sql -&gt; 封装结果</p>
<p>框架：整体解决方案<br>Hibernate: 全自动映射ORM框架，旨在消除sql</p>
<p>javaBean -&gt; 编写sql -&gt; 预编译 -&gt; 设置参数 -&gt; 执行sql -&gt; 封装结果 -&gt; DbRecords</p>
<p>MyBatis: 半自动ORM框架，sql与java编码分离，sql是开发人员控制。</p>
<h3 id="Mybatis3-官方文档-https-mybatis-org-mybatis-3-zh-index-html"><a href="#Mybatis3-官方文档-https-mybatis-org-mybatis-3-zh-index-html" class="headerlink" title="Mybatis3 官方文档 https://mybatis.org/mybatis-3/zh/index.html"></a>Mybatis3 官方文档 <a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></h3><p>按官方文档来操作一遍</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在pom.xml添加mybatis的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="从-XML-中构建-SqlSessionFactory"><a href="#从-XML-中构建-SqlSessionFactory" class="headerlink" title="从 XML 中构建 SqlSessionFactory"></a>从 XML 中构建 SqlSessionFactory</h4><p>SqlSessionFactoryBuilder 通过XML配置文件或一个预先配置的 Configuration 实例来构建出  SqlSessionFactory 实例。</p>
<ol>
<li>从xml 文件中构建 SqlSessionFactory 实例</li>
<li>从任意输入流 inputStream</li>
</ol>
<p>MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Resources.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns a resource on the classpath as a Stream object</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loader   The classloader used to fetch the resource</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> resource The resource to find</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> The resource</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> java.io.IOException If the resource cannot be found or read</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(ClassLoader loader, String resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream in = classLoaderWrapper.getResourceAsStream(resource, loader);</span><br><span class="line"><span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Could not find resource "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-Mysql安装</title>
    <url>/2020/06/16/Centos7-Mysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文要主描述了Centos7-Mysql的卸载与安装</p>
<a id="more"></a>

<h3 id="Centos7-Mysql卸载"><a href="#Centos7-Mysql卸载" class="headerlink" title="Centos7-Mysql卸载"></a>Centos7-Mysql卸载</h3><h4 id="查看mysql安装了哪些东西"><a href="#查看mysql安装了哪些东西" class="headerlink" title="查看mysql安装了哪些东西"></a>查看mysql安装了哪些东西</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# rpm -qa |grep -i mysql</span><br><span class="line">mysql-community-libs<span class="number">-5.7</span><span class="number">.30</span><span class="number">-1.</span>el7.x86_64</span><br><span class="line">mysql-community-libs-compat<span class="number">-5.7</span><span class="number">.30</span><span class="number">-1.</span>el7.x86_64</span><br><span class="line">mysql-community-common<span class="number">-5.7</span><span class="number">.30</span><span class="number">-1.</span>el7.x86_64</span><br><span class="line">mysql-community-server<span class="number">-5.7</span><span class="number">.30</span><span class="number">-1.</span>el7.x86_64</span><br><span class="line">mysql57-community-release-el7<span class="number">-10.</span>noarch</span><br><span class="line">mysql-community-client<span class="number">-5.7</span><span class="number">.30</span><span class="number">-1.</span>el7.x86_64</span><br></pre></td></tr></table></figure>

<h4 id="开始卸载"><a href="#开始卸载" class="headerlink" title="开始卸载"></a>开始卸载</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-libs-5</span><span class="selector-class">.7</span><span class="selector-class">.30-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-libs-compat-5</span><span class="selector-class">.7</span><span class="selector-class">.30-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-common-5</span><span class="selector-class">.7</span><span class="selector-class">.30-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-server-5</span><span class="selector-class">.7</span><span class="selector-class">.30-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql57-community-release-el7-10</span><span class="selector-class">.noarch</span></span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">remove</span> <span class="selector-tag">mysql-community-client-5</span><span class="selector-class">.7</span><span class="selector-class">.30-1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure>

<h4 id="查看是否卸载完成"><a href="#查看是否卸载完成" class="headerlink" title="查看是否卸载完成"></a>查看是否卸载完成</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># rpm -qa |grep -i mysql</span></span><br><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<h4 id="查找mysql相关目录"><a href="#查找mysql相关目录" class="headerlink" title="查找mysql相关目录"></a>查找mysql相关目录</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]<span class="comment"># find / -name mysql</span></span><br><span class="line">/etc/selinux/targeted/tmp/modules/<span class="number">100</span>/mysql</span><br><span class="line">/etc/selinux/targeted/active/modules/<span class="number">100</span>/mysql</span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">overlay2</span>/<span class="title">b714b8f47a5da8821a24f56c2b8c37158b33bcf333b7b40827604446db9aefec</span>/<span class="title">diff</span>/<span class="title">etc</span>/<span class="title">mysql</span></span></span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">overlay2</span>/<span class="title">b714b8f47a5da8821a24f56c2b8c37158b33bcf333b7b40827604446db9aefec</span>/<span class="title">diff</span>/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">mysql</span></span></span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">overlay2</span>/<span class="title">b714b8f47a5da8821a24f56c2b8c37158b33bcf333b7b40827604446db9aefec</span>/<span class="title">diff</span>/<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">mysql</span></span></span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">overlay2</span>/<span class="title">b714b8f47a5da8821a24f56c2b8c37158b33bcf333b7b40827604446db9aefec</span>/<span class="title">diff</span>/<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">mysql</span></span></span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">overlay2</span>/<span class="title">d898524b3255b992cd88283bb14babb46e9260e9eb7291c8096d11091444c1cf</span>/<span class="title">diff</span>/<span class="title">etc</span>/<span class="title">mysql</span></span></span><br><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span></span></span><br><span class="line">/usr/share/mysql</span><br></pre></td></tr></table></figure>

<h4 id="删除相关目录"><a href="#删除相关目录" class="headerlink" title="删除相关目录"></a>删除相关目录</h4><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /etc/selinux/targeted/active/modules/<span class="number">100</span>/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/docker/overlay<span class="number">2</span>/b<span class="number">714</span>b<span class="number">8</span>f<span class="number">47</span>a<span class="number">5</span>da<span class="number">8821</span>a<span class="number">24</span>f<span class="number">56</span><span class="keyword">c</span><span class="number">2</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">37158</span>b<span class="number">33</span>bcf<span class="number">333</span>b<span class="number">7</span>b<span class="number">40827604446</span>db<span class="number">9</span>aefec/diff/etc/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/docker/overlay<span class="number">2</span>/b<span class="number">714</span>b<span class="number">8</span>f<span class="number">47</span>a<span class="number">5</span>da<span class="number">8821</span>a<span class="number">24</span>f<span class="number">56</span><span class="keyword">c</span><span class="number">2</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">37158</span>b<span class="number">33</span>bcf<span class="number">333</span>b<span class="number">7</span>b<span class="number">40827604446</span>db<span class="number">9</span>aefec/diff/var/lib/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/docker/overlay<span class="number">2</span>/b<span class="number">714</span>b<span class="number">8</span>f<span class="number">47</span>a<span class="number">5</span>da<span class="number">8821</span>a<span class="number">24</span>f<span class="number">56</span><span class="keyword">c</span><span class="number">2</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">37158</span>b<span class="number">33</span>bcf<span class="number">333</span>b<span class="number">7</span>b<span class="number">40827604446</span>db<span class="number">9</span>aefec/diff/usr/lib/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/docker/overlay<span class="number">2</span>/b<span class="number">714</span>b<span class="number">8</span>f<span class="number">47</span>a<span class="number">5</span>da<span class="number">8821</span>a<span class="number">24</span>f<span class="number">56</span><span class="keyword">c</span><span class="number">2</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">37158</span>b<span class="number">33</span>bcf<span class="number">333</span>b<span class="number">7</span>b<span class="number">40827604446</span>db<span class="number">9</span>aefec/diff/usr/bin/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/docker/overlay<span class="number">2</span>/d<span class="number">898524</span>b<span class="number">3255</span>b<span class="number">992</span>cd<span class="number">88283</span>bb<span class="number">14</span>babb<span class="number">46e9260</span>e<span class="number">9</span>eb<span class="number">7291</span><span class="keyword">c</span><span class="number">8096</span>d<span class="number">11091444</span><span class="keyword">c</span><span class="number">1</span>cf/diff/etc/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /var/lib/mysql</span><br><span class="line">[root<span class="title">@qyjy</span> ~]# rm -rf /usr/share/mysql</span><br></pre></td></tr></table></figure>

<h4 id="删除-etc-my-cnf"><a href="#删除-etc-my-cnf" class="headerlink" title="删除/etc/my.cnf"></a>删除/etc/my.cnf</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/<span class="keyword">my</span>.cnf</span><br></pre></td></tr></table></figure>

<h4 id="删除-var-log-mysqld-log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）"><a href="#删除-var-log-mysqld-log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）" class="headerlink" title="删除/var/log/mysqld.log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）"></a>删除/var/log/mysqld.log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rm</span> -rf /<span class="keyword">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>

<h3 id="Cntos7-Mysql安装"><a href="#Cntos7-Mysql安装" class="headerlink" title="Cntos7-Mysql安装"></a>Cntos7-Mysql安装</h3><p>扩展：在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p>
<h4 id="下载并安装MySQL官方的-Yum-Repository"><a href="#下载并安装MySQL官方的-Yum-Repository" class="headerlink" title="下载并安装MySQL官方的 Yum Repository"></a>下载并安装MySQL官方的 Yum Repository</h4><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@qyjy</span> ~]# wget -i -<span class="keyword">c</span> http://dev.mysql.com/get/mysql<span class="number">57</span>-community-<span class="keyword">release</span>-el<span class="number">7</span><span class="number">-10</span>.noarch.rpm</span><br></pre></td></tr></table></figure>

<h4 id="使用上面的命令就直接下载了安装用的Yum-Repository，大概25KB的样子，然后就可以直接yum安装了"><a href="#使用上面的命令就直接下载了安装用的Yum-Repository，大概25KB的样子，然后就可以直接yum安装了" class="headerlink" title="使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了"></a>使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@qyjy ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">-y</span> <span class="selector-tag">install</span> <span class="selector-tag">mysql57-community-release-el7-10</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure>
<h4 id="开始安装MySQL服务器"><a href="#开始安装MySQL服务器" class="headerlink" title="开始安装MySQL服务器"></a>开始安装MySQL服务器</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@qyjy</span> ~]<span class="meta"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure>
<h4 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span>  mysqld.service</span><br></pre></td></tr></table></figure>

<h4 id="查看MySQL运行状态"><a href="#查看MySQL运行状态" class="headerlink" title="查看MySQL运行状态"></a>查看MySQL运行状态</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# systemctl status mysqld.service</span><br><span class="line">?.mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue <span class="number">2020</span><span class="number">-06</span><span class="number">-16</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">21</span> CST; <span class="number">23</span>s ago</span><br><span class="line">     Docs: man:mysqld(<span class="number">8</span>)</span><br><span class="line">           http:<span class="comment">//dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line">  Process: <span class="number">21746</span> ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line">  Process: <span class="number">21677</span> ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">21751</span> (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           ?.<span class="number">.21751</span> /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">Jun <span class="number">16</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">12</span> qyjy systemd[<span class="number">1</span>]: Starting MySQL Server...</span><br><span class="line">Jun <span class="number">16</span> <span class="number">10</span>:<span class="number">07</span>:<span class="number">21</span> qyjy systemd[<span class="number">1</span>]: Started MySQL Server.</span><br></pre></td></tr></table></figure>

<h4 id="此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码"><a href="#此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码" class="headerlink" title="此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码"></a>此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码</h4><p>密码：8qFjh&gt;4?klq</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# grep <span class="string">"password"</span> /var/log/mysqld.log</span><br><span class="line"><span class="number">2020</span><span class="number">-06</span><span class="number">-16</span>T02:<span class="number">07</span>:<span class="number">18.845419</span>Z <span class="number">1</span> [Note] A temporary password <span class="keyword">is</span> generated <span class="keyword">for</span> <span class="symbol">root@</span>localhost: <span class="number">8</span>qFjh&gt;<span class="number">4</span>?klqq</span><br></pre></td></tr></table></figure>

<h4 id="如下命令进入数据库"><a href="#如下命令进入数据库" class="headerlink" title="如下命令进入数据库"></a>如下命令进入数据库</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands end with ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL<span class="built_in"> connection </span>id is 2</span><br><span class="line">Server version: 5.7.30</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> <span class="keyword">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> help.<span class="built_in"> Type </span><span class="string">'\c'</span> <span class="keyword">to</span> clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<h4 id="设置新密码"><a href="#设置新密码" class="headerlink" title="设置新密码"></a>设置新密码</h4><p>因为MySQL有密码设置的规范，故先设置如下命令，再设置新密码，就可以设置简单密码了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="builtin-name">set</span> global <span class="attribute">validate_password_policy</span>=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="builtin-name">set</span> global <span class="attribute">validate_password_length</span>=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER<span class="built_in"> USER </span><span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="但此时还有一个问题，就是因为安装了Yum-Repository，以后每次yum操作都会自动更新，需要把这个卸载掉"><a href="#但此时还有一个问题，就是因为安装了Yum-Repository，以后每次yum操作都会自动更新，需要把这个卸载掉" class="headerlink" title="但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉"></a>但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy ~]# yum -y remove mysql57-community-release-el7<span class="number">-10.</span>noarch</span><br></pre></td></tr></table></figure>

<h3 id="解决远程连接mysql错误1130代码的方法"><a href="#解决远程连接mysql错误1130代码的方法" class="headerlink" title="解决远程连接mysql错误1130代码的方法"></a>解决远程连接mysql错误1130代码的方法</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]# mysql -uroot -p</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line"></span><br><span class="line">mysql&gt;<span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = <span class="string">'%'</span>   <span class="keyword">where</span> <span class="keyword">user</span> =<span class="string">'root'</span>; //修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址</span><br><span class="line"></span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>; //刷新MySQL的系统权限相关表</span><br><span class="line"></span><br><span class="line">mysql&gt;<span class="keyword">select</span> <span class="string">'host'</span>,<span class="string">'user'</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt;quit</span><br></pre></td></tr></table></figure>

<h3 id="Centos7-firewall开放3306端口"><a href="#Centos7-firewall开放3306端口" class="headerlink" title="Centos7 firewall开放3306端口"></a>Centos7 firewall开放3306端口</h3><p>如果客户端连接不上，查看防火墙是否开启。关闭防火墙或开放3306端口即可。</p>
<h4 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line"><span class="keyword">not</span> <span class="built_in">running</span></span><br></pre></td></tr></table></figure>
<h4 id="开启-关闭-重启防火墙firewall"><a href="#开启-关闭-重启防火墙firewall" class="headerlink" title="开启/关闭/重启防火墙firewall"></a>开启/关闭/重启防火墙firewall</h4><p>[root@qyjy ~]# systemctl start firewalld.service<br>[root@qyjy ~]# systemctl stop firewalld.service<br>[root@qyjy ~]# firewall-cmd –reload</p>
<h4 id="查询端口号-3306-是否开启"><a href="#查询端口号-3306-是否开启" class="headerlink" title="查询端口号 3306 是否开启"></a>查询端口号 3306 是否开启</h4><p>firewall-cmd –query-port=3306/tcp</p>
<h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><p>zone – 作用域<br>add-port=3306/tcp – 添加端口，格式为：端口/通讯协议<br>permanent – 永久生效，没有此参数重启后失效</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@qyjy ~]# firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=3306/tcp --permanent</span><br><span class="line"><span class="comment">## 开启3306端口后，dataGrid或naivcat 就能连接到MySQL数据库了</span></span><br></pre></td></tr></table></figure>

<h3 id="云实例配置访问规则"><a href="#云实例配置访问规则" class="headerlink" title="云实例配置访问规则"></a>云实例配置访问规则</h3><p>如果用的是阿里主机，则需要配置端口规则。<br><img src="00.jpg" alt="00"><br><img src="01.jpg" alt="01"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-Nginx安装</title>
    <url>/2020/06/18/Centos7-Nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文描述在Centos7下安装Nginx服务器</p>
<a id="more"></a>

<h3 id="nginx安装环境"><a href="#nginx安装环境" class="headerlink" title="nginx安装环境"></a>nginx安装环境</h3><p>nginx是C语言开发，建议在linux上运行，本教程使用Centos7作为安装环境。</p>
<h4 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h4><p>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span>++</span><br></pre></td></tr></table></figure>
<h4 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h4><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y pcre pcre-devel</span><br></pre></td></tr></table></figure>
<p>注：pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。</p>
<h4 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h4><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">yum install -y <span class="literal">zlib</span> <span class="literal">zlib</span>-devel</span><br></pre></td></tr></table></figure>

<h4 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h4><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><h4 id="将nginx-1-8-0-tar-gz拷贝至linux服务器。"><a href="#将nginx-1-8-0-tar-gz拷贝至linux服务器。" class="headerlink" title="将nginx-1.8.0.tar.gz拷贝至linux服务器。"></a>将nginx-1.8.0.tar.gz拷贝至linux服务器。</h4><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">nginx-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">nginx-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure>

<h4 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h4><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">./configure --help  查询详细参数（参考本教程附录部分：nginx编译参数）</span><br><span class="line"> </span><br><span class="line">参数设置如下：</span><br><span class="line">./configure \</span><br><span class="line">-<span class="ruby">-prefix=<span class="regexp">/usr/local</span><span class="regexp">/nginx \</span></span></span><br><span class="line"><span class="ruby">--pid-path=<span class="regexp">/var/run</span><span class="regexp">/nginx/nginx</span>.pid \</span></span><br><span class="line"><span class="ruby">--lock-path=<span class="regexp">/var/lock</span><span class="regexp">/nginx.lock \</span></span></span><br><span class="line"><span class="ruby">--error-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/error</span>.log \</span></span><br><span class="line"><span class="ruby">--http-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/access</span>.log \</span></span><br><span class="line"><span class="ruby">--with-http_gzip_static_module \</span></span><br><span class="line"><span class="ruby">--http-client-body-temp-path=<span class="regexp">/var/temp</span><span class="regexp">/nginx/client</span> \</span></span><br><span class="line"><span class="ruby">--http-proxy-temp-path=<span class="regexp">/var/temp</span><span class="regexp">/nginx/proxy</span> \</span></span><br><span class="line"><span class="ruby">--http-fastcgi-temp-path=<span class="regexp">/var/temp</span><span class="regexp">/nginx/fastcgi</span> \</span></span><br><span class="line"><span class="ruby">--http-uwsgi-temp-path=<span class="regexp">/var/temp</span><span class="regexp">/nginx/uwsgi</span> \</span></span><br><span class="line"><span class="ruby">--http-scgi-temp-path=<span class="regexp">/var/temp</span><span class="regexp">/nginx/scgi</span></span></span><br></pre></td></tr></table></figure>
<p>注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录<br>mkdir /var/log/nginx<br>需要创建目录：/var/run/nginx<br>坑一：必须在nginx目录下创建logs目录不然服务器重启后会删除/var/run/nginx目录</p>
<h4 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span>  install</span><br></pre></td></tr></table></figure>

<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/nginx/sbin/</span></span><br><span class="line"><span class="string">./nginx</span></span><br></pre></td></tr></table></figure>

<p>查询nginx进程：</p>
<p>15098是nginx主进程的进程id，15099是nginx工作进程的进程id</p>
<p>注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：<br>./nginx -c /usr/local/nginx/conf/nginx.conf</p>
<p>如果不指定-c，nginx在启动时默认加载conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（–conf-path= 指向配置文件（nginx.conf））</p>
<h3 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h3><h4 id="方式1，快速停止："><a href="#方式1，快速停止：" class="headerlink" title="方式1，快速停止："></a>方式1，快速停止：</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/nginx/sbin</span></span><br><span class="line"><span class="string">./nginx</span> -s stop</span><br></pre></td></tr></table></figure>
<p>此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</p>
<h4 id="方式2，完整停止-建议使用-："><a href="#方式2，完整停止-建议使用-：" class="headerlink" title="方式2，完整停止(建议使用)："></a>方式2，完整停止(建议使用)：</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/nginx/sbin</span></span><br><span class="line"><span class="string">./nginx</span> -s <span class="keyword">quit</span></span><br></pre></td></tr></table></figure>
<p>此方式停止步骤是待nginx进程处理任务完毕进行停止。</p>
<h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><h4 id="方式1，先停止再启动（建议使用）："><a href="#方式1，先停止再启动（建议使用）：" class="headerlink" title="方式1，先停止再启动（建议使用）："></a>方式1，先停止再启动（建议使用）：</h4><p>对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。<br>如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./nginx</span> -s <span class="keyword">quit</span></span><br><span class="line"><span class="string">./nginx</span></span><br></pre></td></tr></table></figure>

<h4 id="方式2，重新加载配置文件："><a href="#方式2，重新加载配置文件：" class="headerlink" title="方式2，重新加载配置文件："></a>方式2，重新加载配置文件：</h4><p>当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效，如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./nginx</span> -s <span class="keyword">reload</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>nginx安装成功，启动nginx，即可访问nginx：<br>到这说明nginx上安装成功。</p>
<h3 id="开机自启动nginx"><a href="#开机自启动nginx" class="headerlink" title="开机自启动nginx"></a>开机自启动nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/init.d/nginx  (输入下面的代码)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/sbin/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/etc/nginx/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -HUP</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>其内容参考nginx官方文档<br>需要注意的配置：<br>nginx=”/usr/local/nginx/sbin/nginx”<br>//修改成nginx执行程序的路径。<br>NGINX_CONF_FILE=”/usr/local/nginx/conf/nginx.conf”<br>//修改成nginx.conf文件的路径。</p>
<p>保存后设置文件的执行权限<br>[root@localhost ~]# chmod a+x /etc/init.d/nginx</p>
<p>至此就可以通过下面指令控制启动停止<br>/etc/init.d/nginx start<br>/etc/init.d/nginx stop</p>
<p>上面的方法完成了用脚本管理nginx服务的功能，但是还是不太方便。<br>先将nginx服务加入chkconfig管理列表：<br>[root@localhost ~]# chkconfig –add /etc/init.d/nginx</p>
<p>加完这个之后，就可以使用service对nginx进行启动，重启等操作了。<br>service nginx start<br>service nginx stop<br>service nginx restart</p>
<p>坑二：最后设置开机自动启动<br>[root@localhost ~]# chkconfig nginx on</p>
]]></content>
  </entry>
  <entry>
    <title>微服务架构的分布式事务解决方案</title>
    <url>/2020/07/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>未完待续</p>
<a id="more"></a>

<h3 id="电商购物支付流程中的分布式事务问题分析"><a href="#电商购物支付流程中的分布式事务问题分析" class="headerlink" title="电商购物支付流程中的分布式事务问题分析"></a>电商购物支付流程中的分布式事务问题分析</h3><p>电商平台<br>服务：账户，商品，积分/红包，物流，订单，库存，优惠券</p>
<ol>
<li>选择商品，下订单，使用积分，选择支付平台进行支付。</li>
<li>请求支付平台创建支付订单，选择支付方式进行支付。</li>
</ol>
<p>支付平台<br>服务：账户，积分/红包，对账/结算，通知，支付订单，会计，风控。<br>3. 请求银行创建支付交易并扣款</p>
<p>银行<br>服务：账户，积分，通知，交易，风控，对账/结算<br>4. 返回扣款结果（成功/失败）<br>5. 返回支付结果（成功/失败）</p>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP理论：一个分布式系统不可能同时满足一致性，可用性和分区容错性这个三个基本需求，最多只能同时满足其中两项</p>
<p>一致性(C)：数据在多个副本之间是否能够保持一致的特性。</p>
<p>可用性(A)：是指系统提供的服务必须一致处于可用状态，对于每一个用户的请求总是在有限的时间内返回结果，超过时间就认为系统是不可用的</p>
<p>分区容错性(P)：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非整个网络环境都发生故障。</p>
]]></content>
      <categories>
        <category>分布式事务</category>
      </categories>
      <tags>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-首页</title>
    <url>/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文实现一个简单的微信小程序首页</p>
<a id="more"></a>

<h4 id="新建第一个小程序项目"><a href="#新建第一个小程序项目" class="headerlink" title="新建第一个小程序项目"></a>新建第一个小程序项目</h4><ol>
<li>注册号微信小程序后，打开微信开发者工具</li>
<li>用微信扫描二维码登陆微信开发者工具</li>
<li>选择小程序项目-小程序，新建项目，填写项目名称，目录，AppiD,开发模式选择小程序，后端服务选择不使用云服务。</li>
<li>填好项目信息后点击新建，小程序项目新建完成。</li>
</ol>
<h3 id="实现首页效果"><a href="#实现首页效果" class="headerlink" title="实现首页效果"></a>实现首页效果</h3><h4 id="首页轮播图"><a href="#首页轮播图" class="headerlink" title="首页轮播图"></a>首页轮播图</h4><p>app.wxss 修改全局样式文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>index.wxml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">"banner"</span> <span class="attr">indicator-dots</span>=<span class="string">"true"</span> <span class="attr">autoplay</span>=<span class="string">"true"</span> <span class="attr">interval</span>=<span class="string">"5000"</span> <span class="attr">duration</span>=<span class="string">"5000"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"banner_image"</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"banner_image"</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="首页商品列表"><a href="#首页商品列表" class="headerlink" title="首页商品列表"></a>首页商品列表</h4><p>index.wxml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;category&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"banner_m"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"goodsList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"goods"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;item.goodsList&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"good_i"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.list_pic_url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"good_t"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.name&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        ￥&#123;&#123;item.retail_price&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    category: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'http://10.13.14.45:8080/platform-framework/api/index/category'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      method: <span class="string">'POST'</span>, <span class="comment">// OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT</span></span><br><span class="line">      <span class="comment">// header: &#123;&#125;, // 设置请求的 header</span></span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// success</span></span><br><span class="line">        <span class="keyword">if</span> (res.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">          data.category = res.data.data.categoryList;</span><br><span class="line">          that.setData(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// fail</span></span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// complete</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>index.wxss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner_image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner_m</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goodsList</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">2</span>rpx);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">2</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.good_i</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.good_t</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="首页tarBar"><a href="#首页tarBar" class="headerlink" title="首页tarBar"></a>首页tarBar</h4><p>app.json 修改全局配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"pages":[</span><br><span class="line">  "pages/index/index",</span><br><span class="line">  "pages/logs/logs",</span><br><span class="line">  <span class="string">"pages/cart/cart"</span></span><br><span class="line">],</span><br><span class="line">"tabBar": &#123;</span><br><span class="line">  "backgroundColor": "#fafafa",</span><br><span class="line">  "borderStyle": "white",</span><br><span class="line">  "selectedColor": "#b4282d",</span><br><span class="line">  "color": "#666",</span><br><span class="line">  "list": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"statics/ic_menu_choice_nor.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"statics/ic_menu_choice_pressed.png"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/cart/cart"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"statics/ic_menu_shoping_nor.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"statics/ic_menu_shoping_pressed.png"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"购物车"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>tarBar图标<br>在小程序根目录新建一个statics目录，把图标拷贝进去<br><img src="ic_menu_choice_nor.png" alt="01"> <img src="ic_menu_choice_pressed.png" alt="02"> <img src="ic_menu_shoping_nor.png" alt="03"> <img src="ic_menu_shoping_pressed.png" alt="04"></p>
<p>新建一个pages/cart目录<br>新建cart.js cart.json cart.wxml cart.wxss文件<br>cart.js 初始化页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = getApp();</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>cart.wxml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--cart.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    购物车空空如也～</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="首页完成效果图"><a href="#首页完成效果图" class="headerlink" title="首页完成效果图"></a>首页完成效果图</h4><p><img src="05.jpg" alt="05"></p>
<h4 id="预览和真机调试"><a href="#预览和真机调试" class="headerlink" title="预览和真机调试"></a>预览和真机调试</h4><p>点击微信开发者工具-工具栏目上的  预览 或者 真机调试 会编译小程序项目，弹出二维码， 打开手机微信扫描二维码即可预览，或者调试。<br>注意：</p>
<ol>
<li>只有加入体验人员才能扫描二维码预览 <a href="https://mp.weixin.qq.com/wxamp/user/manage?action=index&use_role=1&token=625584081&lang=zh_CN" target="_blank" rel="noopener">添加体验成员</a></li>
<li>本地调试时手机和服务器在同一网络。访问后台IP不能写localhost,必须是当前主机IP，例如：<a href="http://10.13.14.45:8080/platform-framework/api/index/category" target="_blank" rel="noopener">http://10.13.14.45:8080/platform-framework/api/index/category</a></li>
</ol>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2020/07/15/SpringCloud/</url>
    <content><![CDATA[<h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1><p>微服务架构是一种架构模式， 它提倡将单一应用程序划分为一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务在其独立的进程中，服务与服务之间采用经量级的通信机制互相协作（通常是基于HTTP协议的RESTFUL API）。每个服务都围绕着具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-源码分析-反射模块</title>
    <url>/2020/06/10/MyBatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文，我们来分享 MyBatis 的反射模块</p>
<a id="more"></a>
<p>MyBatis 反射模块对应 reflection 包。如下图所示：<br><img src="01.jpg" alt="01"><br><code>Java 中的反射虽然功能强大，但对大多数开发人员来说，写出高质量的反射代码还是 有一定难度的。MyBatis 中专门提供了反射模块，该模块对 Java 原生的反射进行了良好的封装，提了更加简洁易用的 API，方便上层使调用，并且对反射操作进行了一系列优化，例如缓存了类的元数据，提高了反射操作的性能。</code></p>
<h3 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a>Reflector</h3><p>org.apache.ibatis.reflection.Reflector ，反射器，每个 Reflector 对应一个类。Reflector 会缓存反射操作需要的类的信息，例如：构造方法、属性名、setting / getting 方法等等。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflector</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 对应的类</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; type;</span><br><span class="line">  <span class="comment">// 可读属性数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String[] readablePropertyNames;</span><br><span class="line">  <span class="comment">// 可写属性数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String[] writeablePropertyNames;</span><br><span class="line">  <span class="comment">// 属性对应的 setting 方法的映射 key: 属性名称  value: Invoke对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Invoker&gt; setMethods = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 属性对应的 getting 方法的映射 key: 属性名称  value: Invoke对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Invoker&gt; getMethods = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 属性对应的 setting 方法的方法参数类型的映射 key 为属性名称  value 为方法参数类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; setTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 属性对应的 getting 方法的返回值类型的映射 key 为属性名称  value 为返回值的类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; getTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 默认构造方法</span></span><br><span class="line">  <span class="keyword">private</span> Constructor&lt;?&gt; defaultConstructor;</span><br><span class="line">  <span class="comment">// 不区分大小写的属性集合</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, String&gt; caseInsensitivePropertyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Reflector</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置对应的类</span></span><br><span class="line">    type = clazz;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 初始化 defaultConstructor</span></span><br><span class="line">    addDefaultConstructor(clazz);</span><br><span class="line">    <span class="comment">// &lt;2&gt; // 初始化 getMethods 和 getTypes ，通过遍历 getting 方法</span></span><br><span class="line">    addGetMethods(clazz);</span><br><span class="line">    <span class="comment">// &lt;3&gt; // 初始化 setMethods 和 setTypes ，通过遍历 setting 方法。</span></span><br><span class="line">    addSetMethods(clazz);</span><br><span class="line">    <span class="comment">// &lt;4&gt; // 初始化 getMethods + getTypes 和 setMethods + setTypes ，通过遍历 fields 属性。</span></span><br><span class="line">    addFields(clazz);</span><br><span class="line">    <span class="comment">// &lt;5&gt; 初始化 readablePropertyNames、writeablePropertyNames、caseInsensitivePropertyMap 属性</span></span><br><span class="line">    readablePropertyNames = getMethods.keySet().toArray(<span class="keyword">new</span> String[getMethods.keySet().size()]);</span><br><span class="line">    writeablePropertyNames = setMethods.keySet().toArray(<span class="keyword">new</span> String[setMethods.keySet().size()]);</span><br><span class="line">    <span class="keyword">for</span> (String propName : readablePropertyNames) &#123;</span><br><span class="line">      caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String propName : writeablePropertyNames) &#123;</span><br><span class="line">      caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略一些方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="addDefaultConstructor"><a href="#addDefaultConstructor" class="headerlink" title="addDefaultConstructor"></a>addDefaultConstructor</h4><p>addDefaultConstructor(Class&lt;?&gt; clazz) 方法，查找默认无参构造方法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDefaultConstructor</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获得所有构造方法</span></span><br><span class="line">  Constructor&lt;?&gt;[] consts = clazz.getDeclaredConstructors();</span><br><span class="line">  <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : consts) &#123;</span><br><span class="line">    <span class="comment">// 判断无参的构造方法</span></span><br><span class="line">    <span class="keyword">if</span> (constructor.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultConstructor = constructor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="addGetMethods"><a href="#addGetMethods" class="headerlink" title="addGetMethods"></a>addGetMethods</h4><p>addGetMethods(Class&lt;?&gt; cls) 方法，初始化 getMethods 和 getTypes ，通过遍历 getting 方法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addGetMethods</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 属性与其 getting 方法的映射。</span></span><br><span class="line">    Map&lt;String, List&lt;Method&gt;&gt; conflictingGetters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// &lt;2&gt; 获得所有方法</span></span><br><span class="line">    Method[] methods = getClassMethods(cls);</span><br><span class="line">    <span class="comment">// &lt;3&gt; 遍历所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">      <span class="comment">// &lt;3.1&gt; 参数大于 0 ，说明不是 getting 方法，忽略</span></span><br><span class="line">      <span class="keyword">if</span> (method.getParameterTypes().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String name = method.getName();</span><br><span class="line">      <span class="comment">// &lt;3.2&gt; 以 get 和 is 方法名开头，说明是 getting 方法</span></span><br><span class="line">      <span class="keyword">if</span> ((name.startsWith(<span class="string">"get"</span>) &amp;&amp; name.length() &gt; <span class="number">3</span>)</span><br><span class="line">          || (name.startsWith(<span class="string">"is"</span>) &amp;&amp; name.length() &gt; <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">// &lt;3.3&gt; 获得属性</span></span><br><span class="line">        name = PropertyNamer.methodToProperty(name);</span><br><span class="line">        <span class="comment">// &lt;3.4&gt; 添加到 conflictingGetters 中</span></span><br><span class="line">        addMethodConflict(conflictingGetters, name, method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &lt;4&gt; 解决 getting 冲突方法</span></span><br><span class="line">    resolveGetterConflicts(conflictingGetters);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h5 id="getClassMethods"><a href="#getClassMethods" class="headerlink" title="getClassMethods"></a>getClassMethods</h5><p>getClassMethods(Class&lt;?&gt; cls)方法，获得所有方法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Method[] getClassMethods(Class&lt;?&gt; cls) &#123;</span><br><span class="line">  <span class="comment">// 每个方法签名与该方法的映射</span></span><br><span class="line">  Map&lt;String, Method&gt; uniqueMethods = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 循环类，类的父类，类的父类的父类，直到父类为 Object</span></span><br><span class="line">  Class&lt;?&gt; currentClass = cls;</span><br><span class="line">  <span class="keyword">while</span> (currentClass != <span class="keyword">null</span> &amp;&amp; currentClass != Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 记录当前类定义的方法</span></span><br><span class="line">    addUniqueMethods(uniqueMethods, currentClass.getDeclaredMethods());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we also need to look for interface methods -</span></span><br><span class="line">    <span class="comment">// because the class may be abstract</span></span><br><span class="line">    <span class="comment">// &lt;2&gt; 记录接口中定义的方法</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = currentClass.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">      addUniqueMethods(uniqueMethods, anInterface.getMethods());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得父类</span></span><br><span class="line">    currentClass = currentClass.getSuperclass();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 转换成 Method 数组返回</span></span><br><span class="line">  Collection&lt;Method&gt; methods = uniqueMethods.values();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> methods.toArray(<span class="keyword">new</span> Method[methods.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt;3&gt; 处，会调用 getSignature(Method method) 方法，获得方法签名。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addUniqueMethods</span><span class="params">(Map&lt;String, Method&gt; uniqueMethods, Method[] methods)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (Method currentMethod : methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!currentMethod.isBridge()) &#123;</span><br><span class="line">      <span class="comment">// &lt;3&gt; 获得方法签名</span></span><br><span class="line">      String signature = getSignature(currentMethod);</span><br><span class="line">      <span class="comment">// check to see if the method is already known</span></span><br><span class="line">      <span class="comment">// if it is known, then an extended class must have</span></span><br><span class="line">      <span class="comment">// overridden a method</span></span><br><span class="line">      <span class="comment">// 当 uniqueMethods 不存在时，进行添加</span></span><br><span class="line">      <span class="keyword">if</span> (!uniqueMethods.containsKey(signature)) &#123;</span><br><span class="line">        uniqueMethods.put(signature, currentMethod);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="addSetMethods"><a href="#addSetMethods" class="headerlink" title="addSetMethods"></a>addSetMethods</h4><p>addSetMethods(Class&lt;?&gt; cls) 方法，初始化 setMethods 和 setTypes ，通过遍历 setting 方法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSetMethods</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 属性与其 setting 方法的映射。</span></span><br><span class="line">  Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">// 获得所有方法</span></span><br><span class="line">  Method[] methods = getClassMethods(cls);</span><br><span class="line">  <span class="comment">// 遍历所有方法</span></span><br><span class="line">  <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    String name = method.getName();</span><br><span class="line">    <span class="comment">// &lt;1&gt; 方法名为 set 开头</span></span><br><span class="line">    <span class="comment">// 参数数量为 1</span></span><br><span class="line">    <span class="keyword">if</span> (name.startsWith(<span class="string">"set"</span>) &amp;&amp; name.length() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (method.getParameterTypes().length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获得属性</span></span><br><span class="line">        name = PropertyNamer.methodToProperty(name);</span><br><span class="line">        <span class="comment">// 添加到 conflictingSetters 中</span></span><br><span class="line">        addMethodConflict(conflictingSetters, name, method);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// &lt;2&gt; 解决 setting 冲突方法</span></span><br><span class="line">  resolveSetterConflicts(conflictingSetters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="addFields"><a href="#addFields" class="headerlink" title="addFields"></a>addFields</h4><p>addFields(Class&lt;?&gt; clazz) 方法，初始化 getMethods + getTypes 和 setMethods + setTypes ，通过遍历 fields 属性。实际上，它是 addGetMethods(…) 和 #addSetMethods(…) 方法的补充，因为有些 field ，不存在对应的 setting 或 getting 方法，所以直接使用对应的 field ，而不是方法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFields</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获得所有 field</span></span><br><span class="line">  Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">  <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    <span class="comment">// &lt;1&gt; 添加到 setMethods 和 setTypes 中</span></span><br><span class="line">    <span class="keyword">if</span> (!setMethods.containsKey(field.getName())) &#123;</span><br><span class="line">      <span class="comment">// issue #379 - removed the check for final because JDK 1.5 allows</span></span><br><span class="line">      <span class="comment">// modification of final fields through reflection (JSR-133). (JGB)</span></span><br><span class="line">      <span class="comment">// pr #16 - final static can only be set by the classloader</span></span><br><span class="line">      <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">      <span class="keyword">if</span> (!(Modifier.isFinal(modifiers) &amp;&amp; Modifier.isStatic(modifiers))) &#123;</span><br><span class="line">        addSetField(field);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加到 getMethods 和 getTypes 中</span></span><br><span class="line">    <span class="keyword">if</span> (!getMethods.containsKey(field.getName())) &#123;</span><br><span class="line">      addGetField(field);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归，处理父类</span></span><br><span class="line">  <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    addFields(clazz.getSuperclass());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ReflectorFactory"><a href="#ReflectorFactory" class="headerlink" title="ReflectorFactory"></a>ReflectorFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReflectorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否缓存 Reflector 对象</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isClassCacheEnabled</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 设置是否缓存 Reflector 对象</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setClassCacheEnabled</span><span class="params">(<span class="keyword">boolean</span> classCacheEnabled)</span></span>;</span><br><span class="line">  <span class="comment">// 获取 Reflector 对象</span></span><br><span class="line">  <span class="function">Reflector <span class="title">findForClass</span><span class="params">(Class&lt;?&gt; type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>未完待续…………</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-忘记密码</title>
    <url>/2020/06/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BE%AE%E5%90%8C%E5%95%86%E5%9F%8E-%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一句话需求：忘记密码页面，用户输入登录名，手机号码、新密码、页面有个随机验证码，短信验证码，验证码验证通过后，发短信，短信验证通后，重置密码。</p>
<a id="more"></a>

<h3 id="准备信息"><a href="#准备信息" class="headerlink" title="准备信息"></a>准备信息</h3><h4 id="需要开通阿里云短信服务"><a href="#需要开通阿里云短信服务" class="headerlink" title="需要开通阿里云短信服务"></a>需要开通阿里云短信服务</h4><p><a href="https://yq.aliyun.com/articles/252987" target="_blank" rel="noopener">如何接入阿里云短信服务</a></p>
<h4 id="获取如下信息"><a href="#获取如下信息" class="headerlink" title="获取如下信息"></a>获取如下信息</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">AccessKey ID</span><br><span class="line">AccessKey Secret</span><br><span class="line">模板编码</span><br><span class="line">签名</span><br><span class="line">KEYS</span><br></pre></td></tr></table></figure>
<h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><h4 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h4><ul>
<li>登录页<br>增加忘记密码按钮，点击忘记密码可以跳转到修改密码界面。<br><img src="01.jpg" alt="01"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"alteration.html"</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改密码页面<br>输入账号、验证码、手机号码、短信验证码、旧密码、新密码。填写完成后提交修改密码，修改完成后自动跳转到登陆页面。点击账号登陆返回登陆页面<br><img src="02.jpg" alt="02"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"border-top:none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">class</span>=<span class="string">"m-t text-center"</span> <span class="attr">style</span>=<span class="string">"border: 0px solid #dddee1;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"padding: 0 20px 20px 20px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">v-model</span>=<span class="string">"username"</span>  @<span class="attr">on-enter</span>=<span class="string">"alteration"</span> <span class="attr">placeholder</span>=<span class="string">"账号"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span> <span class="attr">autofocus</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: inline-block;width: 100px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">v-model</span>=<span class="string">"captcha"</span> @<span class="attr">on-enter</span>=<span class="string">"alteration"</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">placeholder</span>=<span class="string">"验证码"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: inline-block;width: 100px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"height: 32px;width: 96px;border-radius: 4px;"</span> <span class="attr">alt</span>=<span class="string">"如果看不清楚，请单击图片刷新！"</span> <span class="attr">title</span>=<span class="string">"点击刷新"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">class</span>=<span class="string">"pointer"</span> <span class="attr">:src</span>=<span class="string">"src"</span> @<span class="attr">click</span>=<span class="string">"refreshCode"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">v-model</span>=<span class="string">"mobile"</span> @<span class="attr">on-enter</span>=<span class="string">"alteration"</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号码"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span> <span class="attr">style</span>=<span class="string">"display: flex; text-align: center; justify-content: center;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px; margin-right: 10px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">v-model</span>=<span class="string">"smscode"</span> @<span class="attr">on-enter</span>=<span class="string">"alteration"</span> <span class="attr">placeholder</span>=<span class="string">"手机短信验证码"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 92px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i-button</span> <span class="attr">type</span>=<span class="string">"plain"</span> @<span class="attr">click</span>=<span class="string">"getCaptcha"</span> <span class="attr">:disabled</span>=<span class="string">"state.smsSendBtn"</span> <span class="attr">v-text</span>=<span class="string">"!state.smsSendBtn &amp;&amp; '获取验证码' || (state.time+' s')"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">i-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> @<span class="attr">on-enter</span>=<span class="string">"alteration"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">placeholder</span>=<span class="string">"请输入旧密码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"newPassword"</span> @<span class="attr">on-enter</span>=<span class="string">"alteration"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">placeholder</span>=<span class="string">"请输入新密码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-feedback"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span> @<span class="attr">click</span>=<span class="string">"alteration"</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">i-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>账号登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="后台接口"><a href="#后台接口" class="headerlink" title="后台接口"></a>后台接口</h4><ul>
<li><p>发送短信验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SysLog</span>(<span class="string">"发送短信验证码"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/sys/sms"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">sms</span><span class="params">(@RequestBody JSONObject jsonObject)</span> </span>&#123;</span><br><span class="line">    String username = jsonObject.get(<span class="string">"username"</span>).toString();</span><br><span class="line">    String mobile = jsonObject.get(<span class="string">"mobile"</span>).toString();</span><br><span class="line">    String smsmode = jsonObject.get(<span class="string">"smsmode"</span>).toString();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(mobile)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"请输入手机号码！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SysUserEntity sysUserEntity = sysUserService.queryByUserName(username);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == sysUserEntity) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"未找到此用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!sysUserEntity.getMobile().equals(mobile)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"输入手机号码与绑定的手机号码不一致!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Object object = J2CacheUtils.get(Constant.CAPTCHA_CACHE, mobile);</span><br><span class="line">    <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"验证码10分钟内，仍然有效！"</span>);</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> R.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 短信验证码24小时内只允许修改3次,防止盗刷</span></span><br><span class="line">    Object smsCaptchaTimes = J2CacheUtils.get(Constant.CAPTCHA_CACHE_TIMES, mobile);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == smsCaptchaTimes) &#123;</span><br><span class="line">        J2CacheUtils.put(Constant.CAPTCHA_CACHE_TIMES, mobile, Constant.SMS_CAPTCHA_TIMES);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> times = Integer.parseInt(smsCaptchaTimes.toString());</span><br><span class="line">        <span class="keyword">if</span> (Constant.SMS_CAPTCHA_MAX_TIMES &lt;= times) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">"修改密码次数已超上限，请24小时后再修改！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            times++;</span><br><span class="line">            J2CacheUtils.put(Constant.CAPTCHA_CACHE_TIMES, mobile, String.valueOf(times));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机数</span></span><br><span class="line">    String captcha = CharUtil.getRandomNum(<span class="number">6</span>);</span><br><span class="line">    JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    obj.put(<span class="string">"code"</span>, captcha);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 模板</span></span><br><span class="line">        <span class="keyword">if</span> (Constant.SMS_TPL_TYPE_1.equals(smsmode)) &#123;</span><br><span class="line">            b = DySmsHelper.sendSms(mobile, obj, DySmsEnum.FORGET_PASSWORD_TEMPLATE_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> == b) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">"短信验证码发送失败,请稍后重试！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// J2Cache在一级缓存中配置超时时间</span></span><br><span class="line">        J2CacheUtils.put(Constant.CAPTCHA_CACHE, mobile, captcha);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"短信接口未配置，请联系管理员！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendSms</span><span class="params">(String phone, JSONObject templateParamJson, DySmsEnum dySmsEnum)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    <span class="comment">//可自助调整超时时间</span></span><br><span class="line">    System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">    IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">    DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">    IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//验证json参数</span></span><br><span class="line">    validateParam(templateParamJson,dySmsEnum);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">    SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">    <span class="comment">//必填:待发送手机号</span></span><br><span class="line">    request.setPhoneNumbers(phone);</span><br><span class="line">    <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">    request.setSignName(dySmsEnum.getSignName());</span><br><span class="line">    <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">    request.setTemplateCode(dySmsEnum.getTemplateCode());</span><br><span class="line">    <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">    request.setTemplateParam(templateParamJson.toJSONString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span></span><br><span class="line">    <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">    <span class="comment">//request.setOutId("yourOutId");</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line">        logger.info(<span class="string">"短信接口返回的数据----------------"</span>);</span><br><span class="line">        logger.info(<span class="string">"&#123;Code:"</span> + sendSmsResponse.getCode()+<span class="string">",Message:"</span> + sendSmsResponse.getMessage()+<span class="string">",RequestId:"</span>+ sendSmsResponse.getRequestId()+<span class="string">",BizId:"</span>+sendSmsResponse.getBizId()+<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"OK"</span>.equals(sendSmsResponse.getCode())) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        logger.error(<span class="string">"验证码发送失败："</span> + e.getErrorType() + <span class="string">","</span> + e.getErrCode() + <span class="string">","</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改密码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 用户更改密码</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@SysLog</span>(<span class="string">"修改密码"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/passwordChange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span>  R <span class="title">passwordChange</span><span class="params">(@RequestParam String username, String password, String newPassword, String smscode, String mobile, String captcha)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username) || StringUtils.isBlank(password) || StringUtils.isBlank(smscode) ||</span><br><span class="line">            StringUtils.isBlank(mobile) || StringUtils.isBlank(newPassword) || StringUtils.isBlank(captcha)) &#123;</span><br><span class="line">        R.error(<span class="string">"重置密码失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SysUserEntity sysUserEntity = sysUserService.queryByUserName(username);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == sysUserEntity) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"未找到用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String kaptcha = ShiroUtils.getKaptcha(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == kaptcha)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"验证码已失效"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!captcha.equalsIgnoreCase(kaptcha)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"验证码不正确"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!sysUserEntity.getMobile().equals(mobile)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"输入手机号码与绑定的手机号码不一致!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Object object = J2CacheUtils.get(Constant.CAPTCHA_CACHE, mobile);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == object) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"短信验证码失效！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!smscode.equals(object)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"短信验证码不匹配！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sha256加密</span></span><br><span class="line">    password = <span class="keyword">new</span> Sha256Hash(password).toHex();</span><br><span class="line">    <span class="comment">//sha256加密</span></span><br><span class="line">    newPassword = <span class="keyword">new</span> Sha256Hash(newPassword).toHex();</span><br><span class="line">    <span class="comment">//更新密码</span></span><br><span class="line">    <span class="keyword">int</span> count = sysUserService.updatePassword(sysUserEntity.getUserId(), password, newPassword);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"旧密码不正确！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="string">"密码修改成功！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h4><p>platform-shiro.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        /sys/sms=anon</span><br><span class="line">        /alteration.html=anon</span><br><span class="line">        /sys/user/passwordChange=anon</span><br><span class="line">        /**=authc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="缓存超时时间配置"><a href="#缓存超时时间配置" class="headerlink" title="缓存超时时间配置"></a>缓存超时时间配置</h4><p>caffeine.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 验证码10分钟内有效</span><br><span class="line">captchaCache=1000, 10m</span><br><span class="line"># 短信验证码24小时内只允许修改3次</span><br><span class="line">captchaCacheTimes=1000, 24h</span><br></pre></td></tr></table></figure>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云短信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-dysmsapi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aliyun oss --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>1、获取验证码：需要填写账号、手机号码校验，输入手机号码与绑定的手机号码必须一致。<br>2、验证码失效时间：10分钟<br>3、同一手机号码24小时只能修改3次密码。防止盗刷短信。<br>4、点击获取验证码后1分钟后才能再次点击，防止频繁发送验证码。<br>5、手机号码必须为国内通用手机号码<br>6、图形验证码、短信验证码必须正确。<br>7、获取手机短信验证码失败，图形验证码自动刷新</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-知识汇总</title>
    <url>/2020/06/05/MyBatis-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文主要是 MyBatis 常见的知识点总结</p>
<a id="more"></a>

<h3 id="MyBatis-编程步骤"><a href="#MyBatis-编程步骤" class="headerlink" title="MyBatis 编程步骤"></a>MyBatis 编程步骤</h3><ol>
<li>创建 SqlSessionFactory 对象</li>
<li>通过 SqlSessionFactory 获取 SqlSession 对象</li>
<li>通过 SqlSession 获得 Mapper 代理对象</li>
<li>执行成功，则使用 SqlSession 提交事务</li>
<li>执行失败，则使用 SqlSession 回滚事务</li>
<li>最终，关闭会话</li>
</ol>
<h3 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和 ${} 的区别是什么？"></a><font color=green>#{}</font>和 <font color=green>${}</font> 的区别是什么？</h3><ul>
<li>${} 是Properties 文件中的变量占位符，它可以用于XML标签属性值和SQL内部，属于字符串替换。例如将 ${driver} 会被静态替换为 <font color=green>com.mysql.jdbc.driver</font><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>${} 也可以对传递进来的参数原样拼接在 SQL 中。代码如下：<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id="getSubject3" parameterType="Integer" resultType="Subject"&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> subject</span><br><span class="line">    <span class="keyword">WHERE</span> id = $&#123;id&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
实际场景下，不推荐这么做。因为，可能有 SQL 注入的风险。</li>
<li>#{} 是 SQL 的参数占位符，Mybatis 会将 SQL 中的 #{} 替换为 ? 号，在 SQL 执行前会使用 PreparedStatement 的参数设置方法，按序给 SQL 的 ? 号占位符设置参数值，比如 ps.setInt(0, parameterValue) 。 所以，#{} 是预编译处理，可以有效防止 SQL 注入，提高系统安全性。</li>
<li>另外，#{} 和 ${} 的取值方式非常方便。例如：#{item.name} 的取值方式，为使用反射从参数对象中，获取 item 对象的 name 属性值，相当于 param.getItem().getName() 。</li>
</ul>
<h3 id="当实体类中的属性名和表中的字段名不一样-，怎么办？"><a href="#当实体类中的属性名和表中的字段名不一样-，怎么办？" class="headerlink" title="当实体类中的属性名和表中的字段名不一样 ，怎么办？"></a>当实体类中的属性名和表中的字段名不一样 ，怎么办？</h3><ul>
<li><p>第一种， 通过在查询的 SQL 语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。代码如下：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">"selectOrder"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"Order"</span>&gt; </span><br><span class="line">    <span class="keyword">SELECT</span> order_id <span class="keyword">AS</span> id, order_no <span class="keyword">AS</span> orderno, order_price <span class="keyword">AS</span> price </span><br><span class="line">    <span class="keyword">FROM</span> orders </span><br><span class="line">    <span class="keyword">WHERE</span> order_id = <span class="meta">#&#123;id&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这里，还有几点建议：<br>1、数据库的关键字，统一使用大写，例如：SELECT、AS、FROM、WHERE 。<br>2、每 5 个查询字段换一行，保持整齐。<br>3、, 的后面，和 = 的前后，需要有空格，更加清晰。<br>4、SELECT、FROM、WHERE 等，单独一行，高端大气。</p>
</li>
<li><p>第二种，是第一种的特殊情况。大多数场景下，数据库字段名和实体类中的属性名差，主要是前者为 <strong>下划线风格</strong>，后者为<strong>驼峰风格</strong>。在这种情况下，可以直接配置如下，实现自动的下划线转驼峰的功能。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;setting <span class="type">name</span>="logImpl" <span class="keyword">value</span>="LOG4J"/&gt;</span><br><span class="line">    &lt;setting <span class="type">name</span>="mapUnderscoreToCamelCase" <span class="keyword">value</span>="true" /&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<p>也就说，约定大于配置。非常推荐！</p>
</li>
<li><p>第三种，通过 <resultMap> 来映射字段名和实体类属性名的一一对应的关系。代码如下：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"me.gacl.domain.Order"</span> <span class="built_in">id</span>=”OrderResultMap”&gt; </span><br><span class="line">    &lt;!–- 用 <span class="built_in">id</span> 属性来映射主键字段 -–&gt; </span><br><span class="line">    &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">"id"</span> column=<span class="string">"order_id"</span>&gt; </span><br><span class="line">    &lt;!–- 用 <span class="literal">result</span> 属性来映射非主键字段，<span class="keyword">property</span> 为实体类属性名，column 为数据表中的属性 -–&gt; </span><br><span class="line">    &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">"orderNo"</span> column =<span class="string">"order_no"</span> /&gt; </span><br><span class="line">    &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">"price"</span> column=<span class="string">"order_price"</span> /&gt; </span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">"getOrder"</span> parameterType=<span class="string">"Integer"</span> resultMap=<span class="string">"OrderResultMap"</span>&gt;</span><br><span class="line">    SELECT * </span><br><span class="line">    FROM orders </span><br><span class="line">    WHERE order_id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><em>此处 SELECT * 仅仅作为示例只用，实际场景下，千万千万千万不要这么干。用多少字段，查询多少字段。*</em>  </p>
</li>
</ul>
<h3 id="XML-映射文件中，除了常见的-select-insert-update-delete标-签之外，还有哪些标签？"><a href="#XML-映射文件中，除了常见的-select-insert-update-delete标-签之外，还有哪些标签？" class="headerlink" title="XML 映射文件中，除了常见的 select | insert | update | delete标 签之外，还有哪些标签？"></a>XML 映射文件中，除了常见的 select | insert | update | delete标 签之外，还有哪些标签？</h3><p><code>&lt;cache /&gt; 标签，给定命名空间的缓存配置。</code><br><code>&lt;cache-ref /&gt; 标签，其他命名空间缓存配置的引用。</code><br><code>&lt;resultMap &gt; 标签，是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</code><br><code>&lt;parameterMap /&gt; 标签，已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。</code><br><code>&lt;sql /&gt; 标签，可被其他语句引用的可重用语句块。</code><br><code>&lt;include /&gt; 标签，引用 &lt;sql /&gt; 标签的语句。</code><br><code>&lt;selectKey /&gt; 标签，不支持自增的主键生成策略标签。</code><br><code>&lt;if /&gt;</code><br><code>&lt;choose /&gt;、&lt;when /&gt;、&lt;otherwise /&gt;</code><br><code>&lt;trim /&gt;、&lt;where /&gt;、&lt;set /&gt;</code><br><code>&lt;foreach /&gt;</code><br><code>&lt;bind /&gt;</code><br>请参考 <a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="noopener">MyBatis 官方文档</a></p>
<h3 id="Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL-？能简述一下动态-SQL-的执行原理吗？"><a href="#Mybatis-动态-SQL-是做什么的？都有哪些动态-SQL-？能简述一下动态-SQL-的执行原理吗？" class="headerlink" title="Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL ？能简述一下动态 SQL 的执行原理吗？"></a>Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL ？能简述一下动态 SQL 的执行原理吗？</h3><p><code>Mybatis 动态 SQL ，可以让我们在 XML 映射文件内，以 XML 标签的形式编写动态 SQL ，完成逻辑判断和动态拼接 SQL 的功能。</code><br><code>Mybatis 提供了 9 种动态 SQL 标签：&lt;if /&gt;、&lt;choose /&gt;、&lt;when /&gt;、&lt;otherwise /&gt;、&lt;trim /&gt;、&lt;where /&gt;、&lt;set /&gt;、&lt;foreach /&gt;、&lt;bind /&gt; 。</code><br><code>其执行原理为，使用 OGNL 的表达式，从 SQL 参数对象中计算表达式的值，根据表达式的值动态拼接 SQL ，以此来完成动态 SQL 的功能。</code></p>
<p>如上的内容，更加详细的话，请看 <a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">《MyBatis 文档 —— 动态 SQL》</a> 文档。</p>
<h3 id="最佳实践中，通常一个-XML-映射文件，都会写一个-Mapper-接口与之对应。请问，这个-Mapper-接口的工作原理是什么？Mapper-接口里的方法，参数不同时，方法能重载吗？"><a href="#最佳实践中，通常一个-XML-映射文件，都会写一个-Mapper-接口与之对应。请问，这个-Mapper-接口的工作原理是什么？Mapper-接口里的方法，参数不同时，方法能重载吗？" class="headerlink" title="最佳实践中，通常一个 XML 映射文件，都会写一个 Mapper 接口与之对应。请问，这个 Mapper 接口的工作原理是什么？Mapper 接口里的方法，参数不同时，方法能重载吗？"></a>最佳实践中，通常一个 XML 映射文件，都会写一个 Mapper 接口与之对应。请问，这个 Mapper 接口的工作原理是什么？Mapper 接口里的方法，参数不同时，方法能重载吗？</h3><p>Mapper 接口，对应的关系如下：</p>
<ul>
<li>接口的全限名，就是映射文件中的 “namespace” 的值。</li>
<li>接口的方法名，就是映射文件中 MappedStatement 的 “id” 值。</li>
<li>接口方法内的参数，就是传递给 SQL 的参数。<br>Mapper 接口是没有实现类的，当调用接口方法时，接口全限名 + 方法名拼接字符串作为 key 值，可唯一定位一个对应的 MappedStatement 。举例：com.mybatis3.mappers.StudentDao.findStudentById ，可以唯一找到 “namespace” 为 com.mybatis3.mappers.StudentDao 下面 “id” 为 findStudentById 的 MappedStatement 。</li>
</ul>
<p><code>总结来说，在 Mybatis 中，每一个 &lt;select /&gt;、&lt;insert /&gt;、&lt;update /&gt;、&lt;delete /&gt; 标签，都会被解析为一个 MappedStatement 对象。另外，Mapper 接口的实现类，通过 MyBatis 使用 JDK Proxy 自动生成其代理对象 Proxy ，而代理对象 Proxy 会拦截接口方法，从而“调用”对应的 MappedStatement 方法，最终执行 SQL ，返回执行结果。整体流程如下图：</code></p>
<p><img src="2020-06-05-MyBatis-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/01.png" alt="01"></p>
<ul>
<li>其中，SqlSession 在调用 Executor 之前，会获得对应的 MappedStatement 方法。例如：DefaultSqlSession#select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) 方法，代码如下：</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DefaultSqlSession.java</span></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获得 MappedStatement 对象</span></span><br><span class="line">        MappedStatement ms = configuration.get<span class="constructor">MappedStatement(<span class="params">statement</span>)</span>;</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        executor.query(ms, wrap<span class="constructor">Collection(<span class="params">parameter</span>)</span>, rowBounds, handler);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw <span class="module-access"><span class="module"><span class="identifier">ExceptionFactory</span>.</span></span>wrap<span class="constructor">Exception(<span class="string">"Error querying database.  Cause: "</span> + <span class="params">e</span>, <span class="params">e</span>)</span>;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">ErrorContext</span>.</span></span>instance<span class="literal">()</span>.reset<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Mapper 接口里的方法，是不能重载的，因为是全限名 + 方法名的保存和寻找策略。</li>
</ul>
<h3 id="Mapper-接口绑定有几种实现方式，分别是怎么实现的"><a href="#Mapper-接口绑定有几种实现方式，分别是怎么实现的" class="headerlink" title="Mapper 接口绑定有几种实现方式，分别是怎么实现的?"></a>Mapper 接口绑定有几种实现方式，分别是怎么实现的?</h3><p>接口绑定有三种实现方式：</p>
<ul>
<li>第一种，通过 XML Mapper 里面写 SQL 来绑定。在这种情况下，要指定 XML 映射文件里面的 “namespace” 必须为接口的全路径名。</li>
<li>第二种，通过注解绑定，就是在接口的方法上面加上 @Select、@Update、@Insert、@Delete 注解，里面包含 SQL 语句来绑定。</li>
<li>第三种，是第二种的特例，也是通过注解绑定，在接口的方法上面加上 @SelectProvider、@UpdateProvider、@InsertProvider、@DeleteProvider 注解，通过 Java 代码，生成对应的动态 SQL。<br><code>实际场景下，最最最推荐的是第一种方式。因为，SQL 通过注解写在 Java 代码中，会非常杂乱。而写在 XML 中，更加有整体性，并且可以更加方便的使用 OGNL 表达式。</code></li>
</ul>
<h3 id="Mybatis-的-XML-Mapper文件中，不同的-XML-映射文件，id-是否可以重复？"><a href="#Mybatis-的-XML-Mapper文件中，不同的-XML-映射文件，id-是否可以重复？" class="headerlink" title="Mybatis 的 XML Mapper文件中，不同的 XML 映射文件，id 是否可以重复？"></a>Mybatis 的 XML Mapper文件中，不同的 XML 映射文件，id 是否可以重复？</h3><p>不同的 XML Mapper 文件，如果配置了 “namespace” ，那么 id 可以重复；如果没有配置 “namespace” ，那么 id 不能重复。毕竟”namespace” 不是必须的，只是最佳实践而已。</p>
<p>原因就是，namespace + id 是作为 Map&lt;String, MappedStatement&gt; 的 key 使用的。如果没有 “namespace”，就剩下 id ，那么 id 重复会导致数据互相覆盖。如果有了 “namespace”，自然 id 就可以重复，”namespace”不同，namespace + id 自然也就不同。</p>
<h3 id="如何获取自动生成的-主-键值"><a href="#如何获取自动生成的-主-键值" class="headerlink" title="如何获取自动生成的(主)键值?"></a>如何获取自动生成的(主)键值?</h3><p>不同的数据库，获取自动生成的(主)键值的方式是不同的。</p>
<p><code>MySQL 有两种方式，但是自增主键，代码如下：</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 方式一，使用 useGeneratedKeys + keyProperty 属性</span><br><span class="line">&lt;<span class="keyword">insert</span> id="insert" parameterType="Person" useGeneratedKeys="true" keyProperty="id"&gt;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> person(<span class="type">name</span>, pswd)</span><br><span class="line">    <span class="keyword">VALUE</span> (#&#123;<span class="type">name</span>&#125;, #&#123;pswd&#125;)</span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br><span class="line">    </span><br><span class="line">// 方式二，使用 `&lt;selectKey /&gt;` 标签</span><br><span class="line">&lt;<span class="keyword">insert</span> id="insert" parameterType="Person"&gt;</span><br><span class="line">    &lt;selectKey keyProperty="id" resultType="long" <span class="keyword">order</span>="AFTER"&gt;</span><br><span class="line">        <span class="keyword">SELECT</span> LAST_INSERT_ID()</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> person(<span class="type">name</span>, pswd)</span><br><span class="line">    <span class="keyword">VALUE</span> (#&#123;<span class="type">name</span>&#125;, #&#123;pswd&#125;)</span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中，方式一较为常用。</li>
</ul>
<p><code>Oracle 有两种方式，序列和触发器。基于序列，根据 &lt;selectKey /&gt; 执行的时机，也有两种方式，代码如下：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个是创建表的自增序列</span></span><br><span class="line">CREATE SEQUENCE student_sequence</span><br><span class="line">INCREMENT BY <span class="number">1</span></span><br><span class="line">NOMAXVALUE</span><br><span class="line">NOCYCLE</span><br><span class="line">CACHE <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>// 方式一，使用 <code>&lt;selectKey /&gt;</code> 标签 + BEFORE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"add"</span> parameterType=<span class="string">"Student"</span>&gt;</span><br><span class="line">　　&lt;selectKey keyProperty=<span class="string">"student_id"</span> resultType=<span class="string">"int"</span> order=<span class="string">"BEFORE"</span>&gt;</span><br><span class="line">      select student_sequence.nextval FROM dual</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    </span><br><span class="line">     <span class="function">INSERT INTO <span class="title">student</span><span class="params">(student_id, student_name, student_age)</span></span></span><br><span class="line"><span class="function">     <span class="title">VALUES</span> <span class="params">(#&#123;student_id&#125;,#&#123;student_name&#125;,#&#123;student_age&#125;)</span></span></span><br><span class="line"><span class="function">&lt;/insert&gt;</span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"><span class="comment">// 方式二，使用 `&lt;selectKey /&gt;` 标签 + AFTER</span></span></span><br><span class="line"><span class="function">&lt;insert id</span>=<span class="string">"save"</span> parameterType=<span class="string">"com.threeti.to.ZoneTO"</span> &gt;</span><br><span class="line">    &lt;selectKey resultType=<span class="string">"java.lang.Long"</span> keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> &gt;</span><br><span class="line">      SELECT SEQ_ZONE.CURRVAL AS id FROM dual</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="function">INSERT INTO <span class="title">TBL_ZONE</span> <span class="params">(ID, NAME )</span> </span></span><br><span class="line"><span class="function">    <span class="title">VALUES</span> <span class="params">(SEQ_ZONE.NEXTVAL, #&#123;name,jdbcType=VARCHAR&#125;)</span></span></span><br><span class="line"><span class="function">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Mybatis-执行批量插入，能返回数据库主键列表吗？"><a href="#Mybatis-执行批量插入，能返回数据库主键列表吗？" class="headerlink" title="Mybatis 执行批量插入，能返回数据库主键列表吗？"></a>Mybatis 执行批量插入，能返回数据库主键列表吗？</h3><p>能<br>升级Mybatis版本到3.3.1。官方在这个版本中加入了批量新增返回主键id的功能<br>mapper.xml层代码</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 批量新增 --&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"batchInsert"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> &gt;</span>  </span></span><br><span class="line"><span class="xml">    INSERT INTO  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"t_shop_resource"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    (relation_id, summary_id, relation_type)  </span></span><br><span class="line"><span class="xml">    VALUES  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"shopResource"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        (  </span></span><br><span class="line"><span class="xml">            #</span><span class="template-variable">&#123;shopResource.relationId&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;shopResource.summaryId&#125;</span><span class="xml">, #</span><span class="template-variable">&#123;shopResource.relationType&#125;</span><span class="xml">  </span></span><br><span class="line"><span class="xml">        )  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ShopResource&gt; batchinsertCallId(List&lt;ShopResource&gt; shopResourceList)&#123;  </span><br><span class="line">    <span class="keyword">this</span>.getSqlSession().insert(getStatement(SQL_BATCH_INSERT_CALL_ID), shopResourceList);  </span><br><span class="line">    <span class="keyword">return</span> shopResourceList;<span class="comment">// 重点介绍  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在mybatis3.3.1中，虽然加入了批量新增返回主键id的功能，但是它是这样运行的，在需要新增插入新元素集合对象时，它会需要参数对象，当执行完插入操作后，给之前的参数对象设置id值，也就是改变了需要插入对象集合中的元素的属性id值， 所以接收返回时，返回方法形参参数即可，同样的地址引用改变了内容，返回后的集合也是改变后的集合。</p>
<h3 id="在-Mapper-中如何传递多个参数"><a href="#在-Mapper-中如何传递多个参数" class="headerlink" title="在 Mapper 中如何传递多个参数?"></a>在 Mapper 中如何传递多个参数?</h3><ul>
<li><p>第一种，使用 Map 集合，装载多个参数进行传递。代码如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"start"</span>, start);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"end"</span>, <span class="built_in">end</span>);</span><br><span class="line"><span class="keyword">return</span> studentMapper.selectStudents(<span class="built_in">map</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper 接口</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">(Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper XML 代码</span></span><br><span class="line">&lt;select id=<span class="string">"selectStudents"</span> parameterType=<span class="string">"Map"</span> resultType=<span class="string">"Student"</span>&gt;</span><br><span class="line">    SELECT * </span><br><span class="line">    FROM students </span><br><span class="line">    LIMIT #&#123;start&#125;, #&#123;<span class="built_in">end</span>&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p><strong>显然，这不是一种优雅的方式。</strong></p>
</li>
<li><p>第二种，保持传递多个参数，使用 @Param 注解。代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 调用方法</span><br><span class="line"><span class="keyword">return</span> studentMapper.selectStudents(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">// Mapper 接口</span><br><span class="line">List&lt;Student&gt; selectStudents(@Param("start") <span class="type">Integer</span> <span class="keyword">start</span>, @Param("end") <span class="type">Integer</span> <span class="keyword">end</span>);</span><br><span class="line"></span><br><span class="line">// Mapper <span class="type">XML</span> 代码</span><br><span class="line">&lt;<span class="keyword">select</span> id="selectStudents" resultType="Student"&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> students </span><br><span class="line">    <span class="keyword">LIMIT</span> #&#123;<span class="keyword">start</span>&#125;, #&#123;<span class="keyword">end</span>&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>推荐使用这种方式。</strong> </p>
</li>
<li><p>第三种，保持传递多个参数，不使用 @Param 注解。代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 调用方法</span><br><span class="line"><span class="keyword">return</span> studentMapper.selectStudents(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">// Mapper 接口</span><br><span class="line">List&lt;Student&gt; selectStudents(<span class="type">Integer</span> <span class="keyword">start</span>, <span class="type">Integer</span> <span class="keyword">end</span>);</span><br><span class="line"></span><br><span class="line">// Mapper <span class="type">XML</span> 代码</span><br><span class="line">&lt;<span class="keyword">select</span> id="selectStudents" resultType="Student"&gt;</span><br><span class="line">    <span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> students </span><br><span class="line">    <span class="keyword">LIMIT</span> #&#123;param1&#125;, #&#123;param2&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>其中，按照参数在方法方法中的位置，从 1 开始，逐个为 #{param1}、#{param2}、#{param3} 不断向下。</strong></p>
</li>
</ul>
<h3 id="Mybatis-是否可以映射-Enum-枚举类？"><a href="#Mybatis-是否可以映射-Enum-枚举类？" class="headerlink" title="Mybatis 是否可以映射 Enum 枚举类？"></a>Mybatis 是否可以映射 Enum 枚举类？</h3><p>Mybatis 可以映射枚举类，对应的实现类为 EnumTypeHandler 或 EnumOrdinalTypeHandler 。</p>
<p>EnumTypeHandler ，基于 Enum.name 属性( String )。默认。<br>EnumOrdinalTypeHandler ，基于 Enum.ordinal 属性( int )。可通过 <setting name="defaultEnumTypeHandler" value="EnumOrdinalTypeHandler" /> 来设置。<br>当然，实际开发场景，我们很少使用 Enum 类型，更加的方式是，代码如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="built_in">int</span> STATUS_GOOD = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="built_in">int</span> STATUS_BETTER = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="built_in">int</span> STATUS_BEST = <span class="number">3</span>；</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> status;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且，不单可以映射枚举类，Mybatis 可以映射任何对象到表的一列上。映射方式为自定义一个 TypeHandler 类，实现 TypeHandler 的#setParameter(…) 和 #getResult(…) 接口方法。</p>
<p>TypeHandler 有两个作用：</p>
<p>一是，完成从 javaType 至 jdbcType 的转换。<br>二是，完成 jdbcType 至 javaType 的转换。<br>具体体现为 #setParameter(…) 和 #getResult(..) 两个方法，分别代表设置 SQL 问号占位符参数和获取列查询结果。</p>
<h3 id="Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？"><a href="#Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？" class="headerlink" title="Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？"></a>Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</h3><p>Mybatis 有四种 Executor 执行器，分别是 SimpleExecutor、ReuseExecutor、BatchExecutor、CachingExecutor 。</p>
<p>SimpleExecutor ：每执行一次 update 或 select 操作，就创建一个 Statement 对象，用完立刻关闭 Statement 对象。<br>ReuseExecutor ：执行 update 或 select 操作，以 SQL 作为key 查找缓存的 Statement 对象，存在就使用，不存在就创建；用完后，不关闭 Statement 对象，而是放置于缓存 Map&lt;String, Statement&gt; 内，供下一次使用。简言之，就是重复使用 Statement 对象。<br>BatchExecutor ：执行 update 操作（没有 select 操作，因为 JDBC 批处理不支持 select 操作），将所有 SQL 都添加到批处理中（通过 addBatch 方法），等待统一执行（使用 executeBatch 方法）。它缓存了多个 Statement 对象，每个 Statement 对象都是调用 addBatch 方法完毕后，等待一次执行 executeBatch 批处理。实际上，整个过程与 JDBC 批处理是相同。<br>CachingExecutor ：在上述的三个执行器之上，增加二级缓存的功能。</p>
<p><code>通过设置 &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;&quot;&gt; 的 &quot;value&quot; 属性，可传入 SIMPLE、REUSE、BATCH 三个值，分别使用 SimpleExecutor、ReuseExecutor、BatchExecutor 执行器。</code></p>
<p><code>通过设置 &lt;setting name=&quot;cacheEnabled&quot; value=&quot;&quot; 的 &quot;value&quot; 属性为 true 时，创建 CachingExecutor 执行器。</code></p>
<h3 id="MyBatis-如何执行批量插入"><a href="#MyBatis-如何执行批量插入" class="headerlink" title="MyBatis 如何执行批量插入?"></a>MyBatis 如何执行批量插入?</h3><p>首先，在 Mapper XML 编写一个简单的 Insert 语句。代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">insert</span> id="insertUser" parameterType="String"&gt; </span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users(<span class="type">name</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (#&#123;<span class="keyword">value</span>&#125;) </span><br><span class="line">&lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure>
<p>然后，然后在对应的 Mapper 接口中，编写映射的方法。代码如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">void</span> <span class="selector-tag">insertUser</span>(<span class="variable">@Param</span>(<span class="string">"name"</span>) String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，调用该 Mapper 接口方法。代码如下：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testBatch() &#123;</span><br><span class="line">    <span class="comment">// 创建要插入的用户的名字的数组</span></span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    names.<span class="built_in">add</span>(<span class="string">"占小狼"</span>);</span><br><span class="line">    names.<span class="built_in">add</span>(<span class="string">"朱小厮"</span>);</span><br><span class="line">    names.<span class="built_in">add</span>(<span class="string">"徐妈"</span>);</span><br><span class="line">    names.<span class="built_in">add</span>(<span class="string">"飞哥"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得执行器类型为 Batch 的 SqlSession 对象，并且 autoCommit = false ，禁止事务自动提交</span></span><br><span class="line">    <span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession(ExecutorType.BATCH, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="comment">// 获得 Mapper 对象</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 循环插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> name : names) &#123;</span><br><span class="line">            mapper.insertUser(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 提交批量操作</span></span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>还有另一种方式，代码如下：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">INSERT INTO [<span class="string">表名</span>](<span class="link">[列名],[列名]</span>) </span><br><span class="line">VALUES</span><br><span class="line">([列值],[列值])),</span><br><span class="line">([列值],[列值])),</span><br><span class="line">([列值],[列值]));</span><br></pre></td></tr></table></figure>
对于这种方式，需要保证单条 SQL 不超过语句的最大限制 max_allowed_packet 大小，默认为 1 M 。<br>这两种方式的性能对比，可以看看 <a href="https://www.jianshu.com/p/cce617be9f9e" target="_blank" rel="noopener">《[实验]mybatis批量插入方式的比较》 </a>。</li>
</ul>
<h3 id="介绍-MyBatis-的一级缓存和二级缓存的概念和实现原理？"><a href="#介绍-MyBatis-的一级缓存和二级缓存的概念和实现原理？" class="headerlink" title="介绍 MyBatis 的一级缓存和二级缓存的概念和实现原理？"></a>介绍 MyBatis 的一级缓存和二级缓存的概念和实现原理？</h3><h3 id="Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？</h3><p>Mybatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载。其中，association 指的就是一对一，collection 指的就是一对多查询。</p>
<p>在 Mybatis 配置文件中，可以配置 <setting name="lazyLoadingEnabled" value="true" /> 来启用延迟加载的功能。默认情况下，延迟加载的功能是关闭的。</p>
<p>它的原理是，使用 CGLIB 或 Javassist( 默认 ) 创建目标对象的代理对象。当调用代理对象的延迟加载属性的 getting 方法时，进入拦截器方法。比如调用 a.getB().getName() 方法，进入拦截器的 invoke(…) 方法，发现 a.getB() 需要延迟加载时，那么就会单独发送事先保存好的查询关联 B 对象的 SQL ，把 B 查询上来，然后调用a.setB(b) 方法，于是 a 对象 b 属性就有值了，接着完成a.getB().getName() 方法的调用。这就是延迟加载的基本原理。</p>
<p>当然了，不光是 Mybatis，几乎所有的包括 Hibernate 在内，支持延迟加载的原理都是一样的。</p>
<h3 id="Mybatis-能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"><a href="#Mybatis-能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。" class="headerlink" title="Mybatis 能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。"></a>Mybatis 能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。</h3><p>能，Mybatis 不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询。</p>
<ul>
<li><p>一对多<br>用户级联文章在JavaBean中的编写方式,这就是一对多在JavaBean中的配置<br><img src="02.png" alt="02.png"><br>Mybatis的Mapper该如何编写一对多?很简单,就是在resultMap标签中配置<collection>标签,用来存储查询到的文章列表,注意posts代表的是用户实体的文章List集合<br><img src="03.png" alt="03.png"></p>
</li>
<li><p>多对一<br>文章级联用户在JavaBean中的编写方式,这是多对一在JavaBean中的配置<br><img src="04.png" alt="04.png"><br>Mybatis的Mapper该如何编写多对一?很简单,就是在resultMap标签中配置<association></association>标签关联所属的用户实体<br><img src="05.png" alt="05.png"></p>
</li>
</ul>
<h3 id="简述-Mybatis-的插件运行原理？以及如何编写一个插件？"><a href="#简述-Mybatis-的插件运行原理？以及如何编写一个插件？" class="headerlink" title="简述 Mybatis 的插件运行原理？以及如何编写一个插件？"></a>简述 Mybatis 的插件运行原理？以及如何编写一个插件？</h3><p>Mybatis 仅可以编写针对 ParameterHandler、ResultSetHandler、StatementHandler、Executor 这 4 种接口的插件。</p>
<p>Mybatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 #invoke(…)方法。当然，只会拦截那些你指定需要拦截的方法。</p>
<p>编写一个 MyBatis 插件的步骤如下：</p>
<ul>
<li>首先，实现 Mybatis 的 Interceptor 接口，并实现 #intercept(…) 方法。</li>
<li>然后，在给插件编写注解，指定要拦截哪一个接口的哪些方法即可</li>
<li>最后，在配置文件中配置你编写的插件。</li>
</ul>
<h3 id="简述-Mybatis-的插件运行原理？以及如何编写一个插件？-1"><a href="#简述-Mybatis-的插件运行原理？以及如何编写一个插件？-1" class="headerlink" title="简述 Mybatis 的插件运行原理？以及如何编写一个插件？"></a>简述 Mybatis 的插件运行原理？以及如何编写一个插件？</h3><p>Mybatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非数据库分页。<br>所以，实际场景下，不适合直接使用 MyBatis 原有的 RowBounds 对象进行分页。而是使用如下两种方案：</p>
<p>在 SQL 内直接书写带有数据库分页的参数来完成数据库分页功能<br>也可以使用分页插件来完成数据库分页。<br>这两者都是基于数据库分页，差别在于前者是工程师手动编写分页条件，后者是插件自动添加分页条件。</p>
<p>分页插件的基本原理是使用 Mybatis 提供的插件接口，实现自定义分页插件。在插件的拦截方法内，拦截待执行的 SQL ，然后重写 SQL ，根据dialect 方言，添加对应的物理分页语句和物理分页参数。</p>
<p>举例：SELECT * FROM student ，拦截 SQL 后重写为：select * FROM student LIMI 0，10 。</p>
<h3 id="MyBatis-与-Hibernate-有哪些不同？"><a href="#MyBatis-与-Hibernate-有哪些不同？" class="headerlink" title="MyBatis 与 Hibernate 有哪些不同？"></a>MyBatis 与 Hibernate 有哪些不同？</h3><ul>
<li>hibernate是全自动，而mybatis是半自动<br>hibernate完全可以通过对象关系模型实现对数据库的操作，拥有完整的JavaBean对象与数据库的映射结构来自动生成sql。而mybatis仅有基本的字段映射，对象数据以及对象实际关系仍然需要通过手写sql来实现和管理。</li>
<li>hibernate数据库移植性远大于mybatis<br>hibernate通过它强大的映射结构和hql语言，大大降低了对象与数据库（oracle、mysql等）的耦合性，而mybatis由于需要手写sql，因此与数据库的耦合性直接取决于程序员写sql的方法，如果sql不具通用性而用了很多某数据库特性的sql语句的话，移植性也会随之降低很多，成本很高。</li>
<li>hibernate拥有完整的日志系统，mybatis则欠缺一些<br>hibernate日志系统非常健全，涉及广泛，包括：sql记录、关系异常、优化警告、缓存提示、脏数据警告等；而mybatis则除了基本记录功能外，功能薄弱很多。</li>
<li>mybatis相比hibernate需要关心很多细节<br>hibernate配置要比mybatis复杂的多，学习成本也比mybatis高。但也正因为mybatis使用简单，才导致它要比hibernate关心很多技术细节。mybatis由于不用考虑很多细节，开发模式上与传统jdbc区别很小，因此很容易上手并开发项目，但忽略细节会导致项目前期bug较多，因而开发出相对稳定的软件很慢，而开发出软件却很快。hibernate则正好与之相反。但是如果使用hibernate很熟练的话，实际上开发效率丝毫不差于甚至超越mybatis。</li>
<li>sql直接优化上，mybatis要比hibernate方便很多<br>由于mybatis的sql都是写在xml里，因此优化sql比hibernate方便很多。而hibernate的sql很多都是自动生成的，无法直接维护sql；虽有hql，但功能还是不及sql强大，见到报表等变态需求时，hql也歇菜，也就是说hql是有局限的；hibernate虽然也支持原生sql，但开发模式上却与orm不同，需要转换思维，因此使用上不是非常方便。总之写sql的灵活度上hibernate不及mybatis。</li>
</ul>
<h3 id="JDBC-编程有哪些不足之处，MyBatis是如何解决这些问题的？"><a href="#JDBC-编程有哪些不足之处，MyBatis是如何解决这些问题的？" class="headerlink" title="JDBC 编程有哪些不足之处，MyBatis是如何解决这些问题的？"></a>JDBC 编程有哪些不足之处，MyBatis是如何解决这些问题的？</h3><p>问题一：SQL 语句写在代码中造成代码不易维护，且代码会比较混乱。<br>解决方式：将 SQL 语句配置在 Mapper XML 文件中，与 Java 代码分离。</p>
<p>问题二：根据参数不同，拼接不同的 SQL 语句非常麻烦。例如 SQL 语句的 WHERE 条件不一定，可能多也可能少，占位符需要和参数一一对应。<br>解决方式：MyBatis 提供 <where />、<if /> 等等动态语句所需要的标签，并支持 OGNL 表达式，简化了动态 SQL 拼接的代码，提升了开发效率。</p>
<p>问题三，对结果集解析麻烦，SQL 变化可能导致解析代码变化，且解析前需要遍历。<br>解决方式：Mybatis 自动将 SQL 执行结果映射成 Java 对象。</p>
<p>问题四，数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。<br>解决方式：在 mybatis-config.xml 中，配置数据链接池，使用连接池管理数据库链接。<br>当然，即使不使用 MyBatis ，也可以使用数据库连接池。<br>另外，MyBatis 默认提供了数据库连接池的实现，只是说，因为其它开源的数据库连接池性能更好，所以一般很少使用 MyBatis 自带的连接池实现。</p>
<h3 id="Mybatis-映射文件中，如果-A-标签通过-include-引用了B标签的内容，请问，B-标签能否定义在-A-标签的后面，还是说必须定义在A标签的前面？"><a href="#Mybatis-映射文件中，如果-A-标签通过-include-引用了B标签的内容，请问，B-标签能否定义在-A-标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="Mybatis 映射文件中，如果 A 标签通过 include 引用了B标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在A标签的前面？"></a>Mybatis 映射文件中，如果 A 标签通过 include 引用了B标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在A标签的前面？</h3><p>虽然 Mybatis 解析 XML 映射文件是按照顺序解析的。但是，被引用的 B 标签依然可以定义在任何地方，Mybatis 都可以正确识别。也就是说，无需按照顺序，进行定义。</p>
<p>原理是，Mybatis 解析 A 标签，发现 A 标签引用了 B 标签，但是 B 标签尚未解析到，尚不存在，此时，Mybatis 会将 A 标签标记为<strong>未解析状态</strong>。然后，继续解析余下的标签，包含 B 标签，待所有标签解析完毕，Mybatis 会重新解析那些被标记为未解析的标签，此时再解析A标签时，B 标签已经存在，A 标签也就可以正常解析完成了</p>
<h3 id="简述-Mybatis-的-XML-映射文件和-Mybatis-内部数据结构之间的映射关系？"><a href="#简述-Mybatis-的-XML-映射文件和-Mybatis-内部数据结构之间的映射关系？" class="headerlink" title="简述 Mybatis 的 XML 映射文件和 Mybatis 内部数据结构之间的映射关系？"></a>简述 Mybatis 的 XML 映射文件和 Mybatis 内部数据结构之间的映射关系？</h3><p>Mybatis 将所有 XML 配置信息都封装到 All-In-One 重量级对象Configuration内部。<br>在 XML Mapper 文件中：<br><code>&lt;parameterMap&gt; 标签，会被解析为 ParameterMap 对象，其每个子元素会被解析为 ParameterMapping 对象。</code><br><code>&lt;resultMap&gt; 标签，会被解析为 ResultMap 对象，其每个子元素会被解析为 ResultMapping 对象。</code><br><code>每一个 &lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt; 标签，均会被解析为一个 MappedStatement 对象，标签内的 SQL 会被解析为一个 BoundSql 对象。</code></p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发入门</title>
    <url>/2020/06/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微信小程序开发入门（大神请绕路），本文为快速搭建微信小程序详细教程<br>纯手工打造学习博客  </p>
<a id="more"></a>

<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="开发中使用的软件和工具"><a href="#开发中使用的软件和工具" class="headerlink" title="开发中使用的软件和工具"></a>开发中使用的软件和工具</h4><p>微信开发者工具、IDEA、Xshell、Xftp、Git、Tomcat8、jdk1.8、MySQL5.7、DataGrip、Redis4、RedisDesktopManager、maven3、nginx。</p>
<h4 id="注册小程序"><a href="#注册小程序" class="headerlink" title="注册小程序"></a>注册小程序</h4><ol>
<li>注册<br>去<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>，选择<a href="https://kf.qq.com/faq/170109iQBJ3Q170109JbQfiu.html" target="_blank" rel="noopener">小程序注册</a>。注册小程序时，可以选择个人身份或者企业身份。如果您的小程序可能会需要微信支付的功能，那么请务必选择企业身份，因为个人微信小程序是无法接入微信支付功能的。</li>
<li>完善资料<br>小程序信息完善：注册完登录后去完善小程序基本信息 设置 -&gt; 基本设置。</li>
<li>微信认证<br>个人类型帐号暂不支持微信认证。<a href="https://kf.qq.com/faq/170109quaQbu170109AJnArI.html" target="_blank" rel="noopener">微信认证特权</a><br>认证入口：登录小程序—设置—基本设置—微信认证—详情。</li>
<li>AppID和AppSecret<br>点击 开发 -&gt; 开发设置，在该页面可以看到AppID和AppSecret。查看后要记得把AppSecret在其他位置记录下来，因为AppSecret只能查看一次，后续无法再次查看了。小程序的AppID和AppSecret非常重要，开发阶段需要用到。</li>
</ol>
<h4 id="开通微信支付"><a href="#开通微信支付" class="headerlink" title="开通微信支付"></a>开通微信支付</h4><p>已认证的小程序可申请<a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=%2F" target="_blank" rel="noopener">微信支付</a>。<br>开通微信支付，需要提供身份证、营业执照、公章等信息注册，个人身份无法开通微信支付。<br>去微信支付官方平台，<a href="https://kf.qq.com/product/wechatpaymentmerchant.html#hid=2795" target="_blank" rel="noopener">接入微信支付</a>，完成注册。</p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a><a href="https://www.aliyun.com/activity?spm=5176.8006371.h2v3icoap.1.48d47e63kGEzuy#/promotionArea" target="_blank" rel="noopener">服务器</a></h4><p>推荐配置：2核/4G/5M</p>
<h4 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h4><p>小程序只支持已备案<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html" target="_blank" rel="noopener">域名访问</a><br><a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.86.7ef42c4aJ7B8tC" target="_blank" rel="noopener">申请域名</a><br><a href="https://beian.aliyun.com/?spm=5176.8087400.765261.5.379a15c908MKEi" target="_blank" rel="noopener">域名备案</a><br><a href="https://help.aliyun.com/knowledge_detail/102231.html" target="_blank" rel="noopener">云解析DNS</a><br><a href="https://yq.aliyun.com/articles/637307" target="_blank" rel="noopener">SSL证书</a><br><a href="https://jingyan.baidu.com/article/11c17a2c2c9139f446e39d9b.html" target="_blank" rel="noopener">配置SSL证书</a></p>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><p>框架选型：<br>if你是react系，那就用taro。<br>if是vue系，需要用多端，那就用<a href="https://uniapp.dcloud.io/README?id=%e5%bf%ab%e9%80%9f%e4%bd%93%e9%aa%8c" target="_blank" rel="noopener">uni-app</a><br>else 用原生</p>
<h4 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h4><p>请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信官方文档</a><br>小案例：<a href="http://zhuhb5.github.io/2020/07/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E9%A6%96%E9%A1%B5/">微信小程序-首页</a></p>
<h4 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h4><p>开源平台：<a href="https://gitee.com/fuyang_lipengjun/platform" target="_blank" rel="noopener">微同商城</a></p>
<h5 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h5><p>前台页面用的Vue + iView开发<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">微信官方文档API</a><br><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">Vue官方API</a><br><a href="https://www.iviewui.com/docs/guide/install" target="_blank" rel="noopener">iView官方API</a></p>
<h5 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h5><p>由于后台功能模块太多了，不一一详细描述。只贴几个关键的功能点。</p>
<h6 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h6><ol>
<li>下载代码到本地，<a href="https://gitee.com/fuyang_lipengjun/platform" target="_blank" rel="noopener">传送</a>, 用idea导入maven项目，配置好jdk，maven, 编码格式,配置tomcat。</li>
<li>安装Mysql, 导入数据库脚本，脚本文件：platform_sql\platform.sql</li>
<li>安装Redis</li>
<li>启动前需要根据实际参数修改配置文件<br>prod/platform.properties<br>#小程序ID<br>wx.appId=<br>#小程序密钥<br>wx.secret=<br>#商户号<br>wx.mchId=<br>#支付签名<br>wx.paySignKey=<br>j2cache.properties<br>redis.hosts=<br>redis.password=</li>
<li>启动Tomcat</li>
</ol>
<h6 id="功能权限设计"><a href="#功能权限设计" class="headerlink" title="功能权限设计"></a>功能权限设计</h6><p>sys_user[用户]表，保存用户相关数据，通过sys_user_role[用户与角色关联]表，与 sys_role[角色]表关联；sys_menu[菜单]表通过 sys_role_menu[菜单与角色关联]表，与 sys_role[角色]表关联<br>sys_menu 表，保存菜单相关数据，并在 perms 字段里，保存了 shiro 的权限标识，也就是说拥有此菜单，就拥有 perms字段里的所有权限，比如，某用户拥有的菜单权限标识 sys:menu:list，就可以访问下面的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 所有菜单列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:menu:list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">(@RequestParam Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询列表数据</span></span><br><span class="line">    Query query = <span class="keyword">new</span> Query(params);</span><br><span class="line">    List&lt;SysMenuEntity&gt; menuList = sysMenuService.queryList(query);</span><br><span class="line">    <span class="keyword">int</span> total = sysMenuService.queryTotal(query);</span><br><span class="line"></span><br><span class="line">    PageUtils pageUtil = <span class="keyword">new</span> PageUtils(menuList, total, query.getLimit(), query.getPage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">"page"</span>, pageUtil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="日志拦截器"><a href="#日志拦截器" class="headerlink" title="日志拦截器"></a>日志拦截器</h6><p>为了方便开发调试需要日志拦截器。（登录拦截和权限拦截已在 shiro 实现，日志拦截器只做控制台输出日志，不做任何拦截处理。）输出打印除/statics/<em>*、</em>.html、*.js 以外的所有请求。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为了加载拦截器 需要 日志拦截器 （登录拦截和权限拦截已在shiro实现，看实现 情况处理） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean class="com.platform.interceptor.LogInterceptor"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/statics/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/**.html"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/**.js"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.platform.interceptor.LogInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>实现类<br>在preHandle 记录本次请求的时间，在afterCompletion 中取出，然后对比当前时间，即可计算出本次请求的耗时。<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> LogInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private static final <span class="keyword">Log</span> <span class="keyword">log</span> = LogFactory.getLog(LogInterceptor.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">boolean</span> preHandle(HttpServletRequest request, HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        request.setAttribute("REQUEST_START_TIME", <span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> postHandle(HttpServletRequest request, HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>,</span><br><span class="line">                           ModelAndView modelAndView) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> afterCompletion(HttpServletRequest request,</span><br><span class="line">                                HttpServletResponse response, <span class="keyword">Object</span> <span class="keyword">handler</span>,</span><br><span class="line">                                <span class="keyword">Exception</span> ex)</span><br><span class="line">            throws <span class="keyword">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> start = (<span class="type">Date</span>) request.getAttribute("REQUEST_START_TIME");</span><br><span class="line">        <span class="type">Date</span> end = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">log</span>.<span class="keyword">info</span>("本次请求耗时：" + (<span class="keyword">end</span>.getTime() - <span class="keyword">start</span>.getTime()) + "毫秒；" + getRequestInfo(request).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> afterConcurrentHandlingStarted(HttpServletRequest request,</span><br><span class="line">                                               HttpServletResponse response,</span><br><span class="line">                                               <span class="keyword">Object</span> <span class="keyword">handler</span>)</span><br><span class="line">            throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        super.afterConcurrentHandlingStarted(request, response, <span class="keyword">handler</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要功能:获取请求详细信息</span></span><br><span class="line"><span class="comment">     * 注意事项:无</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param request 请求</span></span><br><span class="line"><span class="comment">     * @return 请求信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private StringBuilder getRequestInfo(HttpServletRequest request) &#123;</span><br><span class="line">        StringBuilder reqInfo = <span class="built_in">new</span> StringBuilder();</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="built_in">new</span> UrlPathHelper();</span><br><span class="line">        String urlPath = urlPathHelper.getLookupPathForRequest(request);</span><br><span class="line">        reqInfo.append(" 请求路径=" + urlPath);</span><br><span class="line">        reqInfo.append(" 来源IP=" + RequestUtil.getIpAddrByRequest(request));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String userName = "";</span><br><span class="line">        try &#123;</span><br><span class="line">            SysUserEntity sysUser = (SysUserEntity) SecurityUtils.getSubject().getSession().getAttribute(<span class="keyword">Constant</span>.<span class="built_in">CURRENT_USER</span>);</span><br><span class="line">            <span class="keyword">if</span> (sysUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                userName = (sysUser.getUsername());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        reqInfo.append(" 操作人=" + (userName));</span><br><span class="line">        reqInfo.append(" 请求参数=" + RequestUtil.getParameters(request).toString());</span><br><span class="line">        <span class="keyword">return</span> reqInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h6><p>系统日志是通过 Spring AOP 实现的，我们自定义了注解@SysLog，此注解只能用于方法上。 </p>
<ul>
<li><p>定义注解 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "操作日志"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysLogAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService sysLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.platform.annotation.SysLog)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 连接点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"logPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSysLog</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        SysLogEntity sysLog = <span class="keyword">new</span> SysLogEntity();</span><br><span class="line">        SysLog syslog = method.getAnnotation(SysLog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (syslog != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//注解上的描述</span></span><br><span class="line">            sysLog.setOperation(syslog.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求的方法名</span></span><br><span class="line">        String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName = signature.getName();</span><br><span class="line">        sysLog.setMethod(className + <span class="string">"."</span> + methodName + <span class="string">"()"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String params = JSON.toJSONString(args[<span class="number">0</span>]);</span><br><span class="line">        sysLog.setParams(params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取request</span></span><br><span class="line">        HttpServletRequest request = HttpContextUtils.getHttpServletRequest();</span><br><span class="line">        <span class="comment">//设置IP地址</span></span><br><span class="line">        sysLog.setIp(IPUtils.getIpAddr(request));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        SysUserEntity sysUserEntity = ShiroUtils.getUserEntity();</span><br><span class="line">        String username = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"login"</span>.equals(methodName)) &#123;</span><br><span class="line">            username = params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != sysUserEntity) &#123;</span><br><span class="line">            username = ShiroUtils.getUserEntity().getUsername();</span><br><span class="line">        &#125;</span><br><span class="line">        sysLog.setUsername(username);</span><br><span class="line"></span><br><span class="line">        sysLog.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//保存系统日志</span></span><br><span class="line">        sysLogService.save(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 保存</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@SysLog</span>(<span class="string">"保存菜单"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:menu:save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(@RequestBody SysMenuEntity menu)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据校验</span></span><br><span class="line">    verifyForm(menu);</span><br><span class="line"></span><br><span class="line">    sysMenuService.save(menu);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h6></li>
<li><p>后台异常处理<br>本项目通过 RRException 异常类，抛出自定义异常，RRException 继承 RuntimeException，不能继承 Exception，如果继承 Exception，则 Spring 事务不会回滚。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RRException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg, e);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, <span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RRException</span><span class="params">(String msg, <span class="keyword">int</span> code, Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg, e);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们定义了 RRExceptionHandler 类，并加上注解@RestControllerAdvice，就可以处理所有抛出的异常，并返回 JSON 数据。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span>(value = &#123;<span class="string">"com.platform"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RRExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RRException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">R</span> <span class="title">handleRRException</span>(<span class="title">RRException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.put(<span class="string">"code"</span>, e.getCode());</span><br><span class="line">        r.put(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(DuplicateKeyException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">R</span> <span class="title">handleDuplicateKeyException</span>(<span class="title">DuplicateKeyException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"数据库中已存在该记录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AuthorizationException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">R</span> <span class="title">handleAuthorizationException</span>(<span class="title">AuthorizationException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">R</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ApiRRException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">handleApiRRException</span>(<span class="title">ApiRRException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        HashMap result = <span class="keyword">new</span> HashMap();</span><br><span class="line">        result.put(<span class="string">"errno"</span>, e.getErrno());</span><br><span class="line">        result.put(<span class="string">"errmsg"</span>, e.getErrmsg());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端统一异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> Ajax.request(&#123;</span></span><br><span class="line"><span class="comment">        url: '', //访问路径</span></span><br><span class="line"><span class="comment">        dataType: 'json', //访问类型 'json','html'等</span></span><br><span class="line"><span class="comment">        params: getJson(form),</span></span><br><span class="line"><span class="comment">        resultMsg: true, false, //是否需要提示信息</span></span><br><span class="line"><span class="comment">        type: 'GET',//,'get','post'</span></span><br><span class="line"><span class="comment">        beforeSubmit: function (data) &#123;&#125;,//提交前处理</span></span><br><span class="line"><span class="comment">        successCallback: function (data) &#123;&#125; //提交后处理</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Ajax = function () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//var opt = &#123; type:'GET',dataType:'json',resultMsg:true &#125;;</span></span><br><span class="line">    <span class="function">function <span class="title">request</span><span class="params">(opt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加遮罩层</span></span><br><span class="line">        dialogLoading(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeof opt.cache == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.cache = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeof opt == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//opt = $.extend(opt, p);</span></span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.type) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.type = <span class="string">'GET'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.async) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.async = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.dataType) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.dataType = <span class="string">'json'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.contentType) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.contentType = <span class="string">'application/x-www-form-urlencoded;chartset=UTF-8'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.params) == <span class="string">'undefined'</span> || opt.params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            opt.params = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        opt.params.date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.beforeSubmit) != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> flag = opt.beforeSubmit(opt);</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeof(opt.resultMsg) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            opt.resultMsg = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            async: opt.async,</span><br><span class="line">            url: opt.url,</span><br><span class="line">            dataType: opt.dataType,</span><br><span class="line">            contentType: opt.contentType,</span><br><span class="line">            data: opt.params,</span><br><span class="line">            crossDomain: opt.crossDomain || <span class="keyword">false</span>,</span><br><span class="line">            type: opt.type,</span><br><span class="line">            cache: opt.cache,</span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                <span class="comment">//关闭遮罩</span></span><br><span class="line">                dialogLoading(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (typeof data == <span class="string">'string'</span> &amp;&amp; data.indexOf(<span class="string">"exception"</span>) &gt; <span class="number">0</span> || typeof data.code != <span class="string">'undefined'</span> &amp;&amp; data.code != <span class="string">'0'</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> result = &#123;code: <span class="keyword">null</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span> (typeof data == <span class="string">'string'</span>) &#123;</span><br><span class="line">                        result = eval(<span class="string">'('</span> + data + <span class="string">')'</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof data == <span class="string">'object'</span>) &#123;</span><br><span class="line">                        result = data;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (opt.resultMsg &amp;&amp; result.msg) &#123;</span><br><span class="line">                        layer.alert(result.msg, &#123;icon: <span class="number">5</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (opt.resultMsg &amp;&amp; data.msg) &#123;</span><br><span class="line">                    layer.alert(data.msg, &#123;icon: <span class="number">6</span>&#125;, function () &#123;</span><br><span class="line">                        <span class="keyword">if</span> (typeof(opt.successCallback) != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                            opt.successCallback(data);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (typeof(opt.successCallback) != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    opt.successCallback(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function () &#123;</span><br><span class="line">                <span class="comment">//关闭遮罩</span></span><br><span class="line">                dialogLoading(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                layer.alert(<span class="string">"此页面发生未知异常,请联系管理员"</span>, &#123;icon: <span class="number">5</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Ajax调用request</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        request: request</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>后台抛出未知异常，进入 error，提示此页面发生未知异常，请联系管理员。当后台抛出自定义异常，由 RRExceptionHandler类捕获，返回异常信息 Json 数据。 </p>
</li>
</ul>
<h6 id="云存储模块"><a href="#云存储模块" class="headerlink" title="云存储模块"></a>云存储模块</h6><p>图片、文件上传，使用的是七牛、阿里云、腾讯云的存储服务，不能上传到本地服务器。上传到本地服务器，不利于维护，访问速度慢、占用服务器带宽等缺点，所以推荐使用云存储服务。<br>由于没有购买云存储服务器，所以我采用本地服务器。用nginx做代理。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  <span class="number">47</span>.<span class="number">113</span>.<span class="number">108</span>.xxx;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">alias</span>  /data/images/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h3><h4 id="代码审核与发布"><a href="#代码审核与发布" class="headerlink" title="代码审核与发布"></a>代码审核与发布</h4><p>微信开发工具 点击上传<br><img src="01.jpg" alt="01"></p>
<h4 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h4><p><a href="https://mp.weixin.qq.com/wxamp/wacodepage/getcodepage?token=625584081&lang=zh_CN" target="_blank" rel="noopener">版本管理</a>, 小程序一般审核需要1到3天<br><img src="02.jpg" alt="02"></p>
<h4 id="代码发布"><a href="#代码发布" class="headerlink" title="代码发布"></a>代码发布</h4><p>代码审核通过，需要开发者手动点击发布，小程序才会发布到线上提供服务。<br><img src="03.jpg" alt="03"></p>
<h3 id="生产环境部署"><a href="#生产环境部署" class="headerlink" title="生产环境部署"></a>生产环境部署</h3><ul>
<li><p>maven 打包</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">mvn <span class="keyword">package</span> <span class="title">-P prod</span></span><br></pre></td></tr></table></figure></li>
<li><p>拷贝 platform-framework.war 到云服务器 Tomcat 的 webapps 目录下。 </p>
</li>
<li><p>启动 Tomcat</p>
</li>
</ul>
<h3 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h3><ul>
<li><a href="https://blog.csdn.net/u010590120/article/details/94736800" target="_blank" rel="noopener">Centos7-JDK安装</a></li>
<li><a href="http://localhost:4000/2020/06/16/Centos7-Redis%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">Centos7-Redis安装</a></li>
<li><a href="http://localhost:4000/2020/06/18/Centos7-Nginx%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">Centos7-Nginx安装</a></li>
<li><a href="http://localhost:4000/2020/06/16/Centos7-Mysql%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">Centos7-MySql安装</a></li>
</ul>
<p>测试服务器配置：1核心2G 40G<br><img src="04.jpg" alt="04"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security学习</title>
    <url>/2020/08/27/Spring-Security%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Spring Security 学习培训<br>前言<br>本文目的是学会使用Spring Security框架在企业中应用，源码实现请参考文档学习。<br>Spring Security官网：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">https://spring.io/projects/spring-security</a><br>参考文档：<a href="https://www.docs4dev.com/docs/zh/spring-security/5.1.2.RELEASE/reference" target="_blank" rel="noopener">https://www.docs4dev.com/docs/zh/spring-security/5.1.2.RELEASE/reference</a><br>简介<br>Spring Security是 Spring 项目组中用来提供安全认证服务的框架。<br>Spring Security 为基于J2EE企业应用软件提供了全面安全服务。特别是使用领先的J2EE解决方案-Spring框架开发的企业软件项目。<br>–概述来源百度百科</p>
<p> spring security 的核心功能主要包括：认证和授权<br>其核心就是一组过滤器链，项目启动后将会自动配置。<br>最核心的就是 Basic Authentication Filter 用来认证用户的身份，在spring security中一种过滤器处理一种认证方式。</p>
<p>认证与授权<br>什么是用户身份认证？<br>用户身份认证即用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问。<br>什么是用户授权？<br>用户认证通过后去访问系统的资源，系统会判断用户是否拥有访问资源的权限，只允许访问有权限的系统资源，没有权限的资源将无法访问，这个过程叫用户授权。</p>
<p>RSA算法原理<br>参考了解一下：<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html</a><br>Oauth2<br>简介<br>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。<br>主要参考材料为：<a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">http://www.rfcreader.com/#rfc6749</a><br>授权方式<br>OAuth 2.0定义了四种授权方式。<br>1授权码模式（Authorization Code）<br>2隐式授权模式（Implicit）<br>3密码模式（Resource Owner Password Credentials）<br>4客户端模式（Client Credentials）<br>名词定义<br>（1）Third-party application：第三方应用程序，又称”客户端”（client）<br>（2）HTTP service：HTTP服务提供商，简称”服务提供商”<br>（3）Resource Owner：资源所有者,（ “用户”（user））<br>（4）User Agent：用户代理，一般指浏览器。<br>（5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。<br>（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。<br>运行流程<br>OAuth 2.0的运行流程如下图，摘自RFC 6749。</p>
<p>（A）用户打开客户端以后，客户端要求用户给予授权。</p>
<p>（B）用户同意给予客户端授权。</p>
<p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p>
<p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p>
<p>（E）客户端使用令牌，向资源服务器申请获取资源。</p>
<p>（F）资源服务器确认令牌无误，同意向客户端开放资源。<br>解决方案<br> 1、用户请求认证服务完成认证。<br>2、认证服务下发用户身份令牌，拥有身份令牌表示身份合法。<br>3、用户携带令牌请求资源服务，请求资源服务必先经过网关。<br>4、网关校验用户身份令牌的合法，不合法表示用户没有登录，如果合法则放行继续访问。<br>5、资源服务获取令牌，根据令牌完成授权。<br>6、资源服务完成授权则响应资源信息。<br>密码模式<br>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</p>
<p>（A）用户向客户端提供用户名和密码。<br>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。<br>（C）认证服务器确认无误后，向客户端提供访问令牌。</p>
<p>B步骤中，客户端发出的HTTP请求，包含以下参数：<br>grant_type：表示授权类型，此处的值固定为”password”，必选项。<br>username：表示用户名，必选项。<br>password：表示用户的密码，必选项。<br>scope：表示权限范围，可选项。</p>
<p>密码模式（Resource Owner Password Credentials）通过用户名和密码即可申请令牌。<br>测试如下：<br>Post请求：<a href="http://localhost:40400/auth/oauth/token" target="_blank" rel="noopener">http://localhost:40400/auth/oauth/token</a><br>参数：<br>grant_type：密码模式授权填写password<br>username：账号<br>password：密码<br>此链接需要使用 http Basic认证。</p>
<p>服务授权<br>资源服务拥有要访问的受保护资源，客户端携带令牌访问资源服务，如果令牌合法则可成功访问资源服务中的资<br>源，如下图：</p>
<p>1 、客户端请求认证服务申请令牌<br>2、认证服务生成令牌<br>认证服务采用非对称加密算法，使用私钥生成令牌。<br>3、客户端携带令牌访问资源服务<br>客户端在Http header 中添加： Authorization：Bearer 令牌。<br>4、资源服务请求认证服务校验令牌的有效性<br>资源服务接收到令牌，使用公钥校验令牌的合法性。<br>5、令牌有效，资源服务向客户端响应资源信息<br>JWT<br>什么是JWT<br>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。<br>官网：<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a><br>标准： <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7519</a><br>JWT的优点<br>1、jwt基于json，非常方便解析。<br>2、可以在令牌中自定义丰富的内容，易扩展。<br>3、通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。<br>4、资源服务使用JWT可不依赖认证服务即可完成授权。<br>JWT使用思路<br>用户认证通过会得到一个JWT令牌，JWT令牌中已经包括了用户相关的信息，客户端只需要携带JWT访问资源服务，资源服务根据事先约定的算法自行完成令牌校验，无需每次都请求认证服务完成授权。</p>
<p>JWT令牌结构<br>JWT令牌由三部分组成，每部分中间使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz</p>
<p>Header<br>头部包括令牌的类型（即JWT）及使用的哈希算法（如HMAC SHA256或RSA）<br>例子如下：下边是Header部分的内容<br>{<br>  “alg”: “HS256”,<br>  “typ”: “JWT”<br>}<br>将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分。</p>
<p>Payload<br>第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。<br>最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。<br>一个例子：<br>{<br>  “sub”: “1234567890”,<br>  “name”: “456”,<br>  “admin”: true<br>}</p>
<p>Signature<br>第三部分是签名，此部分用于防止jwt内容被篡改。<br>这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明<br>签名算法进行签名。<br>一个例子：<br>HMACSHA256(<br>  base64UrlEncode(header) + “.” +<br>  base64UrlEncode(payload),<br>  secret)<br>base64UrlEncode(header) ：jwt令牌的第一部分。<br>base64UrlEncode(payload)：jwt令牌的第二部分。<br>secret：签名所使用的密钥。<br>私钥和公钥<br>RSA算法原理参考：<br><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html</a><br>生成证书<br>JDK中keytool是一个证书管理工具，可以生成自签名证书。 就是自己生成的证书，并不是官方生成的证书。除非是很正式的项目，否则使用自己签发的证书即可，因为官方生成证书是要花钱滴。</p>
<p>下边命令生成密钥证书，采用RSA 算法，每个证书包含公钥和私钥<br>keytool -genkeypair -alias xckey -keyalg RSA -keypass xuecheng -keystore xc.keystore -storepass xuechengkeystore<br>-alias：密钥的别名<br>-keyalg：使用的hash算法<br>-keypass：密钥的访问密码<br>-keystore：密钥库文件名，xc.keystore保存了生成的证书<br>-storepass：密钥库的访问密码</p>
<p>查询证书信息：<br>keytool -list -keystore xc.keystore</p>
<p>导出公钥<br>openssl是一个加解密工具包，这里使用openssl来导出公钥信息。<br>安装 openssl<br><a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">http://slproweb.com/products/Win32OpenSSL.html</a><br>选择32位或者64位合适的版本下载，例如Win64OpenSSL_Light-1_0_2h.exe：<br>配置openssl的path环境变量，本教程配置在C:\Program Files\OpenSSL-Win64\bin<br>cmd进入xc.keystore文件所在目录执行如下命令：<br>keytool ‐list ‐rfc ‐‐keystore xc.keystore | openssl x509 ‐inform pem ‐pubkey</p>
<p>—–BEGIN PUBLIC KEY—–<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnASXh9oSvLRLxk901HAN<br>YM6KcYMzX8vFPnH/To2R+SrUVw1O9rEX6m1+rIaMzrEKPm12qPjVq3HMXDbRdUaJ<br>EXsB7NgGrAhepYAdJnYMizdltLdGsbfyjITUCOvzZ/QgM1M4INPMD+Ce859xse06<br>jnOkCUzinZmasxrmgNV3Db1GtpyHIiGVUY0lSO1Frr9m5dpemylaT0BV3UwTQWVW<br>9ljm6yR3dBncOdDENumT5tGbaDVyClV0FEB1XdSKd7VjiDCDbUAUbDTG1fm3K9sx<br>7kO1uMGElbXLgMfboJ963HEJcU01km7BmFntqI5liyKheX+HBUCD4zbYNPw236U+<br>7QIDAQAB<br>—–END PUBLIC KEY—–</p>
<p>生成jwt令牌测试<br>在认证工程创建测试类，测试jwt令牌的创建与验证。</p>
<p>{access_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55SWQiOiIxIiwidXNlcnBpYyI6bnVsbCwidXNlcl9uYW1lIjoiaXRjYXN0Iiwic2NvcGUiOlsiYXBwIl0sIm5hbWUiOiJ0ZXN0MDIiLCJ1dHlwZSI6IjEwMTAwMiIsImlkIjoiNDkiLCJleHAiOjE1OTgzNzYxNzAsImF1dGhvcml0aWVzIjpbInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfYmFzZSIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfZGVsIiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZV9saXN0IiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZV9wbGFuIiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZSIsImNvdXJzZV9maW5kX2xpc3QiLCJ4Y190ZWFjaG1hbmFnZXIiLCJ4Y190ZWFjaG1hbmFnZXJfY291cnNlX21hcmtldCIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfcHVibGlzaCIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfYWRkIl0sImp0aSI6IjNhYWI2NzUwLTM2MTQtNDIxNS04ZTRmLTZiN2MyNzIzYzJmMyIsImNsaWVudF9pZCI6IlhjV2ViQXBwIn0.BEFZsGwrIjIZR_RmV4bB9ER2r6AQlhjhKDOk7Q2kAyVaL9oId3O3Mqb5DCZNCLsUC31WrGmUXKi4IWrTHm7uGue_PwxVcDBPdx_bNVnotFlrG9GI5nBrtDdVfwMLkv8GpsBFXSoVF4avrkowp1UBZyAFLHtvPTmAaPW5yn94Th19sIPck_0p107MqEj5E8VvSH9P8ciLBk2DbRs0RvO8cM_x-toKjcUKVFdzGGIi0TWY3l6Z33DBe9mgt4DRi-TXYQTSQ4Ec-mdyOUNeWRIACQ77jASUTRvGPF3fMOOo5NhSwTZvgMSQdHikNqOjUbdnM2N6uJKm9Q4oezp7SEx8sQ, token_type=bearer, refresh_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55SWQiOiIxIiwidXNlcnBpYyI6bnVsbCwidXNlcl9uYW1lIjoiaXRjYXN0Iiwic2NvcGUiOlsiYXBwIl0sImF0aSI6IjNhYWI2NzUwLTM2MTQtNDIxNS04ZTRmLTZiN2MyNzIzYzJmMyIsIm5hbWUiOiJ0ZXN0MDIiLCJ1dHlwZSI6IjEwMTAwMiIsImlkIjoiNDkiLCJleHAiOjE1OTgzNzYxNzAsImF1dGhvcml0aWVzIjpbInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfYmFzZSIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfZGVsIiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZV9saXN0IiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZV9wbGFuIiwieGNfdGVhY2htYW5hZ2VyX2NvdXJzZSIsImNvdXJzZV9maW5kX2xpc3QiLCJ4Y190ZWFjaG1hbmFnZXIiLCJ4Y190ZWFjaG1hbmFnZXJfY291cnNlX21hcmtldCIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfcHVibGlzaCIsInhjX3RlYWNobWFuYWdlcl9jb3Vyc2VfYWRkIl0sImp0aSI6IjM0ZmYyYTE5LTQ1MGUtNDE5YS1hMTQwLTM4OGRiNDdmZDNkMiIsImNsaWVudF9pZCI6IlhjV2ViQXBwIn0.KdhcvUXbW3dN0FwpmwDJz2dy-BUBkaHCivFa6x0ZnYDEDCqjy1qSxweqX-RvAuLH5kXbCjRg1Qh9lEeFs3Ba6PrY9REZMBYJa2ojHIK1eSo0tVP4BZ65-LrzgJcuvS-MkC_Hsos1axkcXGAA1gnNQV8l2PZuevBQjas7CJREUdBzorX33BAg8b4sMcU6E9kAD_nM4elgAKgZSfMcE2ZIztMo2w4gwo3rPyaEfGGfq0nsrRd0ugGkLhHU0Hzpncsno0vJw7DuH_u08NAUv2BiY80vuwGs5K918v8VQrclvxweeFSKszf-I0-39idYngqqoycE_ihCpe-DS6ghDBNB0w, expires_in=43199, scope=app, jti=3aab6750-3614-4215-8e4f-6b7c2723c2f3}</p>
<p>测试学习案例<br>实现一个简单的权限管理系统。权限管理核心就是两方面：认证和授权。下面来演示一下认证的过程。<br>创建项目</p>
<p>使用Spring Security Httpbasic模式</p>
<ol>
<li><p>新建IndexController.java</p>
</li>
<li><p>新建页面</p>
</li>
</ol>
<p>3．启动运行项目后，可以在控制台看到输出的密码，我们首先复制这个密码:<br> 使用浏览器访问localhost:8080会弹出一个登录框，这个登录框不是我们编码实现的，是由SpringSecurity来实现。</p>
<p>4．在登陆页面的Username中输入user，在Password中把刚刚在控制台复制的密码粘贴，点击Sign in，就可以成功访问到页面。</p>
<p>使用    Spring Securit FormLogin模式<br>1．    login.html</p>
<p>2.创建一个继承WebSecurityConfigurerAdapter的SecurityConfig类，重写configure(HttpSecurity http) 方法，用来配置登录验证逻辑。</p>
<ol start="3">
<li>这里我们采用内存中身份认证的方法，在SecurityConfig类重写configure(AuthenticationManagerBuilder auth)方法，增加user和admin两个用户的配置.</li>
</ol>
<ol start="4">
<li>配置数据源</li>
</ol>
<p>5．访问localhost:8080，跳转到login.html页面</p>
<p>6．验证<br>用户admin登录，所有菜单权限<br>用户user登录后，只有订单权限</p>
<p>基于MySQL数据库的认证和授权<br>实现思路：非常简单，我们只需实现一个自定义的UserDetailsService即可。<br>UserDetailsService仅定义了一个loadUserByUsername方法，用于获取一个UserDetails对象。UserDetails对象包含了一系列在验证时会用到的信息，包括用户名、密码、权限以及其他信息，Spring Security会根据这些信息判定验证是否成功。</p>
<ol>
<li>建表<br>CREATE TABLE <code>users</code> (<br><code>user_id</code> BIGINT NOT NULL AUTO_INCREMENT,<br><code>user_name</code> VARCHAR(30) COLLATE utf8mb4_general_ci NOT NULL, <code>password</code> VARCHAR(100) COLLATE utf8mb4_general_ci DEFAULT NULL, <code>status</code> CHAR(1) COLLATE utf8mb4_general_ci NOT NULL DEFAULT ‘0’ COMMENT ‘0正常1停用’,<br><code>roles</code> VARCHAR(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT ‘多个角色用逗号间隔’, PRIMARY KEY (<code>user_id</code>)) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</li>
</ol>
<p>– —————————— Records of users– —————————-INSERT INTO <code>users</code> VALUES (‘1’, ‘admin’, ‘$2a$10$nNQI9Ij1rU5NG9JFLQphweTOteCX6O211Nysrg2V5rRSGDRmRWtm.’, ‘0’, ‘ROLE_ADMIN,ROLE_USER’);<br>INSERT INTO <code>users</code> VALUES (‘2’, ‘user’, ‘$2a$10$nNQI9Ij1rU5NG9JFLQphweTOteCX6O211Nysrg2V5rRSGDRmRWtm.’, ‘0’, ‘ROLE_USER’);<br>INSERT INTO <code>users</code> VALUES (‘3’, ‘alex’, ‘$2a$10$nNQI9Ij1rU5NG9JFLQphweTOteCX6O211Nysrg2V5rRSGDRmRWtm.’, ‘0’, ‘ROLE_ADMIN,ROLE_USER’);    </p>
<ol start="2">
<li><p>在pom.xml中配置MySQL数据库以及Spring data jpa</p>
</li>
<li><p>在application.yml中配置数据库来连接参数</p>
</li>
<li><p>构建Users实体，Users实体实现UserDetails接口，实现UserDetails定义的几个方法</p>
</li>
<li><p>编写接口UserDAO，继承JpaRepository&lt;T, ID&gt;</p>
</li>
<li><p>我们需要根据输入用户名在数据库中查询User数据，然后和输入的密码作比较，现在我们来实现根据用户名查找User数据的代码，新增UserService以及它的实现类。</p>
</li>
<li><p>实现UserDetailService逻辑</p>
</li>
<li><p>修改SecurityConfig文件，将之前的内容认证方式注销掉，使用UserDetailService逻辑来实现登录逻辑认证。</p>
</li>
<li><p>启动运行</p>
</li>
</ol>
<p>学成项目案例<br>登录流程</p>
<p>执行流程：<br>1、用户登录，请求认证服务<br>2、认证服务认证通过，生成jwt令牌，将jwt令牌及相关信息写入Redis，并且将身份令牌写入cookie<br>3、用户访问资源页面，带着cookie到网关<br>4、网关从cookie获取token，并查询Redis校验token,如果token不存在则拒绝访问，否则放行<br>5、用户退出，请求认证服务，清除redis中的token，并且删除cookie中的token</p>
<p>使用redis存储用户的身份令牌有以下作用：<br>1、实现用户退出注销功能，服务端清除令牌后，即使客户端请求携带token也是无效的。<br>2、由于jwt令牌过长，不宜存储在cookie中，所以将jwt令牌存储在redis，由客户端请求服务端获取并在客户端存储。<br>认证服务<br>证服务需要实现的功能如下：<br>1、登录接口<br>前端post提交账号、密码等，用户身份校验通过，生成令牌，并将令牌存储到redis。<br>将身份令牌写入cookie。<br>2、退出接口<br>校验当前用户的身份为合法并且为已登录状态。<br>将令牌从redis删除。<br>删除cookie中的令牌。</p>
<p>测试接口：<a href="http://ucenter.xuecheng.com/openapi/auth/userlogin" target="_blank" rel="noopener">http://ucenter.xuecheng.com/openapi/auth/userlogin</a></p>
<p>用户认证<br>用户认证流程图：</p>
<p>业务流程说明如下：<br>1、客户端请求认证服务进行认证。<br>2、认证服务认证通过向浏览器cookie写入token(身份令牌)<br>认证服务请求用户中心查询用户信息。<br>认证服务请求Spring Security申请令牌。<br>认证服务将token(身份令牌)和jwt令牌存储至redis中。<br>认证服务向cookie写入 token(身份令牌)。<br>3、前端携带token请求认证服务获取jwt令牌<br>前端获取到jwt令牌并存储在sessionStorage。<br>前端从jwt令牌中解析中用户信息并显示在页面。<br>4、前端携带cookie中的token身份令牌及jwt令牌访问资源服务<br>前端请求资源服务需要携带两个token，一个是cookie中的身份令牌，一个是http header中的jwt令牌<br>前端请求资源服务前在http header上添加jwt请求资源<br>5、网关校验token的合法性<br>用户请求必须携带 token身份令牌和jwt令牌<br>网关校验redis中token是否合法，已过期则要求用户重新登录<br>6、资源服务校验jwt的合法性并完成授权<br>资源服务校验jwt令牌，完成授权，拥有权限的方法正常执行，没有权限的方法将拒绝访问。</p>
<p>前端显示当前用户<br>用户登录成功在页头显示当前登录的用户名称。</p>
<p>1、用户请求认证服务，登录成功。<br>2、用户登录成功，认证服务向cookie写入身份令牌，向redis写入user_token（身份令牌及授权jwt授权令牌）<br>3、客户端携带cookie中的身份令牌请求认证服务获取jwt令牌。<br>4、客户端解析jwt令牌，并将解析的用户信息存储到sessionStorage中。<br>jwt令牌中包括了用户的基本信息，客户端解析jwt令牌即可获取用户信息。<br>5、客户端从sessionStorage中读取用户信息，并在页头显示。</p>
<p>客户端解析jwt令牌测试地址：<a href="http://ucenter.xuecheng.com/openapi/auth/userjwt" target="_blank" rel="noopener">http://ucenter.xuecheng.com/openapi/auth/userjwt</a></p>
<p>用户退出<br>用户退出要以下动作：<br>1、删除redis中的token<br>2、删除cookie中的token</p>
<p>用户授权业务流程</p>
<p>业务流程说明如下：<br>1、用户认证通过，认证服务向浏览器cookie写入token（ 身份令牌）<br>2、前端携带token请求用户中心服务获取jwt令牌前端获取到jwt令牌解析，并存储在sessionStorage<br>3、前端携带cookie中的身份令牌及jwt令牌访问资源服务前端请求资源服务需要携带两个token，一个是cookie中的身份令牌，一个是http header中的jwt前端请求资源服务前在http header上添加jwt请求资源<br>4、网关校验token的合法性用户请求必须携带身份令牌和jwt令牌，网关校验redis中user_token的有效期，已过期则要求用户重新登录<br>5、资源服务校验jwt的合法性并进行授权<br>资源服务校验jwt令牌，完成授权，拥有权限的方法正常执行，没有权限的方法将拒绝访问。<br>方法授权<br>方法授权要完成的是资源服务根据jwt令牌完成对方法的授权，具体流程如下：<br>1、生成Jwt令牌时在令牌中写入用户所拥有的权限<br>我们给每个权限起个名字，例如某个用户拥有如下权限：<br>course_find_list：课程查询<br>course_pic_list：课程图片查询</p>
<p>2、在资源服务方法上添加注解PreAuthorize，并指定此方法所需要的权限<br>例如下边是课程管理接口方法的授权配置，它就表示要执行这个方法需要拥有course_find_list权限。<br>3、当请求有权限的方法时正常访问<br>4、当请求没有权限的方法时则拒绝访问<br>jwt 令牌包含权限<br>{“companyId”:null,”userpic”:null,”user_name”:”mrt”,”scope”:[“app”],”name”:”教学管理<br>员”,”utype”:”101002”,”id”:”49”,”exp”:1527202013,”authorities”:<br>[“course_find_pic”,”course_get_baseinfo”],”jti”:”9360fa85‐c1b4‐428a‐80ec‐<br>b2e705a02827”,”client_id”:”XcWebApp”}<br>可以看到authorities属性中为用户的权限</p>
<p>方法授权测试</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-购物车</title>
    <url>/2020/06/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>本项目是仿网易严选开源平台（此为免费版），前端使用Vue+iView, 后台使用Spring+SpringMVC+Mybatis+Shiro+J2Cache框架，这里只列出关键代码，有兴趣可以下载源码来研究。</code></p>
<a id="more"></a>

<h3 id="查询商品"><a href="#查询商品" class="headerlink" title="查询商品"></a>查询商品</h3><ul>
<li>先添加一个商品到购物车里，如下图，点击 分类 -&gt; 居家 -&gt; 布艺软装<br><img src="01.jpg" alt="01"> </li>
</ul>
<h4 id="前台实现"><a href="#前台实现" class="headerlink" title="前台实现"></a>前台实现</h4><h5 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pagePath"</span>: <span class="string">"pages/catalog/catalog"</span>,</span><br><span class="line">  <span class="attr">"iconPath"</span>: <span class="string">"static/images/ic_menu_sort_nor.png"</span>,</span><br><span class="line">  <span class="attr">"selectedIconPath"</span>: <span class="string">"static/images/ic_menu_sort_pressed.png"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"分类"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h5 id="catalog-wxml"><a href="#catalog-wxml" class="headerlink" title="catalog.wxml"></a>catalog.wxml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/search/search"</span> <span class="attr">class</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>商品搜索, 共&#123;&#123;goodsCount&#125;&#125;款好物<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"catalog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"nav"</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123; currentCategory.id == item.id ? 'active' : ''&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;navList&#125;&#125;"</span>  <span class="attr">data-id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"switchCate"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"cate"</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"url"</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;currentCategory.wap_banner_url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>&#123;&#123;currentCategory.front_name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>&#123;&#123;currentCategory.name&#125;&#125;分类<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/pages/category/category?id=&#123;&#123;item.id&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123;(index+1) % 3 == 0 ? 'last' : ''&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;currentCategory.subCategoryList&#125;&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.wap_banner_url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="catalog-js"><a href="#catalog-js" class="headerlink" title="catalog.js"></a>catalog.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>);</span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'../../config/api.js'</span>);</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    navList: [],</span><br><span class="line">    categoryList: [],</span><br><span class="line">    currentCategory: &#123;&#125;,</span><br><span class="line">    scrollLeft: <span class="number">0</span>,</span><br><span class="line">    scrollTop: <span class="number">0</span>,</span><br><span class="line">    goodsCount: <span class="number">0</span>,</span><br><span class="line">    scrollHeight: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 页面加载完后调用</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getCatalog();</span><br><span class="line">  &#125;,</span><br><span class="line">  getCatalog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//CatalogList</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'加载中...'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取分类栏目数据</span></span><br><span class="line">    util.request(api.CatalogList).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          navList: res.data.categoryList,</span><br><span class="line">          currentCategory: res.data.currentCategory</span><br><span class="line">        &#125;);</span><br><span class="line">        wx.hideLoading();</span><br><span class="line">      &#125;);</span><br><span class="line">    util.request(api.GoodsCount).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        goodsCount: res.data.goodsCount</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  getCurrentCategory: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    util.request(api.CatalogCurrent, &#123; <span class="attr">id</span>: id &#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          currentCategory: res.data.currentCategory</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面关闭</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getList: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    util.request(api.ApiRootUrl + <span class="string">'api/catalog/'</span> + that.data.currentCategory.cat_id)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          categoryList: res.data,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 切换类别时触发事件</span></span><br><span class="line">  switchCate: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> currentTarget = event.currentTarget;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.currentCategory.id == event.currentTarget.dataset.id) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.getCurrentCategory(event.currentTarget.dataset.id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="config-api"><a href="#config-api" class="headerlink" title="config/api"></a>config/api</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> API_BASE_URL = <span class="string">'http://localhost:8080/platform-framework/api/'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  CatalogList: API_BASE_URL + <span class="string">'catalog/index'</span>,  <span class="comment">//分类目录全部分类数据接口</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h4><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><p>ApiCatalogController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取分类栏目数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取分类栏目数据"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;<span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"id"</span>, paramType = <span class="string">"query"</span>, required = <span class="keyword">false</span>),</span><br><span class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"page"</span>, value = <span class="string">"page"</span>, paramType = <span class="string">"query"</span>, required = <span class="keyword">false</span>),</span><br><span class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"size"</span>, value = <span class="string">"size"</span>, paramType = <span class="string">"query"</span>, required = <span class="keyword">false</span>)&#125;)</span><br><span class="line"><span class="meta">@IgnoreAuth</span></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">(Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer page,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"10"</span>)</span> Integer size) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; resultObj = <span class="keyword">new</span> HashMap();</span><br><span class="line">    Map params = <span class="keyword">new</span> HashMap();</span><br><span class="line">    params.put(<span class="string">"page"</span>, page);</span><br><span class="line">    params.put(<span class="string">"limit"</span>, size);</span><br><span class="line">    params.put(<span class="string">"sidx"</span>, <span class="string">"sort_order"</span>);</span><br><span class="line">    params.put(<span class="string">"order"</span>, <span class="string">"asc"</span>);</span><br><span class="line">    params.put(<span class="string">"parent_id"</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//查询列表数据</span></span><br><span class="line">    List&lt;CategoryVo&gt; data = categoryService.queryList(params);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    CategoryVo currentCategory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != id) &#123;</span><br><span class="line">        currentCategory = categoryService.queryObject(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == currentCategory &amp;&amp; <span class="keyword">null</span> != data &amp;&amp; data.size() != <span class="number">0</span>) &#123;</span><br><span class="line">        currentCategory = data.get(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentCategory = <span class="keyword">new</span> CategoryVo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取子分类数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != currentCategory &amp;&amp; <span class="keyword">null</span> != currentCategory.getId()) &#123;</span><br><span class="line">        params.put(<span class="string">"parent_id"</span>, currentCategory.getId());</span><br><span class="line">        currentCategory.setSubCategoryList(categoryService.queryList(params));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resultObj.put(<span class="string">"categoryList"</span>, data);</span><br><span class="line">    resultObj.put(<span class="string">"currentCategory"</span>, currentCategory);</span><br><span class="line">    <span class="keyword">return</span> toResponsSuccess(resultObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>ApiCategoryService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CategoryVo&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> categoryDao.queryList(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;T&gt; <span class="title">queryList</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryList"</span> <span class="attr">resultType</span>=<span class="string">"com.platform.entity.CategoryEntity"</span>&gt;</span></span><br><span class="line">		select</span><br><span class="line">    		`id`,</span><br><span class="line">    		`name`,</span><br><span class="line">    		`keywords`,</span><br><span class="line">    		`front_desc`,</span><br><span class="line">    		`parent_id`,</span><br><span class="line">    		`sort_order`,</span><br><span class="line">    		`show_index`,</span><br><span class="line">    		`is_show`,</span><br><span class="line">    		`banner_url`,</span><br><span class="line">    		`icon_url`,</span><br><span class="line">    		`img_url`,</span><br><span class="line">    		`wap_banner_url`,</span><br><span class="line">    		`level`,</span><br><span class="line">    		`type`,</span><br><span class="line">    		`front_name`,</span><br><span class="line">			`is_show` as `show`</span><br><span class="line">		from nideshop_category</span><br><span class="line">		WHERE 1=1</span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name.trim() != ''"</span>&gt;</span></span><br><span class="line">			AND `name` LIKE concat('%',#&#123;name&#125;,'%')</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"parentId != null and parentId != ''"</span>&gt;</span></span><br><span class="line">			AND `parent_id` = #&#123;parentId&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sidx != null and sidx.trim() != ''"</span>&gt;</span></span><br><span class="line">                order by $&#123;sidx&#125; $&#123;order&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                order by id desc</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset != null and limit != null"</span>&gt;</span></span><br><span class="line">			limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="Sql"><a href="#Sql" class="headerlink" title="Sql"></a>Sql</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询商品分类</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t <span class="keyword">where</span> t.parent_id = <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> show_index <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t <span class="keyword">where</span> t.parent_id = <span class="number">1005000</span> <span class="keyword">order</span> <span class="keyword">by</span> t.show_index <span class="keyword">asc</span> ;</span><br></pre></td></tr></table></figure>
<p><img src="02.jpg" alt="02"> </p>
<h3 id="添加商品"><a href="#添加商品" class="headerlink" title="添加商品"></a>添加商品</h3><ul>
<li>进入布艺软装 种类下面，选择 简约知性系列居家地毯<br><img src="03.jpg" alt="03"><br><img src="04.jpg" alt="04"> </li>
</ul>
<h4 id="前台实现-1"><a href="#前台实现-1" class="headerlink" title="前台实现"></a>前台实现</h4><h5 id="goods-wxml"><a href="#goods-wxml" class="headerlink" title="goods.wxml"></a>goods.wxml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"bottom-btn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"l l-collect &#123;&#123; openAttr ? 'back' : ''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"closeAttrOrCollect"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; collectBackImage &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"l l-cart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"cart-count"</span>&gt;</span>&#123;&#123;cartGoodsCount&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">"openCartPage"</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"/static/images/ic_menu_shoping_nor.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"c"</span> <span class="attr">bindtap</span>=<span class="string">'buyGoods'</span>&gt;</span>立即购买<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"r"</span> <span class="attr">bindtap</span>=<span class="string">"addToCart"</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="goods-js"><a href="#goods-js" class="headerlink" title="goods.js"></a>goods.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加到购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addToCart: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.data.openAttr == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">//打开规格选择窗口</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      openAttr: !<span class="keyword">this</span>.data.openAttr,</span><br><span class="line">      collectBackImage: <span class="string">"/static/images/detail_back.png"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提示选择完整规格</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCheckedAllSpec()) &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">            title: <span class="string">'请选择完整规格'</span></span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据选中的规格，判断是否有对应的sku信息</span></span><br><span class="line">    <span class="keyword">let</span> checkedProduct = <span class="keyword">this</span>.getCheckedProductItem(<span class="keyword">this</span>.getCheckedSpecKey());</span><br><span class="line">    <span class="keyword">if</span> (!checkedProduct || checkedProduct.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//找不到对应的product信息，提示没有库存</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证库存</span></span><br><span class="line">    <span class="keyword">if</span> (checkedProduct.goods_number &lt; <span class="keyword">this</span>.data.number) &#123;</span><br><span class="line">      <span class="comment">//找不到对应的product信息，提示没有库存</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加到购物车</span></span><br><span class="line">    util.request(api.CartAdd, &#123; <span class="attr">goodsId</span>: <span class="keyword">this</span>.data.goods.id, <span class="attr">number</span>: <span class="keyword">this</span>.data.number, <span class="attr">productId</span>: checkedProduct[<span class="number">0</span>].id &#125;, <span class="string">'POST'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _res = res;</span><br><span class="line">        <span class="keyword">if</span> (_res.errno == <span class="number">0</span>) &#123;</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            title: <span class="string">'添加成功'</span></span><br><span class="line">          &#125;);</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            openAttr: !that.data.openAttr,</span><br><span class="line">            cartGoodsCount: _res.data.cartTotal.goodsCount</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (that.data.userHasCollect == <span class="number">1</span>) &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              <span class="string">'collectBackImage'</span>: that.data.hasCollectImage</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              <span class="string">'collectBackImage'</span>: that.data.noCollectImage</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            image: <span class="string">'/static/images/icon_error.png'</span>,</span><br><span class="line">            title: _res.errmsg,</span><br><span class="line">            mask: <span class="literal">true</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="config-api-1"><a href="#config-api-1" class="headerlink" title="config/api"></a>config/api</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> API_BASE_URL = <span class="string">'http://localhost:8080/platform-framework/api/'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  CartAdd: API_BASE_URL + <span class="string">'cart/add'</span>, <span class="comment">// 添加商品到购物车</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后台实现-1"><a href="#后台实现-1" class="headerlink" title="后台实现"></a>后台实现</h4><h5 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApiCartController</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 添加商品到购物车</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"添加商品到购物车"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">add</span><span class="params">(@LoginUser UserVo loginUser)</span> </span>&#123;</span><br><span class="line">    JSONObject jsonParam = getJsonRequest();</span><br><span class="line">    Integer goodsId = jsonParam.getInteger(<span class="string">"goodsId"</span>);</span><br><span class="line">    Integer productId = jsonParam.getInteger(<span class="string">"productId"</span>);</span><br><span class="line">    Integer number = jsonParam.getInteger(<span class="string">"number"</span>);</span><br><span class="line">    <span class="comment">//判断商品是否可以购买</span></span><br><span class="line">    GoodsVo goodsInfo = goodsService.queryObject(goodsId);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == goodsInfo || goodsInfo.getIs_delete() == <span class="number">1</span> || goodsInfo.getIs_on_sale() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toResponsObject(<span class="number">400</span>, <span class="string">"商品已下架"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取得规格的信息,判断规格库存</span></span><br><span class="line">    ProductVo productInfo = productService.queryObject(productId);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == productInfo || productInfo.getGoods_number() &lt; number) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toResponsObject(<span class="number">400</span>, <span class="string">"库存不足"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断购物车中是否存在此规格商品</span></span><br><span class="line">    Map cartParam = <span class="keyword">new</span> HashMap();</span><br><span class="line">    cartParam.put(<span class="string">"goods_id"</span>, goodsId);</span><br><span class="line">    cartParam.put(<span class="string">"product_id"</span>, productId);</span><br><span class="line">    cartParam.put(<span class="string">"user_id"</span>, loginUser.getUserId());</span><br><span class="line">    List&lt;CartVo&gt; cartInfoList = cartService.queryList(cartParam);</span><br><span class="line">    CartVo cartInfo = <span class="keyword">null</span> != cartInfoList &amp;&amp; cartInfoList.size() &gt; <span class="number">0</span> ? cartInfoList.get(<span class="number">0</span>) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == cartInfo) &#123;</span><br><span class="line">        <span class="comment">//添加操作</span></span><br><span class="line">        <span class="comment">//添加规格名和值</span></span><br><span class="line">        String[] goodsSepcifitionValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != productInfo.getGoods_specification_ids() &amp;&amp; productInfo.getGoods_specification_ids().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Map specificationParam = <span class="keyword">new</span> HashMap();</span><br><span class="line">            String[] idsArray = getSpecificationIdsArray(productInfo.getGoods_specification_ids());</span><br><span class="line">            specificationParam.put(<span class="string">"ids"</span>, idsArray);</span><br><span class="line">            specificationParam.put(<span class="string">"goods_id"</span>, goodsId);</span><br><span class="line">            List&lt;GoodsSpecificationVo&gt; specificationEntities = goodsSpecificationService.queryList(specificationParam);</span><br><span class="line">            goodsSepcifitionValue = <span class="keyword">new</span> String[specificationEntities.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; specificationEntities.size(); i++) &#123;</span><br><span class="line">                goodsSepcifitionValue[i] = specificationEntities.get(i).getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cartInfo = <span class="keyword">new</span> CartVo();</span><br><span class="line"></span><br><span class="line">        cartInfo.setGoods_id(goodsId);</span><br><span class="line">        cartInfo.setProduct_id(productId);</span><br><span class="line">        cartInfo.setGoods_sn(productInfo.getGoods_sn());</span><br><span class="line">        cartInfo.setGoods_name(goodsInfo.getName());</span><br><span class="line">        cartInfo.setList_pic_url(goodsInfo.getList_pic_url());</span><br><span class="line">        cartInfo.setNumber(number);</span><br><span class="line">        cartInfo.setSession_id(<span class="string">"1"</span>);</span><br><span class="line">        cartInfo.setUser_id(loginUser.getUserId());</span><br><span class="line">        cartInfo.setRetail_price(productInfo.getRetail_price());</span><br><span class="line">        cartInfo.setMarket_price(productInfo.getMarket_price());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != goodsSepcifitionValue) &#123;</span><br><span class="line">            cartInfo.setGoods_specifition_name_value(StringUtils.join(goodsSepcifitionValue, <span class="string">";"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        cartInfo.setGoods_specifition_ids(productInfo.getGoods_specification_ids());</span><br><span class="line">        cartInfo.setChecked(<span class="number">1</span>);</span><br><span class="line">        cartService.save(cartInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果已经存在购物车中，则数量增加</span></span><br><span class="line">        <span class="keyword">if</span> (productInfo.getGoods_number() &lt; (number + cartInfo.getNumber())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toResponsObject(<span class="number">400</span>, <span class="string">"库存不足"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cartInfo.setNumber(cartInfo.getNumber() + number);</span><br><span class="line">        cartService.update(cartInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toResponsSuccess(getCart(loginUser));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Dao-1"><a href="#Dao-1" class="headerlink" title="Dao"></a>Dao</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 查询商品信息-关联产品表</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryList"</span> <span class="attr">resultType</span>=<span class="string">"com.platform.entity.ProductEntity"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    nideshop_product.id,</span><br><span class="line">    nideshop_product.goods_id,</span><br><span class="line">    nideshop_product.goods_specification_ids,</span><br><span class="line">    nideshop_product.goods_sn,</span><br><span class="line">    nideshop_product.goods_number,</span><br><span class="line">    nideshop_product.retail_price,</span><br><span class="line">    nideshop_product.market_price,</span><br><span class="line">    nideshop_goods.name goods_name</span><br><span class="line">    from nideshop_product</span><br><span class="line">    LEFT JOIN nideshop_goods ON nideshop_product.goods_id = nideshop_goods.id</span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"goodsId != null and goodsId.trim() != ''"</span>&gt;</span></span><br><span class="line">        AND nideshop_product.goods_id = #&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"goodsName != null and goodsName.trim() != ''"</span>&gt;</span></span><br><span class="line">        AND nideshop_goods.name LIKE concat('%',#&#123;goodsName&#125;,'%')</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sidx != null and sidx.trim() != ''"</span>&gt;</span></span><br><span class="line">            order by $&#123;sidx&#125; $&#123;order&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            order by nideshop_product.id desc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset != null and limit != null"</span>&gt;</span></span><br><span class="line">        limit #&#123;offset&#125;, #&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 添加一条商品到购物车</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.platform.entity.CartEntity"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into nideshop_cart</span><br><span class="line">  (</span><br><span class="line">    `user_id`, </span><br><span class="line">    `session_id`, </span><br><span class="line">    `goods_id`, </span><br><span class="line">    `goods_sn`, </span><br><span class="line">    `product_id`, </span><br><span class="line">    `goods_name`, </span><br><span class="line">    `market_price`, </span><br><span class="line">    `retail_price`, </span><br><span class="line">    `number`, </span><br><span class="line">    `goods_specifition_name_value`, </span><br><span class="line">    `goods_specifition_ids`, </span><br><span class="line">    `checked`, </span><br><span class="line">    `list_pic_url`</span><br><span class="line">  )</span><br><span class="line">  values</span><br><span class="line">  (</span><br><span class="line">    #&#123;userId&#125;, </span><br><span class="line">    #&#123;sessionId&#125;, </span><br><span class="line">    #&#123;goodsId&#125;, </span><br><span class="line">    #&#123;goodsSn&#125;, </span><br><span class="line">    #&#123;productId&#125;, </span><br><span class="line">    #&#123;goodsName&#125;, </span><br><span class="line">    #&#123;marketPrice&#125;, </span><br><span class="line">    #&#123;retailPrice&#125;, </span><br><span class="line">    #&#123;number&#125;, </span><br><span class="line">    #&#123;goodsSpecifitionNameValue&#125;, </span><br><span class="line">    #&#123;goodsSpecifitionIds&#125;, </span><br><span class="line">    #&#123;checked&#125;, </span><br><span class="line">    #&#123;listPicUrl&#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h3><p><img src="05.jpg" alt="05"></p>
<h4 id="前台实现-2"><a href="#前台实现-2" class="headerlink" title="前台实现"></a>前台实现</h4><h5 id="cart-wxml"><a href="#cart-wxml" class="headerlink" title="cart.wxml"></a>cart.wxml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"cart-bottom"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"checkbox &#123;&#123;checkedAllStatus ? 'checked' : ''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">"checkedAll"</span>&gt;</span>全选(&#123;&#123;cartTotal.checkedGoodsCount&#125;&#125;)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span>&#123;&#123;!isEditCart ? '￥'+cartTotal.checkedGoodsAmount : ''&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"delete"</span> <span class="attr">bindtap</span>=<span class="string">"editCart"</span>&gt;</span>&#123;&#123;!isEditCart ? '编辑' : '完成'&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"checkout"</span> <span class="attr">bindtap</span>=<span class="string">"deleteCart"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;isEditCart&#125;&#125;"</span>&gt;</span>删除所选<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"checkout"</span> <span class="attr">bindtap</span>=<span class="string">"checkoutOrder"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!isEditCart&#125;&#125;"</span>&gt;</span>下单<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="cart-js"><a href="#cart-js" class="headerlink" title="cart.js"></a>cart.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkoutOrder: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取已选择的商品</span></span><br><span class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> checkedGoods = <span class="keyword">this</span>.data.cartGoods.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.checked == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (checkedGoods.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 去付款页面</span></span><br><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'../shopping/checkout/checkout'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h3><p>付款页面需要调用接口查询地址信息和商品信息。<br><img src="06.jpg" alt="06"></p>
<h4 id="前台实现-3"><a href="#前台实现-3" class="headerlink" title="前台实现"></a>前台实现</h4><h5 id="checkout-js"><a href="#checkout-js" class="headerlink" title="checkout.js"></a>checkout.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submitOrder: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.data.addressId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    util.showErrorToast(<span class="string">'请选择收货地址'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  util.request(api.OrderSubmit, &#123; <span class="attr">addressId</span>: <span class="keyword">this</span>.data.addressId, <span class="attr">couponId</span>: <span class="keyword">this</span>.data.couponId, <span class="attr">type</span>: <span class="keyword">this</span>.data.buyType &#125;, <span class="string">'POST'</span>, <span class="string">'application/json'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.errno === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> orderId = res.data.orderInfo.id;</span><br><span class="line">      <span class="comment">// 提交订单成功后调支付接口</span></span><br><span class="line">      pay.payOrder(<span class="built_in">parseInt</span>(orderId)).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        wx.redirectTo(&#123;</span><br><span class="line">          url: <span class="string">'/pages/payResult/payResult?status=1&amp;orderId='</span> + orderId</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        wx.redirectTo(&#123;</span><br><span class="line">          url: <span class="string">'/pages/payResult/payResult?status=0&amp;orderId='</span> + orderId</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      util.showErrorToast(<span class="string">'下单失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="pay-js"><a href="#pay-js" class="headerlink" title="pay.js"></a>pay.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 订单支付，入参：订单id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payOrder</span>(<span class="params">orderId</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  util.request(api.PayPrepayId, &#123;</span><br><span class="line">    orderId: orderId</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.errno === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> payParam = res.data;</span><br><span class="line">      wx.requestPayment(&#123;</span><br><span class="line">        <span class="string">'timeStamp'</span>: payParam.timeStamp,</span><br><span class="line">        <span class="string">'nonceStr'</span>: payParam.nonceStr,</span><br><span class="line">        <span class="string">'package'</span>: payParam.package,</span><br><span class="line">        <span class="string">'signType'</span>: payParam.signType,</span><br><span class="line">        <span class="string">'paySign'</span>: payParam.paySign,</span><br><span class="line">        <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          resolve(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'fail'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          reject(res);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'complete'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          reject(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="config-api-js"><a href="#config-api-js" class="headerlink" title="config/api.js"></a>config/api.js</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> API_BASE_URL = <span class="string">'http://localhost:8080/platform-framework/api/'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  OrderSubmit: API_BASE_URL + <span class="string">'order/submit'</span>, <span class="comment">// 提交订单</span></span><br><span class="line">  PayPrepayId: API_BASE_URL + <span class="string">'pay/prepay'</span>, <span class="comment">//获取微信统一下单prepay_id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后台实现-2"><a href="#后台实现-2" class="headerlink" title="后台实现"></a>后台实现</h4><h5 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h5><p>ApiOrderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取订单列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"订单提交"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"submit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">submit</span><span class="params">(@LoginUser UserVo loginUser)</span> </span>&#123;</span><br><span class="line">    Map resultObj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resultObj = orderService.submit(getJsonRequest(), loginUser);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != resultObj) &#123;</span><br><span class="line">            <span class="keyword">return</span> toResponsObject(MapUtils.getInteger(resultObj, <span class="string">"errno"</span>), MapUtils.getString(resultObj, <span class="string">"errmsg"</span>), resultObj.get(<span class="string">"data"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toResponsFail(<span class="string">"提交失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取支付的请求参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取支付的请求参数"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"prepay"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">payPrepay</span><span class="params">(@LoginUser UserVo loginUser, Integer orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    OrderVo orderInfo = orderService.queryObject(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == orderInfo) &#123;</span><br><span class="line">        <span class="keyword">return</span> toResponsObject(<span class="number">400</span>, <span class="string">"订单已取消"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (orderInfo.getPay_status() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> toResponsObject(<span class="number">400</span>, <span class="string">"订单已支付，请不要重复操作"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String nonceStr = CharUtil.getRandomString(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=3</span></span><br><span class="line">    Map&lt;Object, Object&gt; resultObj = <span class="keyword">new</span> TreeMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; parame = <span class="keyword">new</span> TreeMap&lt;Object, Object&gt;();</span><br><span class="line">        parame.put(<span class="string">"appid"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.appId"</span>));</span><br><span class="line">        <span class="comment">// 商家账号。</span></span><br><span class="line">        parame.put(<span class="string">"mch_id"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.mchId"</span>));</span><br><span class="line">        String randomStr = CharUtil.getRandomNum(<span class="number">18</span>).toUpperCase();</span><br><span class="line">        <span class="comment">// 随机字符串</span></span><br><span class="line">        parame.put(<span class="string">"nonce_str"</span>, randomStr);</span><br><span class="line">        <span class="comment">// 商户订单编号</span></span><br><span class="line">        parame.put(<span class="string">"out_trade_no"</span>, orderInfo.getOrder_sn());</span><br><span class="line">        Map orderGoodsParam = <span class="keyword">new</span> HashMap();</span><br><span class="line">        orderGoodsParam.put(<span class="string">"order_id"</span>, orderId);</span><br><span class="line">        <span class="comment">// 商品描述</span></span><br><span class="line">        parame.put(<span class="string">"body"</span>, <span class="string">"超市-支付"</span>);</span><br><span class="line">        <span class="comment">//订单的商品</span></span><br><span class="line">        List&lt;OrderGoodsVo&gt; orderGoods = orderGoodsService.queryList(orderGoodsParam);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != orderGoods) &#123;</span><br><span class="line">            String body = <span class="string">"超市-"</span>;</span><br><span class="line">            <span class="keyword">for</span> (OrderGoodsVo goodsVo : orderGoods) &#123;</span><br><span class="line">                body = body + goodsVo.getGoods_name() + <span class="string">"、"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                body = body.substring(<span class="number">0</span>, body.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 商品描述</span></span><br><span class="line">            parame.put(<span class="string">"body"</span>, body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//支付金额</span></span><br><span class="line">        parame.put(<span class="string">"total_fee"</span>, orderInfo.getActual_price().multiply(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)).intValue());</span><br><span class="line">        <span class="comment">// 回调地址</span></span><br><span class="line">        parame.put(<span class="string">"notify_url"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.notifyUrl"</span>));</span><br><span class="line">        <span class="comment">// 交易类型APP</span></span><br><span class="line">        parame.put(<span class="string">"trade_type"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.tradeType"</span>));</span><br><span class="line">        parame.put(<span class="string">"spbill_create_ip"</span>, getClientIp());</span><br><span class="line">        parame.put(<span class="string">"openid"</span>, loginUser.getWeixin_openid());</span><br><span class="line">        String sign = WechatUtil.arraySign(parame, ResourceUtil.getConfigByName(<span class="string">"wx.paySignKey"</span>));</span><br><span class="line">        <span class="comment">// 数字签证</span></span><br><span class="line">        parame.put(<span class="string">"sign"</span>, sign);</span><br><span class="line"></span><br><span class="line">        String xml = MapUtils.convertMap2Xml(parame);</span><br><span class="line">        logger.info(<span class="string">"xml:"</span> + xml);</span><br><span class="line">        Map&lt;String, Object&gt; resultUn = XmlUtil.xmlStrToMap(WechatUtil.requestOnce(ResourceUtil.getConfigByName(<span class="string">"wx.uniformorder"</span>), xml));</span><br><span class="line">        <span class="comment">// 响应报文</span></span><br><span class="line">        String return_code = MapUtils.getString(<span class="string">"return_code"</span>, resultUn);</span><br><span class="line">        String return_msg = MapUtils.getString(<span class="string">"return_msg"</span>, resultUn);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (return_code.equalsIgnoreCase(<span class="string">"FAIL"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> toResponsFail(<span class="string">"支付失败,"</span> + return_msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (return_code.equalsIgnoreCase(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返回数据</span></span><br><span class="line">            String result_code = MapUtils.getString(<span class="string">"result_code"</span>, resultUn);</span><br><span class="line">            String err_code_des = MapUtils.getString(<span class="string">"err_code_des"</span>, resultUn);</span><br><span class="line">            <span class="keyword">if</span> (result_code.equalsIgnoreCase(<span class="string">"FAIL"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> toResponsFail(<span class="string">"支付失败,"</span> + err_code_des);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result_code.equalsIgnoreCase(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">                String prepay_id = MapUtils.getString(<span class="string">"prepay_id"</span>, resultUn);</span><br><span class="line">                <span class="comment">// 先生成paySign 参考https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=5</span></span><br><span class="line">                resultObj.put(<span class="string">"appId"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.appId"</span>));</span><br><span class="line">                resultObj.put(<span class="string">"timeStamp"</span>, DateUtils.timeToStr(System.currentTimeMillis() / <span class="number">1000</span>, DateUtils.DATE_TIME_PATTERN));</span><br><span class="line">                resultObj.put(<span class="string">"nonceStr"</span>, nonceStr);</span><br><span class="line">                resultObj.put(<span class="string">"package"</span>, <span class="string">"prepay_id="</span> + prepay_id);</span><br><span class="line">                resultObj.put(<span class="string">"signType"</span>, <span class="string">"MD5"</span>);</span><br><span class="line">                String paySign = WechatUtil.arraySign(resultObj, ResourceUtil.getConfigByName(<span class="string">"wx.paySignKey"</span>));</span><br><span class="line">                resultObj.put(<span class="string">"paySign"</span>, paySign);</span><br><span class="line">                <span class="comment">// 业务处理</span></span><br><span class="line">                orderInfo.setPay_id(prepay_id);</span><br><span class="line">                <span class="comment">// 付款中</span></span><br><span class="line">                orderInfo.setPay_status(<span class="number">1</span>);</span><br><span class="line">                orderService.update(orderInfo);</span><br><span class="line">                <span class="keyword">return</span> toResponsObject(<span class="number">0</span>, <span class="string">"微信统一订单下单成功"</span>, resultObj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> toResponsFail(<span class="string">"下单失败,error="</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toResponsFail(<span class="string">"下单失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApiPayController</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取支付的请求参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取支付的请求参数"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"prepay"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">payPrepay</span><span class="params">(@LoginUser UserVo loginUser, Integer orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    OrderVo orderInfo = orderService.queryObject(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == orderInfo) &#123;</span><br><span class="line">        <span class="keyword">return</span> toResponsObject(<span class="number">400</span>, <span class="string">"订单已取消"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (orderInfo.getPay_status() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> toResponsObject(<span class="number">400</span>, <span class="string">"订单已支付，请不要重复操作"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String nonceStr = CharUtil.getRandomString(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=3</span></span><br><span class="line">    Map&lt;Object, Object&gt; resultObj = <span class="keyword">new</span> TreeMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; parame = <span class="keyword">new</span> TreeMap&lt;Object, Object&gt;();</span><br><span class="line">        parame.put(<span class="string">"appid"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.appId"</span>));</span><br><span class="line">        <span class="comment">// 商家账号。</span></span><br><span class="line">        parame.put(<span class="string">"mch_id"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.mchId"</span>));</span><br><span class="line">        String randomStr = CharUtil.getRandomNum(<span class="number">18</span>).toUpperCase();</span><br><span class="line">        <span class="comment">// 随机字符串</span></span><br><span class="line">        parame.put(<span class="string">"nonce_str"</span>, randomStr);</span><br><span class="line">        <span class="comment">// 商户订单编号</span></span><br><span class="line">        parame.put(<span class="string">"out_trade_no"</span>, orderInfo.getOrder_sn());</span><br><span class="line">        Map orderGoodsParam = <span class="keyword">new</span> HashMap();</span><br><span class="line">        orderGoodsParam.put(<span class="string">"order_id"</span>, orderId);</span><br><span class="line">        <span class="comment">// 商品描述</span></span><br><span class="line">        parame.put(<span class="string">"body"</span>, <span class="string">"超市-支付"</span>);</span><br><span class="line">        <span class="comment">//订单的商品</span></span><br><span class="line">        List&lt;OrderGoodsVo&gt; orderGoods = orderGoodsService.queryList(orderGoodsParam);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != orderGoods) &#123;</span><br><span class="line">            String body = <span class="string">"超市-"</span>;</span><br><span class="line">            <span class="keyword">for</span> (OrderGoodsVo goodsVo : orderGoods) &#123;</span><br><span class="line">                body = body + goodsVo.getGoods_name() + <span class="string">"、"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                body = body.substring(<span class="number">0</span>, body.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 商品描述</span></span><br><span class="line">            parame.put(<span class="string">"body"</span>, body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//支付金额</span></span><br><span class="line">        parame.put(<span class="string">"total_fee"</span>, orderInfo.getActual_price().multiply(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)).intValue());</span><br><span class="line">        <span class="comment">// 回调地址</span></span><br><span class="line">        parame.put(<span class="string">"notify_url"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.notifyUrl"</span>));</span><br><span class="line">        <span class="comment">// 交易类型APP</span></span><br><span class="line">        parame.put(<span class="string">"trade_type"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.tradeType"</span>));</span><br><span class="line">        parame.put(<span class="string">"spbill_create_ip"</span>, getClientIp());</span><br><span class="line">        parame.put(<span class="string">"openid"</span>, loginUser.getWeixin_openid());</span><br><span class="line">        String sign = WechatUtil.arraySign(parame, ResourceUtil.getConfigByName(<span class="string">"wx.paySignKey"</span>));</span><br><span class="line">        <span class="comment">// 数字签证</span></span><br><span class="line">        parame.put(<span class="string">"sign"</span>, sign);</span><br><span class="line"></span><br><span class="line">        String xml = MapUtils.convertMap2Xml(parame);</span><br><span class="line">        logger.info(<span class="string">"xml:"</span> + xml);</span><br><span class="line">        Map&lt;String, Object&gt; resultUn = XmlUtil.xmlStrToMap(WechatUtil.requestOnce(ResourceUtil.getConfigByName(<span class="string">"wx.uniformorder"</span>), xml));</span><br><span class="line">        <span class="comment">// 响应报文</span></span><br><span class="line">        String return_code = MapUtils.getString(<span class="string">"return_code"</span>, resultUn);</span><br><span class="line">        String return_msg = MapUtils.getString(<span class="string">"return_msg"</span>, resultUn);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (return_code.equalsIgnoreCase(<span class="string">"FAIL"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> toResponsFail(<span class="string">"支付失败,"</span> + return_msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (return_code.equalsIgnoreCase(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返回数据</span></span><br><span class="line">            String result_code = MapUtils.getString(<span class="string">"result_code"</span>, resultUn);</span><br><span class="line">            String err_code_des = MapUtils.getString(<span class="string">"err_code_des"</span>, resultUn);</span><br><span class="line">            <span class="keyword">if</span> (result_code.equalsIgnoreCase(<span class="string">"FAIL"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> toResponsFail(<span class="string">"支付失败,"</span> + err_code_des);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result_code.equalsIgnoreCase(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">                String prepay_id = MapUtils.getString(<span class="string">"prepay_id"</span>, resultUn);</span><br><span class="line">                <span class="comment">// 先生成paySign 参考https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=5</span></span><br><span class="line">                resultObj.put(<span class="string">"appId"</span>, ResourceUtil.getConfigByName(<span class="string">"wx.appId"</span>));</span><br><span class="line">                resultObj.put(<span class="string">"timeStamp"</span>, DateUtils.timeToStr(System.currentTimeMillis() / <span class="number">1000</span>, DateUtils.DATE_TIME_PATTERN));</span><br><span class="line">                resultObj.put(<span class="string">"nonceStr"</span>, nonceStr);</span><br><span class="line">                resultObj.put(<span class="string">"package"</span>, <span class="string">"prepay_id="</span> + prepay_id);</span><br><span class="line">                resultObj.put(<span class="string">"signType"</span>, <span class="string">"MD5"</span>);</span><br><span class="line">                String paySign = WechatUtil.arraySign(resultObj, ResourceUtil.getConfigByName(<span class="string">"wx.paySignKey"</span>));</span><br><span class="line">                resultObj.put(<span class="string">"paySign"</span>, paySign);</span><br><span class="line">                <span class="comment">// 业务处理</span></span><br><span class="line">                orderInfo.setPay_id(prepay_id);</span><br><span class="line">                <span class="comment">// 付款中</span></span><br><span class="line">                orderInfo.setPay_status(<span class="number">1</span>);</span><br><span class="line">                orderService.update(orderInfo);</span><br><span class="line">                <span class="keyword">return</span> toResponsObject(<span class="number">0</span>, <span class="string">"微信统一订单下单成功"</span>, resultObj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> toResponsFail(<span class="string">"下单失败,error="</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toResponsFail(<span class="string">"下单失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h5><p>ApiOrderService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">submit</span><span class="params">(JSONObject jsonParam, UserVo loginUser)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, Object&gt; resultObj = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">      Integer couponId = jsonParam.getInteger(<span class="string">"couponId"</span>);</span><br><span class="line">      String type = jsonParam.getString(<span class="string">"type"</span>);</span><br><span class="line">      String postscript = jsonParam.getString(<span class="string">"postscript"</span>);</span><br><span class="line"><span class="comment">//        AddressVo addressVo = jsonParam.getObject("checkedAddress",AddressVo.class);</span></span><br><span class="line">      AddressVo addressVo = apiAddressMapper.queryObject(jsonParam.getInteger(<span class="string">"addressId"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Integer freightPrice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// * 获取要购买的商品</span></span><br><span class="line">      List&lt;CartVo&gt; checkedGoodsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      BigDecimal goodsTotalPrice;</span><br><span class="line">      <span class="keyword">if</span> (type.equals(<span class="string">"cart"</span>)) &#123;</span><br><span class="line">          Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">          param.put(<span class="string">"user_id"</span>, loginUser.getUserId());</span><br><span class="line">          param.put(<span class="string">"session_id"</span>, <span class="number">1</span>);</span><br><span class="line">          param.put(<span class="string">"checked"</span>, <span class="number">1</span>);</span><br><span class="line">          checkedGoodsList = apiCartMapper.queryList(param);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == checkedGoodsList) &#123;</span><br><span class="line">              resultObj.put(<span class="string">"errno"</span>, <span class="number">400</span>);</span><br><span class="line">              resultObj.put(<span class="string">"errmsg"</span>, <span class="string">"请选择商品"</span>);</span><br><span class="line">              <span class="keyword">return</span> resultObj;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//统计商品总价</span></span><br><span class="line">          goodsTotalPrice = <span class="keyword">new</span> BigDecimal(<span class="number">0.00</span>);</span><br><span class="line">          <span class="keyword">for</span> (CartVo cartItem : checkedGoodsList) &#123;</span><br><span class="line">              goodsTotalPrice = goodsTotalPrice.add(cartItem.getRetail_price().multiply(<span class="keyword">new</span> BigDecimal(cartItem.getNumber())));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          BuyGoodsVo goodsVo = (BuyGoodsVo) J2CacheUtils.get(J2CacheUtils.SHOP_CACHE_NAME, <span class="string">"goods"</span> + loginUser.getUserId());</span><br><span class="line">          ProductVo productInfo = productService.queryObject(goodsVo.getProductId());</span><br><span class="line">          <span class="comment">//计算订单的费用</span></span><br><span class="line">          <span class="comment">//商品总价</span></span><br><span class="line">          goodsTotalPrice = productInfo.getRetail_price().multiply(<span class="keyword">new</span> BigDecimal(goodsVo.getNumber()));</span><br><span class="line"></span><br><span class="line">          CartVo cartVo = <span class="keyword">new</span> CartVo();</span><br><span class="line">          BeanUtils.copyProperties(productInfo, cartVo);</span><br><span class="line">          cartVo.setNumber(goodsVo.getNumber());</span><br><span class="line">          cartVo.setProduct_id(goodsVo.getProductId());</span><br><span class="line">          checkedGoodsList.add(cartVo);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取订单使用的优惠券</span></span><br><span class="line">      BigDecimal couponPrice = <span class="keyword">new</span> BigDecimal(<span class="number">0.00</span>);</span><br><span class="line">      CouponVo couponVo = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (couponId != <span class="keyword">null</span> &amp;&amp; couponId != <span class="number">0</span>) &#123;</span><br><span class="line">          couponVo = apiCouponMapper.getUserCoupon(couponId);</span><br><span class="line">          <span class="keyword">if</span> (couponVo != <span class="keyword">null</span> &amp;&amp; couponVo.getCoupon_status() == <span class="number">1</span>) &#123;</span><br><span class="line">              couponPrice = couponVo.getType_money();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//订单价格计算</span></span><br><span class="line">      BigDecimal orderTotalPrice = goodsTotalPrice.add(<span class="keyword">new</span> BigDecimal(freightPrice)); <span class="comment">//订单的总价</span></span><br><span class="line"></span><br><span class="line">      BigDecimal actualPrice = orderTotalPrice.subtract(couponPrice);  <span class="comment">//减去其它支付的金额后，要实际支付的金额</span></span><br><span class="line"></span><br><span class="line">      Long currentTime = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      OrderVo orderInfo = <span class="keyword">new</span> OrderVo();</span><br><span class="line">      orderInfo.setOrder_sn(CommonUtil.generateOrderNumber());</span><br><span class="line">      orderInfo.setUser_id(loginUser.getUserId());</span><br><span class="line">      <span class="comment">//收货地址和运费</span></span><br><span class="line">      orderInfo.setConsignee(addressVo.getUserName());</span><br><span class="line">      orderInfo.setMobile(addressVo.getTelNumber());</span><br><span class="line">      orderInfo.setCountry(addressVo.getNationalCode());</span><br><span class="line">      orderInfo.setProvince(addressVo.getProvinceName());</span><br><span class="line">      orderInfo.setCity(addressVo.getCityName());</span><br><span class="line">      orderInfo.setDistrict(addressVo.getCountyName());</span><br><span class="line">      orderInfo.setAddress(addressVo.getDetailInfo());</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      orderInfo.setFreight_price(freightPrice);</span><br><span class="line">      <span class="comment">//留言</span></span><br><span class="line">      orderInfo.setPostscript(postscript);</span><br><span class="line">      <span class="comment">//使用的优惠券</span></span><br><span class="line">      orderInfo.setCoupon_id(couponId);</span><br><span class="line">      orderInfo.setCoupon_price(couponPrice);</span><br><span class="line">      orderInfo.setAdd_time(<span class="keyword">new</span> Date());</span><br><span class="line">      orderInfo.setGoods_price(goodsTotalPrice);</span><br><span class="line">      orderInfo.setOrder_price(orderTotalPrice);</span><br><span class="line">      orderInfo.setActual_price(actualPrice);</span><br><span class="line">      <span class="comment">// 待付款</span></span><br><span class="line">      orderInfo.setOrder_status(<span class="number">0</span>);</span><br><span class="line">      orderInfo.setShipping_status(<span class="number">0</span>);</span><br><span class="line">      orderInfo.setPay_status(<span class="number">0</span>);</span><br><span class="line">      orderInfo.setShipping_id(<span class="number">0</span>);</span><br><span class="line">      orderInfo.setShipping_fee(<span class="keyword">new</span> BigDecimal(<span class="number">0</span>));</span><br><span class="line">      orderInfo.setIntegral(<span class="number">0</span>);</span><br><span class="line">      orderInfo.setIntegral_money(<span class="keyword">new</span> BigDecimal(<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">if</span> (type.equals(<span class="string">"cart"</span>)) &#123;</span><br><span class="line">          orderInfo.setOrder_type(<span class="string">"1"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          orderInfo.setOrder_type(<span class="string">"4"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//开启事务，插入订单信息和订单商品</span></span><br><span class="line">      apiOrderMapper.save(orderInfo);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == orderInfo.getId()) &#123;</span><br><span class="line">          resultObj.put(<span class="string">"errno"</span>, <span class="number">1</span>);</span><br><span class="line">          resultObj.put(<span class="string">"errmsg"</span>, <span class="string">"订单提交失败"</span>);</span><br><span class="line">          <span class="keyword">return</span> resultObj;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//统计商品总价</span></span><br><span class="line">      List&lt;OrderGoodsVo&gt; orderGoodsData = <span class="keyword">new</span> ArrayList&lt;OrderGoodsVo&gt;();</span><br><span class="line">      <span class="keyword">for</span> (CartVo goodsItem : checkedGoodsList) &#123;</span><br><span class="line">          OrderGoodsVo orderGoodsVo = <span class="keyword">new</span> OrderGoodsVo();</span><br><span class="line">          orderGoodsVo.setOrder_id(orderInfo.getId());</span><br><span class="line">          orderGoodsVo.setGoods_id(goodsItem.getGoods_id());</span><br><span class="line">          orderGoodsVo.setGoods_sn(goodsItem.getGoods_sn());</span><br><span class="line">          orderGoodsVo.setProduct_id(goodsItem.getProduct_id());</span><br><span class="line">          orderGoodsVo.setGoods_name(goodsItem.getGoods_name());</span><br><span class="line">          orderGoodsVo.setList_pic_url(goodsItem.getList_pic_url());</span><br><span class="line">          orderGoodsVo.setMarket_price(goodsItem.getMarket_price());</span><br><span class="line">          orderGoodsVo.setRetail_price(goodsItem.getRetail_price());</span><br><span class="line">          orderGoodsVo.setNumber(goodsItem.getNumber());</span><br><span class="line">          orderGoodsVo.setGoods_specifition_name_value(goodsItem.getGoods_specifition_name_value());</span><br><span class="line">          orderGoodsVo.setGoods_specifition_ids(goodsItem.getGoods_specifition_ids());</span><br><span class="line">          orderGoodsData.add(orderGoodsVo);</span><br><span class="line">          apiOrderGoodsMapper.save(orderGoodsVo);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//清空已购买的商品</span></span><br><span class="line">      apiCartMapper.deleteByCart(loginUser.getUserId(), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      resultObj.put(<span class="string">"errno"</span>, <span class="number">0</span>);</span><br><span class="line">      resultObj.put(<span class="string">"errmsg"</span>, <span class="string">"订单提交成功"</span>);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      Map&lt;String, OrderVo&gt; orderInfoMap = <span class="keyword">new</span> HashMap&lt;String, OrderVo&gt;();</span><br><span class="line">      orderInfoMap.put(<span class="string">"orderInfo"</span>, orderInfo);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      resultObj.put(<span class="string">"data"</span>, orderInfoMap);</span><br><span class="line">      <span class="comment">// 优惠券标记已用</span></span><br><span class="line">      <span class="keyword">if</span> (couponVo != <span class="keyword">null</span> &amp;&amp; couponVo.getCoupon_status() == <span class="number">1</span>) &#123;</span><br><span class="line">          couponVo.setCoupon_status(<span class="number">2</span>);</span><br><span class="line">          apiCouponMapper.updateUserCoupon(couponVo);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> resultObj;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="Dao-2"><a href="#Dao-2" class="headerlink" title="Dao"></a>Dao</h5><p>OrderDao.xml 保存订单实体</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.platform.entity.OrderEntity"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into nideshop_order</span><br><span class="line">  (</span><br><span class="line">    `order_sn`, </span><br><span class="line">    `user_id`, </span><br><span class="line">    `order_status`, </span><br><span class="line">    `shipping_status`, </span><br><span class="line">    `pay_status`, </span><br><span class="line">    `consignee`, </span><br><span class="line">    `country`, </span><br><span class="line">    `province`, </span><br><span class="line">    `city`, </span><br><span class="line">    `district`,</span><br><span class="line">    `address`, </span><br><span class="line">    `mobile`, </span><br><span class="line">    `postscript`, </span><br><span class="line">    `shipping_id`, </span><br><span class="line">    `shipping_name`,</span><br><span class="line">    `shipping_no`,</span><br><span class="line">    `pay_id`, </span><br><span class="line">    `pay_name`, </span><br><span class="line">    `shipping_fee`, </span><br><span class="line">    `actual_price`, </span><br><span class="line">    `integral`, </span><br><span class="line">    `integral_money`, </span><br><span class="line">    `order_price`, </span><br><span class="line">    `goods_price`, </span><br><span class="line">    `add_time`, </span><br><span class="line">    `confirm_time`, </span><br><span class="line">    `pay_time`, </span><br><span class="line">    `freight_price`, </span><br><span class="line">    `coupon_id`, </span><br><span class="line">    `parent_id`, </span><br><span class="line">    `coupon_price`, </span><br><span class="line">    `callback_status`,</span><br><span class="line">    `order_type`</span><br><span class="line">  )</span><br><span class="line">  values</span><br><span class="line">  (</span><br><span class="line">    #&#123;orderSn&#125;, </span><br><span class="line">    #&#123;userId&#125;, </span><br><span class="line">    #&#123;orderStatus&#125;, </span><br><span class="line">    #&#123;shippingStatus&#125;, </span><br><span class="line">    #&#123;payStatus&#125;, </span><br><span class="line">    #&#123;consignee&#125;, </span><br><span class="line">    #&#123;country&#125;, </span><br><span class="line">    #&#123;province&#125;, </span><br><span class="line">    #&#123;city&#125;, </span><br><span class="line">    #&#123;district&#125;, </span><br><span class="line">    #&#123;address&#125;, </span><br><span class="line">    #&#123;mobile&#125;, </span><br><span class="line">    #&#123;postscript&#125;, </span><br><span class="line">    #&#123;shippingId&#125;, </span><br><span class="line">    #&#123;shippingName&#125;,</span><br><span class="line">    #&#123;shippingNo&#125;,</span><br><span class="line">    #&#123;payId&#125;, </span><br><span class="line">    #&#123;payName&#125;, </span><br><span class="line">    #&#123;shippingFee&#125;, </span><br><span class="line">    #&#123;actualPrice&#125;, </span><br><span class="line">    #&#123;integral&#125;, </span><br><span class="line">    #&#123;integralMoney&#125;, </span><br><span class="line">    #&#123;orderPrice&#125;, </span><br><span class="line">    #&#123;goodsPrice&#125;, </span><br><span class="line">    #&#123;addTime&#125;, </span><br><span class="line">    #&#123;confirmTime&#125;, </span><br><span class="line">    #&#123;payTime&#125;, </span><br><span class="line">    #&#123;freightPrice&#125;, </span><br><span class="line">    #&#123;couponId&#125;, </span><br><span class="line">    #&#123;parentId&#125;, </span><br><span class="line">    #&#123;couponPrice&#125;, </span><br><span class="line">    #&#123;callbackStatus&#125;,</span><br><span class="line">    #&#123;orderType&#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相关Sql"><a href="#相关Sql" class="headerlink" title="相关Sql"></a>相关Sql</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">######################################################</span><br><span class="line">################# 商品相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 查询商品</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods;</span><br><span class="line"># 热门商品</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.is_hot = <span class="string">'1'</span> and t.is_delete = <span class="string">'0'</span>;</span><br><span class="line"># 查询渠道</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_channel;</span><br><span class="line"># 查询主题</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_topic;</span><br><span class="line"># 查询品牌</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_brand;</span><br><span class="line"># 查询品牌</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_brand;</span><br><span class="line"># 查询广告位</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_ad;</span><br><span class="line"></span><br><span class="line"># 查询渠道</span><br><span class="line">select <span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`url`</span>, <span class="string">`icon_url`</span>, <span class="string">`sort_order`</span> <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_channel;</span><br><span class="line"></span><br><span class="line"># 查询商品分类</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">0</span> order by show_index asc;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1005000</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1008002</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.id = <span class="number">1008002</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1005000</span> order by t.show_index asc ;</span><br><span class="line"># 查询商品信息</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.category_id = <span class="number">1008002</span> order by t.id desc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.id = <span class="number">1147048</span>;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_related_goods;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_product np left join <span class="string">`platform-shop`</span>.nideshop_goods ng on np.goods_id = ng.id where ng.id = <span class="number">1147048</span>;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 购物车相关查询 #####################</span><br><span class="line">######################################################</span><br><span class="line"># 购物车查询</span><br><span class="line">select a.* ,b.username <span class="keyword">as</span> user_name <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_cart a left join <span class="string">`platform-shop`</span>.nideshop_user b on a.user_id = b.id;</span><br><span class="line"># 购物车</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_cart;</span><br><span class="line"># 微信用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_user;</span><br><span class="line"># 商品详情</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.id = <span class="number">1147048</span>;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 订单相关查询 #####################</span><br><span class="line">######################################################</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_order;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 用户相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 查询一级菜单</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_menu where parent_id = <span class="number">0</span> AND status = <span class="number">0</span> order by order_num asc;</span><br><span class="line"># 查询二级菜单</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_menu t where t.parent_id = <span class="number">1</span>;</span><br><span class="line"># 查询系统用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_user;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_dept;</span><br><span class="line">select u.*, (select d.name <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_dept d where d.dept_id = u.dept_id) deptName <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_user u where u.user_id = <span class="number">1</span>;</span><br><span class="line"># 查询微信用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_user;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 图片相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 上传图片</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_oss;</span><br><span class="line"># 查询云服务器配置</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_config where <span class="string">`key`</span> = <span class="string">'CLOUD_STORAGE_CONFIG_KEY'</span>;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 商品相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 查询商品</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods;</span><br><span class="line"># 热门商品</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.is_hot = <span class="string">'1'</span> and t.is_delete = <span class="string">'0'</span>;</span><br><span class="line"># 查询渠道</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_channel;</span><br><span class="line"># 查询主题</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_topic;</span><br><span class="line"># 查询品牌</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_brand;</span><br><span class="line"># 查询品牌</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_brand;</span><br><span class="line"># 查询广告位</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_ad;</span><br><span class="line"></span><br><span class="line"># 查询渠道</span><br><span class="line">select <span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`url`</span>, <span class="string">`icon_url`</span>, <span class="string">`sort_order`</span> <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_channel;</span><br><span class="line"></span><br><span class="line"># 查询商品分类</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">0</span> order by show_index asc;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1005000</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1008002</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.id = <span class="number">1008002</span> order by t.show_index asc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_category t where t.parent_id = <span class="number">1005000</span> order by t.show_index asc ;</span><br><span class="line"># 查询商品信息</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.category_id = <span class="number">1008002</span> order by t.id desc ;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.id = <span class="number">1147048</span>;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_related_goods;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_product np left join <span class="string">`platform-shop`</span>.nideshop_goods ng on np.goods_id = ng.id where ng.id = <span class="number">1147048</span>;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 购物车相关查询 #####################</span><br><span class="line">######################################################</span><br><span class="line"># 购物车查询</span><br><span class="line">select a.* ,b.username <span class="keyword">as</span> user_name <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_cart a left join <span class="string">`platform-shop`</span>.nideshop_user b on a.user_id = b.id;</span><br><span class="line"># 购物车</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_cart;</span><br><span class="line"># 微信用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_user;</span><br><span class="line"># 商品详情</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_goods t where t.id = <span class="number">1147048</span>;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 订单相关查询 #####################</span><br><span class="line">######################################################</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_order;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 用户相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 查询一级菜单</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_menu where parent_id = <span class="number">0</span> AND status = <span class="number">0</span> order by order_num asc;</span><br><span class="line"># 查询二级菜单</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_menu t where t.parent_id = <span class="number">1</span>;</span><br><span class="line"># 查询系统用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_user;</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_dept;</span><br><span class="line">select u.*, (select d.name <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_dept d where d.dept_id = u.dept_id) deptName <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_user u where u.user_id = <span class="number">1</span>;</span><br><span class="line"># 查询微信用户</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.nideshop_user;</span><br><span class="line"></span><br><span class="line">######################################################</span><br><span class="line">################# 图片相关查询 #######################</span><br><span class="line">######################################################</span><br><span class="line"># 上传图片</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_oss;</span><br><span class="line"># 查询云服务器配置</span><br><span class="line">select * <span class="keyword">from</span> <span class="string">`platform-shop`</span>.sys_config where <span class="string">`key`</span> = <span class="string">'CLOUD_STORAGE_CONFIG_KEY'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-教程</title>
    <url>/2020/07/22/Redis-%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为Redis基础教程, 更多详细内容请参考<a href="http://www.redis.cn/" target="_blank" rel="noopener">Redis官网</a></p>
<a id="more"></a>

<h1 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><ul>
<li>Redis是一个开源、免费、非关系型数据库、K-V数据库、内存数据库，支持持久化、事务和备份，集群(支持16个库)等高可用功能。并且性能极高(可以达到100000+的QPS)，易扩展，丰富的数据类型，所有操作都是单线程,原子性的。</li>
<li>Redis 与其他 key - value 缓存产品有以下三个特点：<br>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ol>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ol>
<h2 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h2><ol>
<li>支持数据持久化，可将内存中的数据保存在磁盘，重启时再次加载</li>
<li>支持 KV 类型数据，也支持其他丰富的数据结构存储</li>
<li>支持数据备份，即 master-slave 模式的数据备份</li>
</ol>
<h1 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h1><p>安装Redis请参考<a href="https://zhuhb5.github.io/2020/06/16/Centos7-Redis%E5%AE%89%E8%A3%85/">Centos7-Redis安装</a></p>
<h1 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h1><p>Redis命令请查询官方文档：<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis命令</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Redis默认分16个数据库，如果不指定数据库则默认选择第0个。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis Select 命令用于切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。</span></span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Redis-Expire-命令用于设置-key-的过期时间，key-过期后将不再可用。单位以秒计。"><a href="#Redis-Expire-命令用于设置-key-的过期时间，key-过期后将不再可用。单位以秒计。" class="headerlink" title="Redis Expire 命令用于设置 key 的过期时间，key 过期后将不再可用。单位以秒计。"></a>Redis Expire 命令用于设置 key 的过期时间，key 过期后将不再可用。单位以秒计。</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt; <span class="keyword">set</span> age <span class="number">18</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">2</span>]&gt; expire age <span class="number">10</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="Key的命名建议"><a href="#Key的命名建议" class="headerlink" title="Key的命名建议"></a>Key的命名建议</h1><ol>
<li>redis单个key 存入512M大小</li>
<li>key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；</li>
<li>key也不要太短，太短的话，key的可读性会降低；</li>
<li>在一个项目中，key最好使用统一的命名模式，例如user:123:password;</li>
<li>key名称区分大小写</li>
</ol>
<h1 id="Redis-五大数据类型"><a href="#Redis-五大数据类型" class="headerlink" title="Redis 五大数据类型"></a>Redis 五大数据类型</h1><p>Redis支持五种数据类型:</p>
<ol>
<li>STRING：字符串、整数或浮点数</li>
<li>HASH：散列表，存储键值对之间的映射，无序排列</li>
<li>LIST：列表，可存储多个相同的字符串</li>
<li>SET：集合，存储不同元素，无序排列</li>
<li>ZSET：有序集合，存储键值对，有序排列</li>
</ol>
<h2 id="Redis-String"><a href="#Redis-String" class="headerlink" title="Redis String"></a>Redis String</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul>
<li>string是redis最基本的类型，一个key对应一个value。</li>
<li>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</li>
<li>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>赋值语法<br><strong>SET KEY_NAME VALUE</strong><br>Redis SET 命令用于设置给定 key 的值。如果 key 已经存储值， SET 就覆写旧值，且无视类型<br><strong>SETNX key value</strong> //解决分布式锁 方案之一<br>只有在 key 不存在时设置 key 的值。Setnx（SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值<br><strong>MSET key value [key value …]</strong><br>同时设置一个或多个 key-value 对</p>
<p>取值语法<br><strong>GET KEY_NAME</strong><br>Redis GET命令用于获取指定 key 的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。<br><strong>GETRANGE key start end</strong><br>用于获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)<br><strong>GETBIT key offset</strong><br>对 key 所储存的字符串值，获取指定偏移量上的位(bit)<br><strong>MGET key1 [key2…]</strong><br>获取所有(一个或多个)给定 key 的值<br><strong>GETSET KEY_NAME VALUE</strong><br>Getset 命令用于设置指定 key 的值，并返回 key 的旧值,当 key 不存在时，返回 nil<br><strong>STRLEN key</strong><br>返回 key 所储存的字符串值的长度</p>
<p>删除语法<br><strong>DEL KEY_Name</strong><br>删除指定的KEY，如果存在，返回值数字类型。</p>
<p>自增/自减<br><strong>INCR KEY_Name</strong><br>Incr 命令将 key 中储存的数字值增1。如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作<br>自增：INCRBY KEY_Name 增量值<br>Incrby 命令将 key 中储存的数字加上指定的增量值<br><strong>DECR KEY_Name</strong><br>自减：DECR KEY_NAME 或 DECYBY KEY_NAME 减值<br>decR 命令将 key 中储存的数字减1</p>
<p>字符串拼接<br><strong>APPEND KEY_NAME VALUE</strong><br>Append 命令用于为指定的 key 追加至未尾，如果不存在，为其赋值</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>String通常用于保存单个字符串或JSON字符串数据</li>
<li>因String是二进制安全的，所以你完全可以把一个图片文件的内容作为字符串来存储</li>
<li>计数器（常规key-value缓存应用。常规计数: 微博数, 粉丝数）<br>INCR等指令本身就具有原子操作的特性，所以我们完全可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果。假如，在某种场景下有3个客户端同时读取了mynum的值（值为2），然后对其同时进行了加1的操作，那么，最后mynum的值一定是5。<br>不少网站都利用redis的这个特性来实现业务上的统计计数需求。</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> <span class="built_in">string</span> <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> <span class="built_in">string</span></span><br><span class="line"><span class="string">"1"</span></span><br></pre></td></tr></table></figure>
<h2 id="Redis-Hash"><a href="#Redis-Hash" class="headerlink" title="Redis Hash"></a>Redis Hash</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。 Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）<br>可以看成具有KEY和VALUE的MAP容器，该类型非常适合于存储值对象的信息， 如：uname,upass,age等。该类型的数据仅占用很少的磁盘空间（相比于JSON）</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>赋值语法：<br>HSET KEY FIELD VALUE //为指定的KEY，设定FILD/VALUE<br>HMSET KEY FIELD VALUE [FIELD1,VALUE1]…… 同时将多个 field-value (域-值)对设置到哈希表 key 中。</p>
<p>取值语法：<br>HGET KEY FIELD //获取存储在HASH中的值，根据FIELD得到VALUE<br>HMGET key field[field1] //获取key所有给定字段的值<br>HGETALL key //返回HASH表中所有的字段和值</p>
<p>HKEYS key //获取所有哈希表中的字段<br>HLEN key //获取哈希表中字段的数量</p>
<p>删除语法：<br>HDEL KEY field1[field2] //删除一个或多个HASH表字段</p>
<p>其它语法：<br>HSETNX key field value<br>只有在字段 field 不存在时，设置哈希表字段的值</p>
<p>HINCRBY key field increment<br>为哈希表 key 中的指定字段的整数值加上增量 increment 。</p>
<p>HINCRBYFLOAT key field increment<br>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</p>
<p>HEXISTS key field //查看哈希表 key 中，指定的字段是否存在</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>Hash的应用场景：（存储一个用户信息对象数据）</p>
<p>常用于存储一个对象<br>为什么不用string存储一个对象？<br>hash是最接近关系数据库结构的数据类型，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中。<br>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储，主要有以下2种存储方式：<br>第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，这种方式的缺点是，增加了序列化/反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。<br>第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。<br>总结：<br>Redis提供的Hash很好的解决了这个问题，Redis的Hash实际是内部存储的Value为一个HashMap，并提供了直接存取这个Map成员的接口</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset user:zhangsan name zhangsan</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset user:zhangsan age <span class="number">18</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset user:lisi name lisi</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hset user:lisi age <span class="number">18</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset user:wangwu name wangwu age <span class="number">12</span> sex boy</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall user:wangwu</span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"age"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"12"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"sex"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"boy"</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-List"><a href="#Redis-List" class="headerlink" title="Redis List"></a>Redis List</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>List有顺序可重复<br>lpush list 1 2 3 4  从左添加元素<br>rpush list 1 2 3 4  从右添加元素<br>lrange list 0 -1 (从0到-1元素查看：也就表示查看所有)<br>lpop list (从左边取，删除)<br>rpop list(从右边去，删除)</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>赋值语法<br>LPUSH key value1 [value2] //将一个或多个值插入到列表头部(从左侧添加)<br>RPUSH key value1 [value2] //在列表中添加一个或多个值(从右侧添加)<br>LPUSHX key value //将一个值插入到已存在的列表头部。如果列表不在，操作无效<br>RPUSHX key value //一个值插入已存在的列表尾部(最右边)。如果列表不在，操作无效。</p>
<p>取值语法<br>LLEN key //获取列表长度<br>LINDEX key index //通过索引获取列表中的元素<br>LRANGE key start stop //获取列表指定范围内的元素</p>
<p>描述： 返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>start: 页大小<em>(页数-1)<br>stop : (页大小</em>页数)-1</p>
<p>删除语法<br>LPOP key 移出并获取列表的第一个元素(从左侧删除)<br>RPOP key 移除列表的最后一个元素，返回值为移除的元素(从右侧删除)</p>
<p>修改语法<br>LSET key index value 通过索引设置列表元素的值<br>LINSERT key BEFORE|AFTER world value 在列表的元素前或者后插入元素<br>描述：将值 value 插入到列表 key 当中，位于值 world 之前或之后。</p>
<p>高级语法<br>RPOPLPUSH source destination<br>移除列表的最后一个元素，并将该元素添加到另一个列表并返回<br>示例描述：<br>RPOPLPUSH a1 a2 //a1的最后元素移到a2的左侧<br>RPOPLPUSH a1 a1 //循环列表，将最后元素移到最左侧</p>
<p>应用场景</p>
<ol>
<li><p>排行榜<br>list类型的lrange命令可以分页查看队列中的数据。可将每隔一段时间计算一次的排行榜存储在list类型中，如京东每日的手机销量排行、学校每次月考学生的成绩排名，每日计算一次，存储在list类型中，接口访问时，通过page和size分页获取打擂金曲。</p>
</li>
<li><p>消息队列<br>list类型的lpop和rpush（或者反过来，lpush和rpop）能实现队列的功能，故而可以用Redis的list类型实现简单的点对点的消息队列。不过我不推荐在实战中这么使用，因为现在已经有Kafka、RabbitMQ等成熟的消息队列了，它们的功能已经很完善了，除非是为了更深入地理解消息队列，不然我觉得没必要去重复造轮子。</p>
</li>
</ol>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush username zhangsan</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush username lisi</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush username wangwu</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange username <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"wangwu"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"lisi"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"zhangsan"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH list <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE list <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"4"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"3"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"2"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"1"</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-Set"><a href="#Redis-Set" class="headerlink" title="Redis Set"></a>Redis Set</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<br>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。<br>集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)。<br>类似于JAVA中的 Hashtable集合</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>赋值语法：<br><strong>SADD key member1 [member2]</strong>向集合添加一个或多个成员</p>
<p>取值语法：<br><strong>SCARD key</strong> 获取集合的成员数<br><strong>SMEMBERS key</strong> 返回集合中的所有成员<br><strong>SISMEMBER key member</strong> 判断 member 元素是否是集合 key 的成员(开发中：验证是否存在判断）<br>S<strong>RANDMEMBER key [count]</strong> 返回集合中一个或多个随机数</p>
<p>删除语法：<br><strong>SREM key member1 [member2]</strong> 移除集合中一个或多个成员<br><strong>SPOP key [count]</strong> 移除并返回集合中的一个随机元素<br><strong>SMOVE source destination member</strong><br>将 member 元素从 source 集合移动到 destination 集合</p>
<p>差集语法：<br><strong>SDIFF key1 [key2]</strong> 返回给定所有集合的差集(左侧）<br>S<strong>DIFFSTORE destination key1 [key2]</strong> 返回给定所有集合的差集并存储在 destination 中<br>交集语法：<br><strong>SINTER key1 [key2]</strong> 返回给定所有集合的交集(共有数据）<br><strong>SINTERSTORE destination key1 [key2]</strong> 返回给定所有集合的交集并存储在 destination 中<br>并集语法：<br><strong>SUNION key1 [key2]</strong> 返回所有给定集合的并集<br><strong>SUNIONSTORE destination key1 [key2]</strong> 所有给定集合的并集存储在 destination 集合中</p>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>1.利用交集求共同好友。<br>2.利用唯一性，可以统计访问网站的所有独立IP。<br>3.好友推荐的时候根据tag求交集，大于某个threshold（临界值的）就可以推荐。</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd java redis</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd java mysql</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd java mongodb</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers java</span><br><span class="line"><span class="number">1</span>) <span class="string">"mongodb"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"redis"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"mysql"</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-ZSet"><a href="#Redis-ZSet" class="headerlink" title="Redis ZSet"></a>Redis ZSet</h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><ol>
<li>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</li>
<li>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</li>
<li>有序集合的成员是唯一的,但分数(score)却可以重复。</li>
<li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)。</li>
</ol>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>赋值语法：<br><strong>ZADD key score1 member1 [score2 member2]</strong><br>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p>
<p>取值语法：<br><strong>ZCARD key</strong> 获取有序集合的成员数<br><strong>ZCOUNT key min max</strong> 计算在有序集合中指定区间分数的成员数<br><strong>ZRANK key member</strong> 返回有序集合中指定成员的索引<br><strong>ZRANGE key start stop [WITHSCORES]</strong><br>通过索引区间返回有序集合成指定区间内的成员(低到高)<br><strong>ZREVRANGE key start stop [WITHSCORES]</strong><br>返回有序集中指定区间内的成员，通过索引，分数从高到底</p>
<p>删除语法：<br><strong>del key</strong> 移除集合<br><strong>ZREM key member [member …]</strong> 移除有序集合中的一个或多个成员<br><strong>ZREMRANGEBYRANK key start stop</strong> 移除有序集合中给定的排名区间的所有成员(第一名是0)(低到高排序)<br><strong>ZREMRANGEBYSCORE key min max</strong> 移除有序集合中给定的分数区间的所有成员</p>
<h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>常应用于：排行榜</p>
<ol>
<li>比如twitter 的public timeline可以以发表时间作为score来存储，这样获取时就是自动按时间排好序的。</li>
<li>比如一个存储全班同学成绩的Sorted Set，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。</li>
<li>还可以用Sorted Set来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</li>
</ol>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd zoo <span class="number">0</span> ant</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd zoo <span class="number">0</span> apple</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd zoo <span class="number">0</span> bear</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGEBYSCORE zoo <span class="number">0</span> <span class="number">1000</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"ant"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"apple"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"bear"</span></span><br></pre></td></tr></table></figure>
<h1 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下图展示了频道 channel1 ，<br>以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：<br><img src="01.png" alt="01"><br>当有新消息通过 PUBLISH 命令发送给频道 channel1 时，这个消息就会被发送给订阅它的三个客户端：<br><img src="02.png" alt="02"></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>订阅频道：<br><strong>SUBSCRIBE channel [channel …]</strong>订阅给定的一个或多个频道的信息<br><strong>PSUBSCRIBE pattern [pattern …]</strong>订阅一个或多个符合给定模式的频道。<br>发布频道：<br><strong>PUBLISH channel message</strong> 将信息发送到指定的频道。<br>退订频道：<br><strong>UNSUBSCRIBE [channel [channel …]]</strong> 指退订给定的频道。<br><strong>PUNSUBSCRIBE [pattern [pattern …]]</strong>退订所有给定模式的频道。</p>
<h2 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>这一功能最明显的用法就是构建实时消息系统，比如普通的即时聊天，群聊等功能</li>
<li>在一个博客网站中，有100个粉丝订阅了你，当你发布新文章，就可以推送消息给粉丝们。<br>微信公众号模式</li>
</ol>
<h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><ol>
<li>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 redisChat:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure></li>
<li>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH redisChat "redis is a great chat"</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH redisChat "learn redis"</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li>
<li>订阅者的客户端会显示如下消息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) "message"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) "redis is a great chat"</span><br><span class="line">1) "message"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) "learn redis"</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis 事务可以一次执行多个命令（允许在一次单独的步骤中执行一组命令），并且带有以下两个重要的保证：</p>
<ul>
<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>
<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>
<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>Redis会将一个事务中的所有命令序列化，然后按顺序执行<br>执行中不会被其它命令插入，不许出现加塞行为</p>
<h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p>一个事务从开始到执行会经历以下三个阶段：</p>
<ol>
<li>开始事务。</li>
<li>命令入队。</li>
<li>执行事务。<h3 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h3></li>
<li>队列中的某个命令出现了报告错误，执行时整个的所有队列都会被取消。</li>
<li>如果执行的某个命令报出了错误，则只有报错的命令不会被执行，而其它的命令都会执行，不会回滚。</li>
</ol>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><p><strong>MULTI</strong><br>标记一个事务块的开始。<br><strong>DISCARD</strong><br>取消事务，放弃执行事务块内的所有命令。<br><strong>EXEC</strong><br>执行所有事务块内的命令。<br><strong>UNWATCH</strong><br><strong>Redis Unwatch</strong> 命令用于取消 WATCH 命令对所有 key 的监视。<br>如果在执行WATCH命令之后，EXEC命令或DISCARD命令先被执行的话，那就不需要再执行UNWATCH了</p>
<p><strong>WATCH key [key …]</strong><br>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>
<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>Redis 不支持回滚（roll back）<br>只有当发生语法错误(这个问题在命令队列时无法检测到)了，Redis命令才会执行失败, 或对keys赋予了一个类型错误的数据：这意味着这些都是程序性错误，这类错误在开发的过程中就能够发现并解决掉，几乎不会出现在生产环境。<br>由于不需要回滚，这使得Redis内部更加简单，而且运行速度更快。</p>
<h2 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h2><p>一组命令必须同时都执行，或者都不执行。<br>我们想要保证一组命令在执行的过程之中不被其它命令插入。<br>例如：商品秒杀（活动）。</p>
<h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set a hello</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr a</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set b aaaa</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "b"</span><br><span class="line">2) "a"</span><br></pre></td></tr></table></figure>

<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>Redis有2种持久化方式RDB和AOF<br>数据存放于：<br>内存：高效、断电（关机）内存数据会丢失<br>硬盘：读写速度慢于内存，断电数据不会丢失</p>
<h2 id="Redis-持久化之RDB"><a href="#Redis-持久化之RDB" class="headerlink" title="Redis 持久化之RDB"></a>Redis 持久化之RDB</h2><p>RDB：是redis的默认持久化机制。RDB相当于照快照，保存的是一种状态。<br>几十G数据 –&gt; 几KB快照<br>快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。</p>
<p>优点：<br>快照保存数据极快、还原数据极快<br>适用于灾难备份<br>缺点：<br>小内存机器不适合使用,RDB机制符合要求就会照快照</p>
<p>启动方式</p>
<ol>
<li>服务器正常关闭时会进行快照 redis-cli shutdown</li>
<li>key满足一定条件，会进行快照<br>vim redis.conf 搜索save<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 900 1 //每900秒（15分钟）至少1个key发生变化，产生快照</span><br><span class="line">save 300 10 //每300秒（5分钟）至少10个key发生变化，产生快照</span><br><span class="line">save 60 10000 //每60秒（1分钟）至少10000个key发生变化，产生快照</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Redis-持久化之AOF"><a href="#Redis-持久化之AOF" class="headerlink" title="Redis 持久化之AOF"></a>Redis 持久化之AOF</h2><p>由于快照方式是在一定间隔时间做一次的，所以如果redis 意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。</p>
<p>Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof 持久化方式时,redis 会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</p>
<h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p>有三种方式如下（默认是：每秒 fsync 一次） appendonly yes -启用 aof 持久化方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化</span><br><span class="line">appendfsync everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中</span><br><span class="line">appendfsync no //完全依赖 os，性能最好,持久化没保证</span><br></pre></td></tr></table></figure>

<h3 id="产生的问题"><a href="#产生的问题" class="headerlink" title="产生的问题"></a>产生的问题</h3><p>aof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用 incr test命令 100 次，文件中必须保存全部的 100 条命令，其实有 99 条都是多余的。</p>
<h1 id="Redis-多数据库"><a href="#Redis-多数据库" class="headerlink" title="Redis 多数据库"></a>Redis 多数据库</h1><p>Redis下，数据库是由一个整数索引标识，而不是由一个数据库名称。默认情况下，一个客户端连接到数据库0。<br>redis配置文件中下面的参数来控制数据库总数：<br>database 16 //(从0开始 1 2 3 …15)<br>select 数据库//数据库的切换</p>
<p>移动数据（将当前key移动另个库)<br>move key名称 数据库<br>数据库清空：<br>flushdb //清除当前数据库的所有key<br>flushall //清除整个Redis的数据库所有key</p>
<h1 id="Redis-配置文件"><a href="#Redis-配置文件" class="headerlink" title="Redis 配置文件"></a>Redis 配置文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">是否在后台运行；no：不是后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否开启保护模式，默认开启。要是配置里没有指定<span class="built_in">bind</span>和密码。开启该参数后，redis只会本地进行访问，拒绝外部访问。</span></span><br><span class="line">protected-mode yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis的进程文件</span></span><br><span class="line">pidfile /var/run/redis/redis-server.pid</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis监听的端口号。</span></span><br><span class="line">port 6379</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。该内核参数默认值一般是128，对于负载很大的服务程序来说大大的不够。一般会将它修改为2048或者更大。在/etc/sysctl.conf中添加:net.core.somaxconn = 2048，然后在终端中执行sysctl -p。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 0.0.0.0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket来让redis支持监听本地连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocket /var/run/redis/redis.sock</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">配置unix socket使用文件的权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unixsocketperm 700</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span></span><br><span class="line">timeout 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">tcp keepalive参数。如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span></span><br><span class="line">loglevel notice</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。</span></span><br><span class="line">logfile /var/log/redis/redis-server.log</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否打开记录syslog功能</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-enabled no</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">syslog的标识符。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-ident redis</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">日志的来源、设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> syslog-facility local0</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据库的数量，默认使用的数据库是DB 0。可以通过SELECT命令选择一个db</span></span><br><span class="line">databases 16</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> redis是基于内存的数据库，可以通过设置该值定期写入磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉“save”这一行配置项就可以让保存数据库功能失效</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">rdb文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span></span><br><span class="line">dir /data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 主从复制 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制选项，slave复制对应的master。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果master设置了requirepass，那么slave要连上master，需要有master的密码才行。masterauth就是用来配置master的密码，这样可以在连上master后进行认证。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求。2) 如果slave-serve-stale-data设置为no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误”SYNC with master <span class="keyword">in</span> progress”。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制连接超时时间。master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-size 5mb</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-ttl 3600</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-to-write 3</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置1或另一个设置为0禁用这个特性。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> By default min-slaves-to-write is <span class="built_in">set</span> to 0 (feature disabled) and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag is <span class="built_in">set</span> to 10.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 安全相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证。使用requirepass的时候需要注意，因为redis太快了，每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。注意只有密码没有用户名。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">设置成一个空的值，可以禁止一个命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">""</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 进程限制相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 10000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">内存容量超过maxmemory后的处理策略。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：<span class="built_in">set</span> setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx <span class="built_in">exec</span> sort。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy noeviction</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## APPEND ONLY 持久化方式 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span></span><br><span class="line">appendonly no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名</span></span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof持久化策略的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always表示每次写入都执行fsync，以保证数据同步到磁盘。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题。如果对延迟要求很高的应用，这个字段可以设置为yes，，设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,不会造成阻塞的问题（因为没有磁盘竞争），等rewrite完成后再写入，这个时候redis会丢失数据。Linux的默认fsync策略是30秒。可能丢失30秒数据。因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个<span class="built_in">log</span>给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## LUA SCRIPTING ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果达到最大时间限制（毫秒），redis会记个<span class="built_in">log</span>，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 集群相关 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群开关，默认是不开启集群模式。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-enabled yes</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-config-file nodes-6379.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">节点互连超时的阀值。集群节点超时毫秒数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-node-timeout 15000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-slave-validity-factor 10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-migration-barrier 1</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cluster-require-full-coverage yes</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## SLOW LOG 慢查询日志 ###############</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## 延迟监控 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## EVENT NOTIFICATION 订阅通知 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#K 键空间通知，所有通知以 __keyspace@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#E 键事件通知，所有通知以 __keyevent@__ 为前缀</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#$ 字符串命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#l 列表命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#s 集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#h 哈希命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#z 有序集合命令的通知</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#x 过期事件：每当有过期键被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#A 参数 g$lshzxe 的别名</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</span></span><br><span class="line"> </span><br><span class="line">notify-keyspace-events ""</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############## ADVANCED CONFIG 高级配置 ###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于<span class="built_in">hash</span>-max-ziplist-entries的用ziplist，大于<span class="built_in">hash</span>-max-ziplist-entries用<span class="built_in">hash</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于<span class="built_in">hash</span>-max-ziplist-value的用ziplist，大于<span class="built_in">hash</span>-max-ziplist-value用<span class="built_in">hash</span>。</span></span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于list-max-ziplist-entries用ziplist，大于list-max-ziplist-entries用list。</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于list-max-ziplist-value的用ziplist，大于list-max-ziplist-value用list。</span></span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于<span class="built_in">set</span>-max-intset-entries用iniset，大于<span class="built_in">set</span>-max-intset-entries用<span class="built_in">set</span>。</span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。</span></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的<span class="built_in">hash</span>表进行重新<span class="built_in">hash</span>，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</span></span><br><span class="line">activerehashing yes</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对于normal client，第一个0表示取消hard <span class="built_in">limit</span>，第二个0和第三个0表示取消soft <span class="built_in">limit</span>，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"><span class="meta">#</span><span class="bash">对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"><span class="meta">#</span><span class="bash">对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</span></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">redis执行任务的频率为1s除以hz。</span></span><br><span class="line">hz 10</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<h1 id="Redis-使用"><a href="#Redis-使用" class="headerlink" title="Redis 使用"></a>Redis 使用</h1><ol>
<li>Jedis 客户端<br>在官方网站列一些Java客户端访问，有：Jedis/Redisson/Jredis/JDBC-Redis等，其中官方推荐使用Jedis和Redisson。常用Jedis。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>测试是否连接成功<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Redis</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(host);</span><br><span class="line">        System.out.<span class="built_in">println</span>(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>SpringBoot 集成Redis</li>
</ol>
<ul>
<li><p>新建一个springboot maven项目</p>
</li>
<li><p>pom.xml 引入Redis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类 RedsiApplication.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRedisApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloRedisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Redis配置类 RedisConfig</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> RedisConfig <span class="keyword">extends</span> CachingConfigurerSupport &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * retemplate相关配置</span></span><br><span class="line"><span class="comment">     * @param factory</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 值采用json序列化</span></span><br><span class="line">        template.setValueSerializer(jacksonSeial);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置hash key 和value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(jacksonSeial);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对hash类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param redisTemplate</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashOperations&lt;<span class="built_in">String</span>, <span class="built_in">String</span>, <span class="built_in">Object</span>&gt; hashOperations(RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对redis字符串类型数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param redisTemplate</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ValueOperations&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; valueOperations(RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对链表类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param redisTemplate</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ListOperations&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; listOperations(RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对无序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param redisTemplate</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SetOperations&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; setOperations(RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param redisTemplate</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ZSetOperations&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; zSetOperations(RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实体类 User.java</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Integer</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Integer</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>工具类 RedisUtil.java</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> class RedisUtil &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisUtil(RedisTemplate&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; redisTemplate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> expire(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">long</span> time)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.expire(<span class="built_in">key</span>, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * @param key 键 不能为null</span></span><br><span class="line"><span class="comment">     * @return 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> getExpire(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(<span class="built_in">key</span>,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hasKey(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(<span class="built_in">key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * @param key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> del(<span class="keyword">String</span> ... <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">key</span>!=<span class="keyword">null</span>&amp;&amp;<span class="built_in">key</span>.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">key</span>.length==<span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(<span class="built_in">key</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(<span class="built_in">key</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">key</span>==<span class="keyword">null</span>?<span class="keyword">null</span>:redisTemplate.opsForValue().<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().<span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * @return true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">Object</span> value,<span class="keyword">long</span> time)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().<span class="built_in">set</span>(<span class="built_in">key</span>, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> incr(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> delta)&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(<span class="built_in">key</span>, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> decr(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> delta)&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(<span class="built_in">key</span>, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * @param key 键 不能为null</span></span><br><span class="line"><span class="comment">     * @param item 项 不能为null</span></span><br><span class="line"><span class="comment">     * @return 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> item)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().<span class="built_in">get</span>(<span class="built_in">key</span>, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">Object</span>,<span class="keyword">Object</span>&gt; hmget(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param map 对应多个键值</span></span><br><span class="line"><span class="comment">     * @return true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hmset(<span class="keyword">String</span> <span class="built_in">key</span>, Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; <span class="built_in">map</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(<span class="built_in">key</span>, <span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param map 对应多个键值</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     * @return true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hmset(<span class="keyword">String</span> <span class="built_in">key</span>, Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; <span class="built_in">map</span>, <span class="keyword">long</span> time)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(<span class="built_in">key</span>, <span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(<span class="built_in">key</span>, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param item 项</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hset(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> item,<span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(<span class="built_in">key</span>, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param item 项</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * @return true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hset(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> item,<span class="keyword">Object</span> value,<span class="keyword">long</span> time) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(<span class="built_in">key</span>, item, value);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(<span class="built_in">key</span>, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * @param key 键 不能为null</span></span><br><span class="line"><span class="comment">     * @param item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> hdel(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span>... item)&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(<span class="built_in">key</span>,item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * @param key 键 不能为null</span></span><br><span class="line"><span class="comment">     * @param item 项 不能为null</span></span><br><span class="line"><span class="comment">     * @return true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hHasKey(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> item)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(<span class="built_in">key</span>, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param item 项</span></span><br><span class="line"><span class="comment">     * @param by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> hincr(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> item,<span class="keyword">double</span> by)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(<span class="built_in">key</span>, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param item 项</span></span><br><span class="line"><span class="comment">     * @param by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> hdecr(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> item,<span class="keyword">double</span> by)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(<span class="built_in">key</span>, item,-by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="keyword">Object</span>&gt; sGet(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(<span class="built_in">key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> sHasKey(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">Object</span> value)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(<span class="built_in">key</span>, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * @return 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sSet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span>...values) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().<span class="built_in">add</span>(<span class="built_in">key</span>, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     * @param values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * @return 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sSetAndTime(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">long</span> time,<span class="keyword">Object</span>...values) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().<span class="built_in">add</span>(<span class="built_in">key</span>, values);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                expire(<span class="built_in">key</span>, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sGetSetSize(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().<span class="built_in">size</span>(<span class="built_in">key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * @return 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> setRemove(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> ...values) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(<span class="built_in">key</span>, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param start 开始</span></span><br><span class="line"><span class="comment">     * @param end 结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">Object</span>&gt; lGet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> start, <span class="keyword">long</span> end)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(<span class="built_in">key</span>, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lGetListSize(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().<span class="built_in">size</span>(<span class="built_in">key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> lGetIndex(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">long</span> index)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(<span class="built_in">key</span>, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> lSet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> lSet(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value, <span class="keyword">long</span> time) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(<span class="built_in">key</span>, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> lSet(<span class="keyword">String</span> <span class="built_in">key</span>, List&lt;<span class="keyword">Object</span>&gt; value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @param time 时间(秒)</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> lSet(<span class="keyword">String</span> <span class="built_in">key</span>, List&lt;<span class="keyword">Object</span>&gt; value, <span class="keyword">long</span> time) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(<span class="built_in">key</span>, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param index 索引</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> lUpdateIndex(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">long</span> index,<span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().<span class="built_in">set</span>(<span class="built_in">key</span>, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * @param key 键</span></span><br><span class="line"><span class="comment">     * @param count 移除多少个</span></span><br><span class="line"><span class="comment">     * @param value 值</span></span><br><span class="line"><span class="comment">     * @return 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> lRemove(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">long</span> count,<span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(<span class="built_in">key</span>, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询获取key值</span></span><br><span class="line"><span class="comment">     * @param pattern</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set keys(<span class="keyword">String</span> pattern)&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Redis的消息队列</span></span><br><span class="line"><span class="comment">     * @param channel</span></span><br><span class="line"><span class="comment">     * @param message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> convertAndSend(<span class="keyword">String</span> channel, <span class="keyword">Object</span> message)&#123;</span><br><span class="line">        redisTemplate.convertAndSend(channel,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器类 RedisController.java</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line"><span class="keyword">public</span> class RedisController &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> ExpireTime = <span class="number">60</span>;   <span class="comment">// redis中存储的过期时间60s</span></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"set"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> redisset(<span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        User user =<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="built_in">boolean</span> result = redisUtil.<span class="built_in">set</span>(<span class="built_in">key</span>, user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"get/&#123;key&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> redisget(@PathVariable(<span class="string">"key"</span>) <span class="keyword">String</span> <span class="built_in">key</span>)&#123;</span><br><span class="line">        <span class="keyword">Object</span> result = redisUtil.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试<br>浏览器访问 设置<br><a href="http://localhost:8088/set/aaa" target="_blank" rel="noopener">http://localhost:8088/set/aaa</a><br>浏览器访问 获取<br><a href="http://localhost:8088/get/aaa" target="_blank" rel="noopener">http://localhost:8088/get/aaa</a><br>页面返回<br>{“id”:1,”age”:20,”username”:”zhb”}</p>
</li>
</ul>
<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，如果数据库也查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p>
<p>解决办法： 持久层查询不到就缓存空结果，查询时先判断缓存中是否exists(key) ,如果有直接返回空，没有则查询后返回，<br>简单的伪代码如下：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先到redis中查询数据</span></span><br><span class="line"><span class="keyword">if</span>(redis.exist(<span class="built_in">key</span>))&#123;</span><br><span class="line">	<span class="keyword">String</span> <span class="built_in">str</span> = redis.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">	<span class="comment">//如果为空字符串那么直接返回null</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">str</span> == <span class="string">""</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//不是的话直接返回该字符串</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line"><span class="comment">//redis 没有数据则到DB中查找</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">String</span> value = selectFromDB(<span class="built_in">key</span>);</span><br><span class="line">	<span class="comment">//如果数据库也没有，那么在redis中也要设置一个key,同时设置失效时间</span></span><br><span class="line">	<span class="comment">//这样下次查询的时就走redis</span></span><br><span class="line">	<span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">		reids.<span class="built_in">set</span>(<span class="built_in">key</span>, <span class="string">""</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	redis.<span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">	<span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：insert时需清除查询的key，否则即便DB中有值也查询不到(当然也可以设置空缓存的过期时间）</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>在某一个时间段，缓存集中大量失效时，引发大量查询数据库。</p>
<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。<br>在做电商项目的时候，一般是采取不同分类商品，缓存不同周期。在同一分类中的商品，加上一个随机因子。这样能尽可能分散缓存过期时间，而且，热门类目的商品缓存时间长一些，冷门类目的商品缓存时间短一些，也能节省缓存服务的资源。</p>
<p>解决方案<br>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<p>解决办法：</p>
<ol>
<li>使用锁</li>
</ol>
<ul>
<li>单机用synchronized</li>
<li>分布式用分布式锁<br>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。<br>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。<br>简单的伪代码如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;</span><br><span class="line">	String value = redis.get(key);</span><br><span class="line">	<span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//代表缓存值过期</span></span><br><span class="line">		<span class="comment">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span></span><br><span class="line">		<span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">//代表设置成功</span></span><br><span class="line">			value = db.get(key);</span><br><span class="line">			redis.set(key, value, expire_secs);</span><br><span class="line">			redis.del(key_mutex);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;  <span class="comment">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span></span><br><span class="line">			sleep(<span class="number">50</span>);</span><br><span class="line">			get(key);  <span class="comment">//重试</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> value;      </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p>一个master可以拥有多个slave，但是一个slave只能对应一个master。这样，当某个slave挂了不影响其他slave的读和master的读和写，重新启动后会，数据会从master上同步过来。<br>在主从模式下，因为只有一个主节点可以写，而主，从节点都可以读，所以通常主节点负责写，从节点负责读。<br>但是，当唯一的master挂了以后，虽然这样并不影响slave的读，但redis也不再提供写服务，需要将master重启后，redis才重新对外提供写服务。<br><img src="03.jpg" alt="03.jpg"></p>
<ol>
<li><p>环境说明<br>主机名称            IP地址       redis版本和角色说明<br>redis-master    192.168.56.11    redis 5.0.3（主）<br>redis-slave01    192.168.56.12    redis 5.0.3（从）<br>redis-slave02    192.168.56.13    redis 5.0.3（从）</p>
</li>
<li><p>修改主从的redis配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis-master ~]# grep -Ev "^$|#" /usr/local/redis/redis.conf </span><br><span class="line">bind 192.168.56.11</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile "/var/log/redis.log"</span><br><span class="line">dir /var/redis/</span><br><span class="line"></span><br><span class="line">[root@redis-slave01 ~]# grep -Ev "^$|#" /usr/local/redis/redis.conf</span><br><span class="line">bind 192.168.56.12</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile "/var/log/redis.log"</span><br><span class="line">dir /var/redis/</span><br><span class="line">replicaof 192.168.56.11 6379	#配置为master的从，如果master上有密码配置，还需要增加下面一项密码配置</span><br><span class="line">masterauth 123456	#配置主的密码</span><br><span class="line"></span><br><span class="line">[root@redis-slave02 ~]# grep -Ev "^$|#" /usr/local/redis/redis.conf</span><br><span class="line">bind 192.168.56.13</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile "/var/log/redis.log"</span><br><span class="line">dir /var/redis/</span><br><span class="line">replicaof 192.168.56.11 6379	#配置为master的从</span><br><span class="line">masterauth 123456	#配置主的密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动主从redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis-master ~]# systemctl start redis</span><br><span class="line">[root@redis-slave01 ~]# systemctl start redis</span><br><span class="line">[root@redis-slave02 ~]# systemctl start redis</span><br><span class="line"></span><br><span class="line">[root@redis-master ~]# netstat -tulnp |grep redis</span><br><span class="line">tcp        0      0 192.168.56.11:6379      0.0.0.0:*               LISTEN      1295/redis-server 1 </span><br><span class="line">[root@redis-slave01 ~]# netstat -tulnp |grep redis</span><br><span class="line">tcp        0      0 192.168.56.12:6379      0.0.0.0:*               LISTEN      1625/redis-server 1 </span><br><span class="line">[root@redis-slave02 ~]# netstat -tulnp |grep redis</span><br><span class="line">tcp        0      0 192.168.56.13:6379      0.0.0.0:*               LISTEN      1628/redis-server 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据同步验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis-master ~]# redis-cli -h 192.168.56.11	#主上写入数据</span><br><span class="line">192.168.56.11:6379&gt; KEYS *</span><br><span class="line">(empty list or set)</span><br><span class="line">192.168.56.11:6379&gt; set k1 123</span><br><span class="line">OK</span><br><span class="line">192.168.56.11:6379&gt; set k2 456</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@redis-slave01 ~]# redis-cli -h 192.168.56.12	#slave01上查看是否数据同步</span><br><span class="line">192.168.56.12:6379&gt; KEYS *</span><br><span class="line">1) "k2"</span><br><span class="line">2) "k1"</span><br><span class="line">192.168.56.12:6379&gt; get k1</span><br><span class="line">"123"</span><br><span class="line">192.168.56.12:6379&gt; get k2</span><br><span class="line">"456"</span><br><span class="line"></span><br><span class="line">[root@redis-slave02 ~]# redis-cli -h 192.168.56.13	#slave02上查看是否数据同步</span><br><span class="line">192.168.56.13:6379&gt; KEYS *</span><br><span class="line">1) "k2"</span><br><span class="line">2) "k1"</span><br><span class="line">192.168.56.13:6379&gt; get k1</span><br><span class="line">"123"</span><br><span class="line">192.168.56.13:6379&gt; get k2</span><br><span class="line">"456"</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Sentinel模式"><a href="#Sentinel模式" class="headerlink" title="Sentinel模式"></a>Sentinel模式</h2><ol>
<li><p>介绍<br>Redis Sentinel是Redis高可用的实现方案。Sentinel是一个管理多个Redis实例的工具，它可以实现对Redis的监控、通知、自动故障转移。<br>sentinel模式是建立在主从模式的基础上，避免单个master挂了以后，redis不能提供写服务。因为从节点上备份了主节点的所有数据，那么当master挂了以后，sentinel会在slave中选择一个作为master，并修改它们的配置文件，其他slave的配置文件也会被修改，比如slaveof属性会指向新的master，比如之前配置的密码。此时，客户端就不是直接连接Redis，而是连接sentinel的ip和port，由sentinel来提供具体Redis服务。<br><img src="04.jpeg" alt="04.jpg"><br>把之前挂了的master重新启动后，它将不再是master而是作为slave接收新的master的同步数据。</p>
</li>
<li><p>Redis Sentinel的主要功能<br>Sentinel的主要功能包括主节点存活检测、主从运行情况检测、自动故障转移（failover）、主从切换。Redis的Sentinel最小配置是一主一从。 Redis的Sentinel系统可以用来管理多个Redis服务器，该系统可以执行以下四个任务：<br>监控<br>Sentinel会不断的检查主服务器和从服务器是否正常运行。<br>通知<br>当被监控的某个Redis服务器出现问题，Sentinel通过API脚本向管理员或者其他的应用程序发送通知。<br>自动故障转移<br>当主节点不能正常工作时，Sentinel会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点， 并且将其他的从节点指向新的主节点。<br>配置提供者<br>在Redis Sentinel模式下，客户端应用在初始化时连接的是Sentinel节点集合，从中获取主节点的信息。</p>
</li>
<li><p>Redis Sentinel的工作流程<br>Sentinel是Redis的高可用性解决方案：<br>由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，以及所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求 。如下图：<br><img src="06.png" alt="06.jpg"><br>在Redis高可用架构中，Sentinel往往不是只有一个，而是有3个或者以上。目的是为了让其更加可靠，毕竟主和从切换角色这个过程还是蛮复杂的。</p>
</li>
<li><p>环境说明<br> 主机名称          IP地址          redis版本和角色说明<br>redis-master    192.168.56.11:6379    redis 5.0.3（主）<br>redis-slave01    192.168.56.12:6379    redis 5.0.3（从）<br>redis-slave02    192.168.56.13:6379    redis 5.0.3（从）<br>redis-master    192.168.56.11:26379    Sentinel01<br>redis-slave01    192.168.56.12:26379    Sentinel02<br>redis-slave02    192.168.56.13:26379    Sentinel03</p>
</li>
<li><p>部署Sentinel<br>Sentinel.conf配置文件主要参数解析：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 端口</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pid文件路径</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志文件路径</span></span><br><span class="line">logfile "/var/log/sentinel.log"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义Redis主的别名, IP, 端口，这里的2指的是需要至少2个Sentinel认为主Redis挂了才最终会采取下一步行为</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果mymaster 30秒内没有响应，则认为其主观失效</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果master重新选出来后，其它slave节点能同时并行从新master同步数据的台数有多少个，显然该值越大，所有slave节点完成同步切换的整体速度越快，但如果此时正好有人在访问这些slave，可能造成读取失败，影响面会更广。最保守的设置为1，同一时间，只能有一台干这件事，这样其它slave还能继续服务，但是所有slave全部完成缓存更新同步的进程将变慢。</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该参数指定一个时间段，在该时间段内没有实现故障转移成功，则会再一次发起故障转移的操作，单位毫秒</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不允许使用SENTINEL SET设置notification-script和client-reconfig-script。</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure>
<p>修改三台Sentinel的配置文件，如下:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@redis-master ~]# grep -Ev <span class="string">"^$|#"</span> /usr/local/redis/sentinel.conf </span><br><span class="line">port 26379</span><br><span class="line">daemonize <span class="literal">yes</span></span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line">logfile <span class="string">"/var/log/sentinel.log"</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line">sentinel monitor mymaster 192.168.56.11 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel deny-scripts-reconfig <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">[root@redis-slave01 ~]# grep -Ev <span class="string">"^$|#"</span> /usr/local/redis/sentinel.conf </span><br><span class="line">port 26379</span><br><span class="line">daemonize <span class="literal">yes</span></span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line">logfile <span class="string">"/var/log/sentinel.log"</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line">sentinel monitor mymaster 192.168.56.11 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel deny-scripts-reconfig <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">[root@redis-slave02 ~]# grep -Ev <span class="string">"^$|#"</span> /usr/local/redis/sentinel.conf </span><br><span class="line">port 26379</span><br><span class="line">daemonize <span class="literal">yes</span></span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line">logfile <span class="string">"/var/log/sentinel.log"</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line">sentinel monitor mymaster 192.168.56.11 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel deny-scripts-reconfig <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Sentinel<br>启动的顺序：主Redis –&gt; 从Redis –&gt; Sentinel1/2/3</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>redis-master ~]# redis-sentinel /usr/local/redis/sentinel.conf </span><br><span class="line">[<span class="symbol">root@</span>redis-master ~]# ps -ef |grep redis</span><br><span class="line">root      <span class="number">1295</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">03</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span> /usr/local/redis/src/redis-server <span class="number">192.168</span><span class="number">.56</span><span class="number">.11</span>:<span class="number">6379</span></span><br><span class="line">root      <span class="number">1407</span>     <span class="number">1</span>  <span class="number">1</span> <span class="number">14</span>:<span class="number">40</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis-sentinel *:<span class="number">26379</span> [sentinel]</span><br><span class="line">root      <span class="number">1412</span>  <span class="number">1200</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">40</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> redis</span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>redis-slave01 ~]# redis-sentinel /usr/local/redis/sentinel.conf </span><br><span class="line">[<span class="symbol">root@</span>redis-slave01 ~]# ps -ef |grep redis</span><br><span class="line">root      <span class="number">1625</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">04</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span> /usr/local/redis/src/redis-server <span class="number">192.168</span><span class="number">.56</span><span class="number">.12</span>:<span class="number">6379</span></span><br><span class="line">root      <span class="number">1715</span>     <span class="number">1</span>  <span class="number">1</span> <span class="number">14</span>:<span class="number">41</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis-sentinel *:<span class="number">26379</span> [sentinel]</span><br><span class="line">root      <span class="number">1720</span>  <span class="number">1574</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">41</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> redis</span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>redis-slave02 ~]# redis-sentinel /usr/local/redis/sentinel.conf </span><br><span class="line">[<span class="symbol">root@</span>redis-slave02 ~]# ps -ef |grep redis</span><br><span class="line">root      <span class="number">1628</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">07</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span> /usr/local/redis/src/redis-server <span class="number">192.168</span><span class="number">.56</span><span class="number">.13</span>:<span class="number">6379</span></span><br><span class="line">root      <span class="number">1709</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">42</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis-sentinel *:<span class="number">26379</span> [sentinel]</span><br><span class="line">root      <span class="number">1714</span>  <span class="number">1575</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">42</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="built_in">auto</span> redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>Sentinel操作</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>redis-master ~]# redis-cli -p <span class="number">26379</span>	#哨兵模式查看</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">26379</span>&gt; sentinel master mymaster	#输出被监控的主节点的状态信息</span><br><span class="line"> <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">"mymaster"</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">"192.168.56.11"</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">"6379"</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">"bae06cc3bc6dcbff7c2de1510df7faf1a6eb6941"</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line"><span class="number">10</span>) <span class="string">"master"</span></span><br><span class="line">......</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">26379</span>&gt; sentinel slaves mymaster	#查看mymaster的从信息，可以看到有<span class="number">2</span>个从节点</span><br><span class="line"><span class="number">1</span>)  <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line">    <span class="number">2</span>) <span class="string">"192.168.56.12:6379"</span></span><br><span class="line">    <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line">    <span class="number">4</span>) <span class="string">"192.168.56.12"</span></span><br><span class="line">    <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line">    <span class="number">6</span>) <span class="string">"6379"</span></span><br><span class="line">    <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line">    <span class="number">8</span>) <span class="string">"c86027e7bdd217cb584b1bd7a6fea4ba79cf6364"</span></span><br><span class="line">    <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line">   <span class="number">10</span>) <span class="string">"slave"</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2</span>)  <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line">    <span class="number">2</span>) <span class="string">"192.168.56.13:6379"</span></span><br><span class="line">    <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line">    <span class="number">4</span>) <span class="string">"192.168.56.13"</span></span><br><span class="line">    <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line">    <span class="number">6</span>) <span class="string">"6379"</span></span><br><span class="line">    <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line">    <span class="number">8</span>) <span class="string">"61597fdb615ecf8bd7fc18e143112401ed6156ec"</span></span><br><span class="line">    <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line">   <span class="number">10</span>) <span class="string">"slave"</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">26379</span>&gt; sentinel sentinels mymaster	#查看其它sentinel信息</span><br><span class="line"><span class="number">1</span>)  <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line">    <span class="number">2</span>) <span class="string">"ba12e2a4023d2e9bcad282395ba6b14030920070"</span></span><br><span class="line">    <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line">    <span class="number">4</span>) <span class="string">"192.168.56.12"</span></span><br><span class="line">    <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line">    <span class="number">6</span>) <span class="string">"26379"</span></span><br><span class="line">    <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line">    <span class="number">8</span>) <span class="string">"ba12e2a4023d2e9bcad282395ba6b14030920070"</span></span><br><span class="line">    <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line">   <span class="number">10</span>) <span class="string">"sentinel"</span></span><br><span class="line">......</span><br><span class="line"><span class="number">2</span>)  <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line">    <span class="number">2</span>) <span class="string">"14fca3f851e9e1bd3a4a0dc8a9e34bb237648455"</span></span><br><span class="line">    <span class="number">3</span>) <span class="string">"ip"</span></span><br><span class="line">    <span class="number">4</span>) <span class="string">"192.168.56.13"</span></span><br><span class="line">    <span class="number">5</span>) <span class="string">"port"</span></span><br><span class="line">    <span class="number">6</span>) <span class="string">"26379"</span></span><br><span class="line">    <span class="number">7</span>) <span class="string">"runid"</span></span><br><span class="line">    <span class="number">8</span>) <span class="string">"14fca3f851e9e1bd3a4a0dc8a9e34bb237648455"</span></span><br><span class="line">    <span class="number">9</span>) <span class="string">"flags"</span></span><br><span class="line">   <span class="number">10</span>) <span class="string">"sentinel"</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>参考<a href="https://www.cnblogs.com/linuxk/p/10718153.html#1%E3%80%81%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://www.cnblogs.com/linuxk/p/10718153.html#1%E3%80%81%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E</a></em></p>
<h2 id="Cluster模式"><a href="#Cluster模式" class="headerlink" title="Cluster模式"></a>Cluster模式</h2><p>Cluster模式是建立在Sentinel模式的基础上的，当数据多到需要动态扩容的时候，前面两种就不行了，需要对数据进行分片，根据一定的规则把redis数据分配到多台机器。<br><img src="05.jpeg" alt="05.jpg"><br>该模式就支持动态扩容，可以在线增加或删除节点，而且客户端可以连接任何一个主节点进行读写，不过此时的从节点仅仅只是备份的作用。至于为何能做到动态扩容，主要是因为Redis集群没有使用一致性hash,而是使用的哈希槽。Redis集群会有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，而集群的每个节点负责一部分hash槽。</p>
<p>那么这样就很容易添加或者删除节点， 比如如果我想新添加个新节点， 我只需要从已有的节点中的部分槽到过来；如果我想移除某个节点，就只需要将该节点的槽移到其它节点上，然后将没有任何槽的A节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</p>
<p>需要注意的是，该模式下不支持同时处理多个key（如MSET/MGET），因为redis需要把key均匀分布在各个节点上，并发量很高的情况下同时创建key-value会降低性能并导致不可预测的行为。</p>
<p>搭建集群<br>这里就直接搭建较为复杂的Cluster模式集群，也是企业级开发过程中使用最多的。</p>
<ol>
<li>安装Redis, 安装完成，在/usr/local/bin/目录下就会看见<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qyjy bin]# ls</span><br><span class="line">dump.rdb  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br></pre></td></tr></table></figure></li>
<li>建Redis节点目录</li>
</ol>
<ul>
<li><p>新建Redis集群目录<br>mkdir /usr/local/redis_cluster</p>
</li>
<li><p>进入redis_cluster目录<br>cd /usr/local/redis_cluster</p>
</li>
<li><p>创建Redis节点目录<br>mkdir -p 7000 7001 7002 7003 7004 7005</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy redis_cluster]# ls</span><br><span class="line"><span class="number">7000</span>      <span class="number">7001</span>      <span class="number">7002</span>      <span class="number">7003</span>      <span class="number">7004</span>      <span class="number">7005</span></span><br></pre></td></tr></table></figure></li>
<li><p>把Redis安装目录下的src文件夹拷贝到redis_cluster<br>cp /root/redis-5.0.7/src/  ./</p>
</li>
<li><p>把Redis安装目录下的redis.conf配置文件拷贝到刚创建好的7000 - 7005目录下,类似同样的操作操作再来五次。<br>cp /root/redis-5.0.7/redis.conf ./7000/</p>
</li>
<li><p>修改redis.conf文件，7000-7005里每个配置文件端口都要修改,类似同样的操作操作再来五次</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cluster-enabled <span class="literal">yes</span>（启动集群模式</span><br><span class="line">cluster-config-file nodes-7000.conf</span><br><span class="line">port 7000</span><br><span class="line">pidfile /var/run/redis_7000.pid</span><br><span class="line">logfile <span class="string">"7000.log"</span></span><br></pre></td></tr></table></figure></li>
<li><p>逐个启动redis节点</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7000</span>/redis.conf</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7001</span>/redis.conf</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7002</span>/redis.conf</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7003</span>/redis.conf</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7004</span>/redis.conf</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server <span class="regexp">/usr/</span>local<span class="regexp">/redis_cluster/</span><span class="number">7005</span>/redis.conf</span><br></pre></td></tr></table></figure></li>
<li><p>ps -el | grep redis</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>qyjy bin]# ps -ef | grep redis</span><br><span class="line">root     <span class="number">10139</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">32</span> ./src/redis-server *:<span class="number">7000</span> [cluster]</span><br><span class="line">root     <span class="number">10144</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">32</span> ./src/redis-server *:<span class="number">7001</span> [cluster]</span><br><span class="line">root     <span class="number">10149</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">31</span> ./src/redis-server *:<span class="number">7002</span> [cluster]</span><br><span class="line">root     <span class="number">10154</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">32</span> ./src/redis-server *:<span class="number">7003</span> [cluster]</span><br><span class="line">root     <span class="number">10159</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">32</span> ./src/redis-server *:<span class="number">7004</span> [cluster]</span><br><span class="line">root     <span class="number">10164</span>     <span class="number">1</span>  <span class="number">0</span> Jul26 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">32</span> ./src/redis-server *:<span class="number">7005</span> [cluster]</span><br></pre></td></tr></table></figure></li>
<li><p>搭建集群<br>此时的节点虽然都启动成功了，但他们还不在一个集群里面，不能互相发现，测试会报错：(error) CLUSTERDOWN Hash slot not served。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create ip:<span class="number">7000</span> ip:<span class="number">7001</span> ip:<span class="number">7002</span> ip:<span class="number">7003</span> ip:<span class="number">7004</span> ip:<span class="number">7005</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>cluster-replicas 1 这个指的是从机的数量，表示我们希望为集群中的每个主节点创建一个从节点。</p>
</li>
<li><p>测试<br>现在通过客户端命令连接上，通过集群命令看一下状态和节点信息等</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/redis-cli -p <span class="number">7000</span> -a <span class="number">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>集群查看命令<br>cluster info</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span>&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">cluster_state</span><span class="selector-pseudo">:ok</span></span><br><span class="line"><span class="selector-tag">cluster_slots_assigned</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_ok</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_pfail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_fail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_known_nodes</span><span class="selector-pseudo">:6</span></span><br><span class="line"><span class="selector-tag">cluster_size</span><span class="selector-pseudo">:3</span></span><br><span class="line"><span class="selector-tag">cluster_current_epoch</span><span class="selector-pseudo">:6</span></span><br><span class="line"><span class="selector-tag">cluster_my_epoch</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_ping_sent</span><span class="selector-pseudo">:155323</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_pong_sent</span><span class="selector-pseudo">:154613</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_sent</span><span class="selector-pseudo">:309936</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_ping_received</span><span class="selector-pseudo">:154608</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_pong_received</span><span class="selector-pseudo">:155323</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_meet_received</span><span class="selector-pseudo">:5</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_received</span><span class="selector-pseudo">:309936</span></span><br></pre></td></tr></table></figure>
<p>cluster nodes</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7000</span>&gt; cluster nodes</span><br><span class="line"><span class="number">9984723</span>df76fae00576ae52e98f41526b981c479 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7003@</span><span class="number">17003</span> slave <span class="number">17e95876f</span>21a0fb4364c9293ef4bf63c5d74bcbd <span class="number">0</span> <span class="number">1595842451000</span> <span class="number">4</span> connected</span><br><span class="line">b7e3c728bace39f0dfcea7815aff6bb0104a1741 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7000@</span><span class="number">17000</span> myself,master - <span class="number">0</span> <span class="number">1595842449000</span> <span class="number">1</span> connected <span class="number">0</span><span class="number">-5460</span></span><br><span class="line">e8f9106a7df24e55886e8f3ad21c3bcdd85d9e9d <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7001@</span><span class="number">17001</span> master - <span class="number">0</span> <span class="number">1595842450000</span> <span class="number">2</span> connected <span class="number">5461</span><span class="number">-10922</span></span><br><span class="line">eb6efd84fa829d1f29d38aa24cda33723dfb9708 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7004@</span><span class="number">17004</span> slave b7e3c728bace39f0dfcea7815aff6bb0104a1741 <span class="number">0</span> <span class="number">1595842450604</span> <span class="number">5</span> connected</span><br><span class="line"><span class="number">17e95876f</span>21a0fb4364c9293ef4bf63c5d74bcbd <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7002@</span><span class="number">17002</span> master - <span class="number">0</span> <span class="number">1595842451104</span> <span class="number">3</span> connected <span class="number">10923</span><span class="number">-16383</span></span><br><span class="line"><span class="number">83e664f</span>7649f4e7e8cb2baa9cffe31e38e97d7c7 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="symbol">7005@</span><span class="number">17005</span> slave e8f9106a7df24e55886e8f3ad21c3bcdd85d9e9d <span class="number">0</span> <span class="number">1595842450102</span> <span class="number">6</span> connected</span><br></pre></td></tr></table></figure>
<p>Redis集群 常用命令</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">-&gt;cluster info ##打印集群的信息</span><br><span class="line">-&gt;cluster nodes ##列出集群当前已知的所有节点(node)，以及这些节点的相关信息</span><br><span class="line">-&gt;########################节点操作命名##########################</span><br><span class="line">-&gt;cluster meet &lt;ip&gt; &lt;port&gt; ##将ip和port所指定的节点添加到集群当中，让它成为集群的一份子</span><br><span class="line">-&gt;cluster forget &lt;node_id&gt; ##从集群中移除node_id指定的节点</span><br><span class="line">-&gt;cluster replicate &lt;node_id&gt; ##将当前节点设置为node_id指定的节点的从节点</span><br><span class="line">-&gt;cluster saveconfig ##将节点的配置文件保存到硬盘里面</span><br><span class="line">-&gt;cluster slaves &lt;node_id&gt; ##列出该slave节点的master节点</span><br><span class="line">-&gt;cluster set-config-epoch ##强制设置configEpoch</span><br><span class="line">-&gt;#########################槽(slot)##########################</span><br><span class="line">-&gt;cluster addslots &lt;slot&gt; [slot ...] ##将一个或多个槽(slot)指派(assign)给当前节点</span><br><span class="line">-&gt;cluster delslots &lt;slot&gt; [slot ...] ##移除一个或多个槽对当前节点的指派</span><br><span class="line">-&gt;cluster flushslots ##移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点</span><br><span class="line">-&gt;cluster setslot &lt;slot&gt; node &lt;node_id&gt; ##将槽slot指派给node_id指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽，然后再进行指派</span><br><span class="line">-&gt;cluster setslot &lt;slot&gt; migrating &lt;node_id&gt; ##将本节点的槽slot迁移到node_id指定的节点中</span><br><span class="line">-&gt;cluster setslot &lt;slot&gt; importing &lt;node_id&gt; ##从node_id 指定的节点中导入槽slot到本节点</span><br><span class="line">-&gt;cluster setslot &lt;slot&gt; stable ##取消对槽slot的导入(<span class="keyword">import</span>)或者迁移(migrate)</span><br><span class="line">键(key)</span><br><span class="line">-&gt;cluster keyslot &lt;key&gt; ##计算键key应该被放置在哪个槽上</span><br><span class="line">-&gt;cluster countkeysinslot &lt;slot&gt; ##返回槽slot目前包含的键值对数量</span><br><span class="line">-&gt;cluster getkeysinslot &lt;slot&gt; &lt;count&gt; ##返回count个slot槽中的键</span><br><span class="line">-&gt;cluster myid ##返回节点的ID</span><br><span class="line">-&gt;cluster slots ##返回节点负责的slot</span><br><span class="line">-&gt;cluster reset ##重置集群，慎用</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Redis-分布式锁"><a href="#Redis-分布式锁" class="headerlink" title="Redis 分布式锁"></a>Redis 分布式锁</h1><p>分布式锁一般有数据库乐观锁、基于Redis的分布式锁以及基于ZooKeeper的分布式锁三种实现方式，而本文将为大家带来的就是第二种基于Redis的分布式锁正确的实现方法，希望对大家会有所帮助。</p>
<p>可靠性</p>
<p>首先，想要保证分布式锁可以使用，下面这四个条件是必须要满足的：</p>
<p>1、互斥性。在任意时刻，只有一个客户端能持有锁。</p>
<p>2、不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p>
<p>3、具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</p>
<p>4、解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p>
<p>代码实现</p>
<p>引入Jedis开源组件</p>
<p>首先我们要通过Maven引入Jedis开源组件，在pom.xml文件加入下面的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加锁代码</p>
<p>正确代码<br>先展示代码，再带大家慢慢解释为什么这样实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，我们加锁就一行代码：jedis.set(String key, String value, String nxxx, String expx, int time)，这个set()方法一共有五个形参：</p>
<p>第一个为key，我们使用key来当锁，因为key是唯一的。</p>
<p>第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。</p>
<p>第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</p>
<p>第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</p>
<p>第五个为time，与第四个参数相呼应，代表key的过期时间。</p>
<p>总的来说，执行上面的set()方法就只会导致两种结果：</p>
<ol>
<li><p>当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。</p>
</li>
<li><p>已有锁存在，不做任何操作。</p>
</li>
</ol>
<p>错误示例1<br>比较常见的错误示例就是使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongGetLock1</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">    Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁</span></span><br><span class="line">        jedis.expire(lockKey, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setnx()方法作用就是SET IF NOT EXIST，expire()方法就是给锁加一个过期时间。乍一看好像和前面的set()方法结果一样，然而由于这是两条Redis命令，不具有原子性，如果程序在执行完setnx()之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法。</p>
<p>错误示例2<br>这一种错误示例就比较难以发现问题，而且实现也比较复杂。实现思路：使用jedis.setnx()命令实现加锁，其中key是锁，value是锁的过期时间。执行过程：1. 通过setnx()方法尝试加锁，如果当前锁不存在，返回加锁成功。2. 如果锁已经存在则获取锁的过期时间，和当前时间比较，如果锁已经过期，则设置新的过期时间，返回加锁成功。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wrongGetLock2</span><span class="params">(Jedis jedis, String lockKey, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> expires = System.currentTimeMillis() + expireTime;</span><br><span class="line">    String expiresStr = String.valueOf(expires);</span><br><span class="line">    <span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果锁存在，获取锁的过期时间</span></span><br><span class="line">    String currentValueStr = jedis.get(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">        <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span></span><br><span class="line">        String oldValueStr = jedis.getSet(lockKey, expiresStr);</span><br><span class="line">        <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">            <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他情况，一律返回加锁失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的错误之处在于：</p>
<ol>
<li><p>由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步。</p>
</li>
<li><p>当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但是这个客户端的锁的过期时间可能被其他客户端覆盖。</p>
</li>
<li><p>锁不具备拥有者标识，即任何客户端都可以解锁。</p>
</li>
</ol>
<p>解锁代码</p>
<p>正确代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否释放成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line">        <span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，我们解锁只需要两行代码就搞定了！第一行代码，我们写了一个简单的Lua脚本代码。第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</p>
<p>那么这段Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。关于非原子性会带来什么问题，可以阅读【解锁代码-错误示例2】 。那么为什么执行eval()方法可以确保原子性，源于Redis的特性，简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</p>
<p>错误示例1</p>
<p>最常见的解锁代码就是直接使用jedis.del()方法删除锁，这种不先判断锁的拥有者而直接解锁的方式，会导致任何客户端都可以随时进行解锁，即使这把锁不是它的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongReleaseLock1</span><span class="params">(Jedis jedis, String lockKey)</span> </span>&#123;</span><br><span class="line">    jedis.del(lockKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误示例2</p>
<p>这种解锁代码乍一看也是没问题，甚至我之前也差点这样实现，与正确姿势差不多，唯一区别的是分成两条命令去执行，代码如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongReleaseLock2</span><span class="params">(Jedis jedis, <span class="keyword">String</span> lockKey, <span class="keyword">String</span> requestId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断加锁与解锁是不是同一个客户端</span></span><br><span class="line">    <span class="keyword">if</span> (requestId.equals(jedis.<span class="built_in">get</span>(lockKey))) &#123;</span><br><span class="line">        <span class="comment">// 若在此时，这把锁突然不是这个客户端的，则会误解锁</span></span><br><span class="line">        jedis.del(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如代码注释，这个代码的问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。那么是否真的有这种场景？答案是肯定的，比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p>
<p>总结</p>
<p>本文介绍的Redis分布式锁都是用JAVA实现，对于加锁和解锁的方法也分别给出了错误示例供大家参考。其实想要通过Redis实现分布式锁难度并不高，只要能满足上面给出的四个可靠性条件即可</p>
<h2 id="Redis分布式锁最完美实现Redisson"><a href="#Redis分布式锁最完美实现Redisson" class="headerlink" title="Redis分布式锁最完美实现Redisson"></a>Redis分布式锁最完美实现Redisson</h2><p>同一服务在单实例部署环境可通过synchronized、ReentrantLock本地锁来保证在一次只能允许一个线程执行被锁住的代码块，但在分布式多实例部署环境需实现分布式锁来保证互斥性。redission堪称redis分布式锁最完美实现，接下来一起来剖析redisson实现机制。</p>
<h2 id="基于Spring-AOP的Redis分布式锁"><a href="#基于Spring-AOP的Redis分布式锁" class="headerlink" title="基于Spring AOP的Redis分布式锁"></a>基于Spring AOP的Redis分布式锁</h2><p>问题描述：<br>某电商平台,首发一款新品手机,每人限购2台,预计会有10W的并发,在该情况下,如果扣减库存,保证不会超卖<br>问题分析：<br>如果你的系统是分布式集群部署的，那么传统的synchorinzed或者jdk1.5提供的Lock都是依赖本地的jvm虚拟机提供锁服务，分布式服务中多jvm是无法同享锁信息的，故无法提供锁。<br>分布式场景中数据一致性问题一直是一个比较重要的话题。分布式的CAP理论告诉我们任何一个分布式系统都无法同时满足一致性(Consistency)、可用性(Availability)、分区容错性(Partition tolerance),最多只能同时满足两项。所以很多系统在设计之初就要对这三者作出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证”最终一致性”,只要对最终时间是在用户可以接受的范围内即可。<br>实现思路：<br>使用redis实现分布式锁<br>1：获取锁的时候使用setnx命令设置唯一的key和expire设置锁过期时间。<br>2: 业务处理完毕之后使用delete命令删除key。<br>3: 如果业务处理中发生意外无法自动回收key资源，redis将通过expire命令之前设置锁过期时间自动回收。<br>Redis命令：<br>SETNX<br>SETNX key val 当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。<br>expire<br>expire key timeout 为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。<br>delete<br>delete key 删除key</p>
<p>使用AOP动态配置<br>Spring的AOP能为我们提供动态的锁获取和锁释放，能大大降低工作量和代码的耦合性。</p>
<p>jvm级别的锁和分布式锁区别<br><img src="07.jpg" alt="07.jpg"><br><img src="08.jpg" alt="08.jpg"><br><img src="09.jpg" alt="09.jpg"></p>
<p>代码案例：HelloRedis</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
